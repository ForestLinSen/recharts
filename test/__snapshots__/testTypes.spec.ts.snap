// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`should match /workplace/ckifer/recharts/types/cartesian/Area.d.ts snapshot 1`] = `"\\"import React, { PureComponent, ReactElement, SVGProps } from 'react';\\\\nimport { CurveType, Point as CurvePoint } from '../shape/Curve';\\\\nimport { Props as DotProps } from '../shape/Dot';\\\\nimport { Props as XAxisProps } from './XAxis';\\\\nimport { Props as YAxisProps } from './YAxis';\\\\nimport { D3Scale, LegendType, TooltipType, AnimationTiming, ChartOffset, Coordinate, DataKey, TickItem, AnimationDuration } from '../util/types';\\\\nexport type AreaDot = ReactElement<SVGElement> | ((props: any) => ReactElement<SVGElement>) | DotProps | boolean;\\\\ninterface AreaPointItem extends CurvePoint {\\\\n    value?: number | number[];\\\\n    payload?: any;\\\\n}\\\\ninterface InternalAreaProps {\\\\n    xAxis?: Omit<XAxisProps, 'scale'> & {\\\\n        scale: D3Scale<string | number>;\\\\n    };\\\\n    yAxis?: Omit<YAxisProps, 'scale'> & {\\\\n        scale: D3Scale<string | number>;\\\\n    };\\\\n    top?: number;\\\\n    left?: number;\\\\n    width?: number;\\\\n    height?: number;\\\\n    points?: AreaPointItem[];\\\\n    baseLine?: number | Coordinate[];\\\\n}\\\\ninterface AreaProps extends InternalAreaProps {\\\\n    className?: string;\\\\n    dataKey: DataKey<any>;\\\\n    data?: any[];\\\\n    type?: CurveType;\\\\n    unit?: string | number;\\\\n    name?: string | number;\\\\n    xAxisId?: string | number;\\\\n    yAxisId?: string | number;\\\\n    stackId?: string | number;\\\\n    legendType?: LegendType;\\\\n    tooltipType?: TooltipType;\\\\n    connectNulls?: boolean;\\\\n    activeDot?: AreaDot;\\\\n    dot?: AreaDot;\\\\n    label?: any;\\\\n    layout?: 'horizontal' | 'vertical';\\\\n    hide?: boolean;\\\\n    baseValue?: number | 'dataMin' | 'dataMax';\\\\n    isRange?: boolean;\\\\n    onAnimationStart?: () => void;\\\\n    onAnimationEnd?: () => void;\\\\n    isAnimationActive?: boolean;\\\\n    animateNewValues?: boolean;\\\\n    animationBegin?: number;\\\\n    animationDuration?: AnimationDuration;\\\\n    animationEasing?: AnimationTiming;\\\\n    animationId?: number;\\\\n    id?: string;\\\\n}\\\\nexport type Props = Omit<SVGProps<SVGElement>, 'type' | 'points'> & AreaProps;\\\\ninterface State {\\\\n    prevAnimationId?: number;\\\\n    prevPoints?: AreaPointItem[];\\\\n    prevBaseLine?: number | Coordinate[];\\\\n    curPoints?: AreaPointItem[];\\\\n    curBaseLine?: number | Coordinate[];\\\\n    isAnimationFinished?: boolean;\\\\n    totalLength?: number;\\\\n}\\\\nexport declare class Area extends PureComponent<Props, State> {\\\\n    static displayName: string;\\\\n    static defaultProps: {\\\\n        stroke: string;\\\\n        fill: string;\\\\n        fillOpacity: number;\\\\n        xAxisId: number;\\\\n        yAxisId: number;\\\\n        legendType: string;\\\\n        connectNulls: boolean;\\\\n        points: AreaPointItem[];\\\\n        dot: boolean;\\\\n        activeDot: boolean;\\\\n        hide: boolean;\\\\n        isAnimationActive: boolean;\\\\n        animationBegin: number;\\\\n        animationDuration: number;\\\\n        animationEasing: string;\\\\n    };\\\\n    static getBaseValue: (props: Props, item: Area, xAxis: Props['xAxis'], yAxis: Props['yAxis']) => number;\\\\n    static getComposedData: ({ props, item, xAxis, yAxis, xAxisTicks, yAxisTicks, bandSize, dataKey, stackedData, dataStartIndex, displayedData, offset, }: {\\\\n        props: Props;\\\\n        item: Area;\\\\n        bandSize: number;\\\\n        xAxis: InternalAreaProps['xAxis'];\\\\n        yAxis: InternalAreaProps['yAxis'];\\\\n        xAxisTicks: TickItem[];\\\\n        yAxisTicks: TickItem[];\\\\n        stackedData: number[][];\\\\n        dataStartIndex: number;\\\\n        offset: ChartOffset;\\\\n        displayedData: any[];\\\\n        dataKey: Props['dataKey'];\\\\n    }) => {\\\\n        top?: number;\\\\n        bottom?: number;\\\\n        left?: number;\\\\n        right?: number;\\\\n        width?: number;\\\\n        height?: number;\\\\n        brushBottom?: number;\\\\n        points: {\\\\n            x: number;\\\\n            y: number;\\\\n            value: any[];\\\\n            payload: any;\\\\n        }[];\\\\n        baseLine: number | {\\\\n            x: number;\\\\n            y: number;\\\\n        }[];\\\\n        layout: \\\\\\"horizontal\\\\\\" | \\\\\\"vertical\\\\\\";\\\\n        isRange: boolean;\\\\n    };\\\\n    static renderDotItem: (option: AreaDot, props: any) => React.JSX.Element;\\\\n    state: State;\\\\n    static getDerivedStateFromProps(nextProps: Props, prevState: State): State;\\\\n    id: string;\\\\n    handleAnimationEnd: () => void;\\\\n    handleAnimationStart: () => void;\\\\n    renderDots(needClip: boolean, clipDot: boolean, clipPathId: string): React.JSX.Element;\\\\n    renderHorizontalRect(alpha: number): React.JSX.Element;\\\\n    renderVerticalRect(alpha: number): React.JSX.Element;\\\\n    renderClipRect(alpha: number): React.JSX.Element;\\\\n    renderAreaStatically(points: AreaPointItem[], baseLine: Props['baseLine'], needClip: boolean, clipPathId: string): React.JSX.Element;\\\\n    renderAreaWithAnimation(needClip: boolean, clipPathId: string): React.JSX.Element;\\\\n    renderArea(needClip: boolean, clipPathId: string): React.JSX.Element;\\\\n    render(): React.JSX.Element;\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/cartesian/Bar.d.ts snapshot 1`] = `"\\"import React, { Key, PureComponent, ReactElement } from 'react';\\\\nimport { Props as RectangleProps } from '../shape/Rectangle';\\\\nimport { Props as XAxisProps } from './XAxis';\\\\nimport { Props as YAxisProps } from './YAxis';\\\\nimport { D3Scale, TooltipType, LegendType, AnimationTiming, ChartOffset, DataKey, TickItem, PresentationAttributesAdaptChildEvent, AnimationDuration, ActiveShape } from '../util/types';\\\\nimport { ImplicitLabelType } from '../component/Label';\\\\nimport { MinPointSize } from '../util/BarUtils';\\\\nexport interface BarRectangleItem extends RectangleProps {\\\\n    value?: number | [number, number];\\\\n    background?: {\\\\n        x?: number;\\\\n        y?: number;\\\\n        width?: number;\\\\n        height?: number;\\\\n    };\\\\n}\\\\ninterface InternalBarProps {\\\\n    xAxis?: Omit<XAxisProps, 'scale'> & {\\\\n        scale: D3Scale<string | number>;\\\\n        x?: number;\\\\n        width?: number;\\\\n    };\\\\n    yAxis?: Omit<YAxisProps, 'scale'> & {\\\\n        scale: D3Scale<string | number>;\\\\n        y?: number;\\\\n        height?: number;\\\\n    };\\\\n    data?: BarRectangleItem[];\\\\n    top?: number;\\\\n    left?: number;\\\\n    width?: number;\\\\n    height?: number;\\\\n}\\\\nexport interface BarProps extends InternalBarProps {\\\\n    className?: string;\\\\n    index?: Key;\\\\n    activeIndex?: number;\\\\n    layout?: 'horizontal' | 'vertical';\\\\n    xAxisId?: string | number;\\\\n    yAxisId?: string | number;\\\\n    stackId?: string | number;\\\\n    barSize?: number;\\\\n    unit?: string | number;\\\\n    name?: string | number;\\\\n    dataKey: DataKey<any>;\\\\n    tooltipType?: TooltipType;\\\\n    legendType?: LegendType;\\\\n    minPointSize?: MinPointSize;\\\\n    maxBarSize?: number;\\\\n    hide?: boolean;\\\\n    shape?: ActiveShape<BarProps, SVGPathElement>;\\\\n    activeBar?: ActiveShape<BarProps, SVGPathElement>;\\\\n    background?: ActiveShape<BarProps, SVGPathElement>;\\\\n    radius?: number | [number, number, number, number];\\\\n    onAnimationStart?: () => void;\\\\n    onAnimationEnd?: () => void;\\\\n    isAnimationActive?: boolean;\\\\n    animationBegin?: number;\\\\n    animationDuration?: AnimationDuration;\\\\n    animationEasing?: AnimationTiming;\\\\n    animationId?: number;\\\\n    id?: string;\\\\n    label?: ImplicitLabelType;\\\\n}\\\\nexport type Props = Omit<PresentationAttributesAdaptChildEvent<any, SVGPathElement>, 'radius'> & BarProps;\\\\ninterface State {\\\\n    readonly isAnimationFinished?: boolean;\\\\n    readonly prevData?: BarRectangleItem[];\\\\n    readonly curData?: BarRectangleItem[];\\\\n    readonly prevAnimationId?: number;\\\\n}\\\\nexport declare class Bar extends PureComponent<Props, State> {\\\\n    static displayName: string;\\\\n    static defaultProps: {\\\\n        xAxisId: number;\\\\n        yAxisId: number;\\\\n        legendType: string;\\\\n        minPointSize: number;\\\\n        hide: boolean;\\\\n        data: BarRectangleItem[];\\\\n        layout: string;\\\\n        activeBar: boolean;\\\\n        isAnimationActive: boolean;\\\\n        animationBegin: number;\\\\n        animationDuration: number;\\\\n        animationEasing: string;\\\\n    };\\\\n    static getComposedData: ({ props, item, barPosition, bandSize, xAxis, yAxis, xAxisTicks, yAxisTicks, stackedData, dataStartIndex, displayedData, offset, }: {\\\\n        props: Props;\\\\n        item: ReactElement;\\\\n        barPosition: any;\\\\n        bandSize: number;\\\\n        xAxis: InternalBarProps['xAxis'];\\\\n        yAxis: InternalBarProps['yAxis'];\\\\n        xAxisTicks: TickItem[];\\\\n        yAxisTicks: TickItem[];\\\\n        stackedData: Array<[number, number]>;\\\\n        dataStartIndex: number;\\\\n        offset: ChartOffset;\\\\n        displayedData: any[];\\\\n    }) => {\\\\n        top?: number;\\\\n        bottom?: number;\\\\n        left?: number;\\\\n        right?: number;\\\\n        width?: number;\\\\n        height?: number;\\\\n        brushBottom?: number;\\\\n        data: any[];\\\\n        layout: \\\\\\"horizontal\\\\\\" | \\\\\\"vertical\\\\\\";\\\\n    };\\\\n    state: State;\\\\n    static getDerivedStateFromProps(nextProps: Props, prevState: State): State;\\\\n    id: string;\\\\n    handleAnimationEnd: () => void;\\\\n    handleAnimationStart: () => void;\\\\n    renderRectanglesStatically(data: BarRectangleItem[]): React.JSX.Element[];\\\\n    renderRectanglesWithAnimation(): React.JSX.Element;\\\\n    renderRectangles(): React.JSX.Element | React.JSX.Element[];\\\\n    renderBackground(): React.JSX.Element[];\\\\n    renderErrorBar(needClip: boolean, clipPathId: string): React.JSX.Element;\\\\n    render(): React.JSX.Element;\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/cartesian/Brush.d.ts snapshot 1`] = `"\\"import React, { PureComponent, ReactText, ReactElement, TouchEvent, SVGProps } from 'react';\\\\nimport { ScalePoint } from 'victory-vendor/d3-scale';\\\\nimport { Padding, DataKey } from '../util/types';\\\\ntype BrushTravellerType = ReactElement<SVGElement> | ((props: any) => ReactElement<SVGElement>);\\\\ninterface BrushStartEndIndex {\\\\n    startIndex?: number;\\\\n    endIndex?: number;\\\\n}\\\\ninterface InternalBrushProps {\\\\n    x?: number;\\\\n    y?: number;\\\\n    width?: number;\\\\n    data?: any[];\\\\n    updateId?: string | number;\\\\n}\\\\ninterface BrushProps extends InternalBrushProps {\\\\n    className?: string;\\\\n    ariaLabel?: string;\\\\n    height: number;\\\\n    travellerWidth?: number;\\\\n    traveller?: BrushTravellerType;\\\\n    gap?: number;\\\\n    padding?: Padding;\\\\n    dataKey?: DataKey<any>;\\\\n    startIndex?: number;\\\\n    endIndex?: number;\\\\n    tickFormatter?: (value: any, index: number) => ReactText;\\\\n    children?: ReactElement;\\\\n    onChange?: (newIndex: BrushStartEndIndex) => void;\\\\n    onDragEnd?: (newIndex: BrushStartEndIndex) => void;\\\\n    leaveTimeOut?: number;\\\\n    alwaysShowText?: boolean;\\\\n}\\\\nexport type Props = Omit<SVGProps<SVGElement>, 'onChange'> & BrushProps;\\\\ntype BrushTravellerId = 'startX' | 'endX';\\\\ninterface State {\\\\n    isTravellerMoving?: boolean;\\\\n    isTravellerFocused?: boolean;\\\\n    isSlideMoving?: boolean;\\\\n    startX?: number;\\\\n    endX?: number;\\\\n    slideMoveStartX?: number;\\\\n    movingTravellerId?: BrushTravellerId;\\\\n    isTextActive?: boolean;\\\\n    brushMoveStartX?: number;\\\\n    scale?: ScalePoint<number>;\\\\n    scaleValues?: number[];\\\\n    prevData?: any[];\\\\n    prevWidth?: number;\\\\n    prevX?: number;\\\\n    prevTravellerWidth?: number;\\\\n    prevUpdateId?: string | number;\\\\n}\\\\nexport declare class Brush extends PureComponent<Props, State> {\\\\n    static displayName: string;\\\\n    static defaultProps: {\\\\n        height: number;\\\\n        travellerWidth: number;\\\\n        gap: number;\\\\n        fill: string;\\\\n        stroke: string;\\\\n        padding: {\\\\n            top: number;\\\\n            right: number;\\\\n            bottom: number;\\\\n            left: number;\\\\n        };\\\\n        leaveTimeOut: number;\\\\n        alwaysShowText: boolean;\\\\n    };\\\\n    constructor(props: Props);\\\\n    leaveTimer?: number;\\\\n    travellerDragStartHandlers?: Record<BrushTravellerId, (event: React.MouseEvent<SVGGElement> | TouchEvent<SVGGElement>) => void>;\\\\n    static renderDefaultTraveller(props: any): React.JSX.Element;\\\\n    static renderTraveller(option: BrushTravellerType, props: any): React.JSX.Element;\\\\n    static getDerivedStateFromProps(nextProps: Props, prevState: State): State;\\\\n    componentWillUnmount(): void;\\\\n    static getIndexInRange(valueRange: number[], x: number): number;\\\\n    getIndex({ startX, endX }: {\\\\n        startX: number;\\\\n        endX: number;\\\\n    }): {\\\\n        startIndex: number;\\\\n        endIndex: number;\\\\n    };\\\\n    getTextOfTick(index: number): any;\\\\n    handleDrag: (e: React.Touch | React.MouseEvent<SVGGElement> | MouseEvent) => void;\\\\n    handleTouchMove: (e: TouchEvent<SVGGElement>) => void;\\\\n    attachDragEndListener(): void;\\\\n    detachDragEndListener(): void;\\\\n    handleDragEnd: () => void;\\\\n    handleLeaveWrapper: () => void;\\\\n    handleEnterSlideOrTraveller: () => void;\\\\n    handleLeaveSlideOrTraveller: () => void;\\\\n    handleSlideDragStart: (e: TouchEvent<SVGRectElement> | React.MouseEvent<SVGRectElement>) => void;\\\\n    handleSlideDrag(e: React.Touch | React.MouseEvent<SVGGElement> | MouseEvent): void;\\\\n    handleTravellerDragStart(id: BrushTravellerId, e: React.MouseEvent<SVGGElement> | TouchEvent<SVGGElement>): void;\\\\n    handleTravellerMove(e: React.Touch | React.MouseEvent<SVGGElement> | MouseEvent): void;\\\\n    handleTravellerMoveKeyboard(direction: 1 | -1, id: BrushTravellerId): void;\\\\n    renderBackground(): React.JSX.Element;\\\\n    renderPanorama(): React.ReactElement<any, string | React.JSXElementConstructor<any>>;\\\\n    renderTravellerLayer(travellerX: number, id: BrushTravellerId): React.JSX.Element;\\\\n    renderSlide(startX: number, endX: number): React.JSX.Element;\\\\n    renderText(): React.JSX.Element;\\\\n    render(): React.JSX.Element;\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/cartesian/CartesianAxis.d.ts snapshot 1`] = `"\\"import React, { ReactElement, ReactNode, Component, SVGProps } from 'react';\\\\nimport { CartesianViewBox, PresentationAttributesAdaptChildEvent, CartesianTickItem, AxisInterval } from '../util/types';\\\\nexport type Orientation = 'top' | 'bottom' | 'left' | 'right';\\\\nexport type Unit = string | number;\\\\nexport type TickFormatter = (value: any, index: number) => string;\\\\nexport interface CartesianAxisProps {\\\\n    className?: string;\\\\n    x?: number;\\\\n    y?: number;\\\\n    width?: number;\\\\n    height?: number;\\\\n    unit?: Unit;\\\\n    orientation?: Orientation;\\\\n    viewBox?: CartesianViewBox;\\\\n    tick?: SVGProps<SVGTextElement> | ReactElement<SVGElement> | ((props: any) => ReactElement<SVGElement>) | boolean;\\\\n    axisLine?: boolean | SVGProps<SVGLineElement>;\\\\n    tickLine?: boolean | SVGProps<SVGLineElement>;\\\\n    mirror?: boolean;\\\\n    tickMargin?: number;\\\\n    hide?: boolean;\\\\n    label?: any;\\\\n    minTickGap?: number;\\\\n    ticks?: CartesianTickItem[];\\\\n    tickSize?: number;\\\\n    tickFormatter?: TickFormatter;\\\\n    ticksGenerator?: (props?: CartesianAxisProps) => CartesianTickItem[];\\\\n    interval?: AxisInterval;\\\\n    angle?: number;\\\\n}\\\\ninterface IState {\\\\n    fontSize: string;\\\\n    letterSpacing: string;\\\\n}\\\\nexport type Props = Omit<PresentationAttributesAdaptChildEvent<any, SVGElement>, 'viewBox'> & CartesianAxisProps;\\\\nexport declare class CartesianAxis extends Component<Props, IState> {\\\\n    static displayName: string;\\\\n    static defaultProps: {\\\\n        x: number;\\\\n        y: number;\\\\n        width: number;\\\\n        height: number;\\\\n        viewBox: {\\\\n            x: number;\\\\n            y: number;\\\\n            width: number;\\\\n            height: number;\\\\n        };\\\\n        orientation: string;\\\\n        ticks: CartesianTickItem[];\\\\n        stroke: string;\\\\n        tickLine: boolean;\\\\n        axisLine: boolean;\\\\n        tick: boolean;\\\\n        mirror: boolean;\\\\n        minTickGap: number;\\\\n        tickSize: number;\\\\n        tickMargin: number;\\\\n        interval: string;\\\\n    };\\\\n    private layerReference;\\\\n    constructor(props: Props);\\\\n    shouldComponentUpdate({ viewBox, ...restProps }: Props, nextState: IState): boolean;\\\\n    componentDidMount(): void;\\\\n    getTickLineCoord(data: CartesianTickItem): {\\\\n        line: {\\\\n            x1: number;\\\\n            y1: number;\\\\n            x2: number;\\\\n            y2: number;\\\\n        };\\\\n        tick: {\\\\n            x: number;\\\\n            y: number;\\\\n        };\\\\n    };\\\\n    getTickTextAnchor(): string;\\\\n    getTickVerticalAnchor(): string;\\\\n    renderAxisLine(): React.JSX.Element;\\\\n    static renderTickItem(option: Props['tick'], props: any, value: ReactNode): React.JSX.Element;\\\\n    renderTicks(ticks: CartesianTickItem[], fontSize: string, letterSpacing: string): React.JSX.Element;\\\\n    render(): React.JSX.Element;\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/cartesian/CartesianGrid.d.ts snapshot 1`] = `"\\"import React, { ReactElement, SVGProps } from 'react';\\\\nimport { ChartOffset, D3Scale } from '../util/types';\\\\nimport { Props as XAxisProps } from './XAxis';\\\\nimport { Props as YAxisProps } from './YAxis';\\\\ntype XAxisWithD3Scale = Omit<XAxisProps, 'scale'> & {\\\\n    scale: D3Scale<string | number>;\\\\n};\\\\ntype YAxisWithD3Scale = Omit<YAxisProps, 'scale'> & {\\\\n    scale: D3Scale<string | number>;\\\\n};\\\\nexport type GridLineTypeFunctionProps = Omit<LineItemProps, 'key'> & {\\\\n    key: LineItemProps['key'] | undefined;\\\\n    offset: ChartOffset;\\\\n    xAxis: null | XAxisWithD3Scale;\\\\n    yAxis: null | YAxisWithD3Scale;\\\\n};\\\\ntype GridLineType = SVGProps<SVGLineElement> | ReactElement<SVGElement> | ((props: GridLineTypeFunctionProps) => ReactElement<SVGElement>) | boolean;\\\\nexport type HorizontalCoordinatesGenerator = (props: {\\\\n    yAxis: any;\\\\n    width: number;\\\\n    height: number;\\\\n    offset: ChartOffset;\\\\n}, syncWithTicks: boolean) => number[];\\\\nexport type VerticalCoordinatesGenerator = (props: {\\\\n    xAxis: any;\\\\n    width: number;\\\\n    height: number;\\\\n    offset: ChartOffset;\\\\n}, syncWithTicks: boolean) => number[];\\\\ninterface InternalCartesianGridProps {\\\\n    width?: number;\\\\n    height?: number;\\\\n    horizontalCoordinatesGenerator?: HorizontalCoordinatesGenerator;\\\\n    verticalCoordinatesGenerator?: VerticalCoordinatesGenerator;\\\\n}\\\\ninterface CartesianGridProps extends InternalCartesianGridProps {\\\\n    x?: number;\\\\n    y?: number;\\\\n    horizontal?: GridLineType;\\\\n    vertical?: GridLineType;\\\\n    horizontalPoints?: number[];\\\\n    verticalPoints?: number[];\\\\n    verticalFill?: string[];\\\\n    horizontalFill?: string[];\\\\n    syncWithTicks?: boolean;\\\\n    horizontalValues?: number[] | string[];\\\\n    verticalValues?: number[] | string[];\\\\n}\\\\ntype AcceptedSvgProps = Omit<SVGProps<SVGElement>, 'offset'>;\\\\nexport type Props = AcceptedSvgProps & CartesianGridProps;\\\\ntype LineItemProps = Props & {\\\\n    offset: ChartOffset;\\\\n    xAxis: null | XAxisWithD3Scale;\\\\n    yAxis: null | YAxisWithD3Scale;\\\\n    x1: number;\\\\n    y1: number;\\\\n    x2: number;\\\\n    y2: number;\\\\n    key: string;\\\\n    index: number;\\\\n};\\\\nexport declare function CartesianGrid(props: Props): React.JSX.Element;\\\\nexport declare namespace CartesianGrid {\\\\n    var displayName: string;\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/cartesian/ErrorBar.d.ts snapshot 1`] = `"\\"import React, { SVGProps } from 'react';\\\\nimport { Props as XAxisProps } from './XAxis';\\\\nimport { Props as YAxisProps } from './YAxis';\\\\nimport { D3Scale, DataKey } from '../util/types';\\\\nimport { BarRectangleItem } from './Bar';\\\\nimport { LinePointItem } from './Line';\\\\nimport { ScatterPointItem } from './Scatter';\\\\nexport interface ErrorBarDataItem {\\\\n    x: number;\\\\n    y: number;\\\\n    value: number;\\\\n    errorVal?: number[] | number;\\\\n}\\\\nexport type ErrorBarDataPointFormatter = (entry: BarRectangleItem | LinePointItem | ScatterPointItem, dataKey: DataKey<any>) => ErrorBarDataItem;\\\\ninterface InternalErrorBarProps {\\\\n    xAxis?: Omit<XAxisProps, 'scale'> & {\\\\n        scale: D3Scale<string | number>;\\\\n    };\\\\n    yAxis?: Omit<YAxisProps, 'scale'> & {\\\\n        scale: D3Scale<string | number>;\\\\n    };\\\\n    data?: any[];\\\\n    layout?: 'horizontal' | 'vertical';\\\\n    dataPointFormatter?: ErrorBarDataPointFormatter;\\\\n    offset?: number;\\\\n}\\\\ninterface ErrorBarProps extends InternalErrorBarProps {\\\\n    dataKey: DataKey<any>;\\\\n    width?: number;\\\\n    direction?: 'x' | 'y';\\\\n}\\\\nexport type Props = SVGProps<SVGLineElement> & ErrorBarProps;\\\\nexport declare function ErrorBar(props: Props): React.JSX.Element;\\\\nexport declare namespace ErrorBar {\\\\n    var defaultProps: {\\\\n        stroke: string;\\\\n        strokeWidth: number;\\\\n        width: number;\\\\n        offset: number;\\\\n        layout: string;\\\\n    };\\\\n    var displayName: string;\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/cartesian/Line.d.ts snapshot 1`] = `"\\"import React, { PureComponent, ReactElement } from 'react';\\\\nimport { CurveType, Props as CurveProps, Point as CurvePoint } from '../shape/Curve';\\\\nimport { Props as DotProps } from '../shape/Dot';\\\\nimport { ImplicitLabelType } from '../component/Label';\\\\nimport { Props as XAxisProps } from './XAxis';\\\\nimport { Props as YAxisProps } from './YAxis';\\\\nimport { D3Scale, LegendType, TooltipType, AnimationTiming, ChartOffset, DataKey, TickItem, AnimationDuration, ActiveShape } from '../util/types';\\\\nexport type LineDot = ReactElement<SVGElement> | ((props: any) => ReactElement<SVGElement>) | DotProps | boolean;\\\\nexport interface LinePointItem extends CurvePoint {\\\\n    value?: number;\\\\n    payload?: any;\\\\n}\\\\ninterface InternalLineProps {\\\\n    top?: number;\\\\n    left?: number;\\\\n    width?: number;\\\\n    height?: number;\\\\n    points?: LinePointItem[];\\\\n    xAxis?: Omit<XAxisProps, 'scale'> & {\\\\n        scale: D3Scale<string | number>;\\\\n    };\\\\n    yAxis?: Omit<YAxisProps, 'scale'> & {\\\\n        scale: D3Scale<string | number>;\\\\n    };\\\\n}\\\\ninterface LineProps extends InternalLineProps {\\\\n    className?: string;\\\\n    data?: any;\\\\n    type?: CurveType;\\\\n    unit?: string | number;\\\\n    name?: string | number;\\\\n    yAxisId?: string | number;\\\\n    xAxisId?: string | number;\\\\n    dataKey?: DataKey<any>;\\\\n    legendType?: LegendType;\\\\n    tooltipType?: TooltipType;\\\\n    layout?: 'horizontal' | 'vertical';\\\\n    connectNulls?: boolean;\\\\n    hide?: boolean;\\\\n    activeDot?: ActiveShape<DotProps> | DotProps;\\\\n    dot?: LineDot;\\\\n    onAnimationStart?: () => void;\\\\n    onAnimationEnd?: () => void;\\\\n    isAnimationActive?: boolean;\\\\n    animateNewValues?: boolean;\\\\n    animationBegin?: number;\\\\n    animationDuration?: AnimationDuration;\\\\n    animationEasing?: AnimationTiming;\\\\n    animationId?: number;\\\\n    id?: string;\\\\n    label?: ImplicitLabelType;\\\\n}\\\\nexport type Props = Omit<CurveProps, 'points' | 'pathRef'> & LineProps;\\\\ninterface State {\\\\n    isAnimationFinished?: boolean;\\\\n    totalLength?: number;\\\\n    prevPoints?: LinePointItem[];\\\\n    curPoints?: LinePointItem[];\\\\n    prevAnimationId?: number;\\\\n}\\\\nexport declare class Line extends PureComponent<Props, State> {\\\\n    static displayName: string;\\\\n    static defaultProps: {\\\\n        xAxisId: number;\\\\n        yAxisId: number;\\\\n        connectNulls: boolean;\\\\n        activeDot: boolean;\\\\n        dot: boolean;\\\\n        legendType: string;\\\\n        stroke: string;\\\\n        strokeWidth: number;\\\\n        fill: string;\\\\n        points: LinePointItem[];\\\\n        isAnimationActive: boolean;\\\\n        animateNewValues: boolean;\\\\n        animationBegin: number;\\\\n        animationDuration: number;\\\\n        animationEasing: string;\\\\n        hide: boolean;\\\\n        label: boolean;\\\\n    };\\\\n    static getComposedData: ({ props, xAxis, yAxis, xAxisTicks, yAxisTicks, dataKey, bandSize, displayedData, offset, }: {\\\\n        props: Props;\\\\n        xAxis: Props['xAxis'];\\\\n        yAxis: Props['yAxis'];\\\\n        xAxisTicks: TickItem[];\\\\n        yAxisTicks: TickItem[];\\\\n        dataKey: Props['dataKey'];\\\\n        bandSize: number;\\\\n        displayedData: any[];\\\\n        offset: ChartOffset;\\\\n    }) => {\\\\n        top?: number;\\\\n        bottom?: number;\\\\n        left?: number;\\\\n        right?: number;\\\\n        width?: number;\\\\n        height?: number;\\\\n        brushBottom?: number;\\\\n        points: {\\\\n            x: number;\\\\n            y: number;\\\\n            value: any;\\\\n            payload: any;\\\\n        }[];\\\\n        layout: \\\\\\"horizontal\\\\\\" | \\\\\\"vertical\\\\\\";\\\\n    };\\\\n    mainCurve?: SVGPathElement;\\\\n    state: State;\\\\n    componentDidMount(): void;\\\\n    componentDidUpdate(): void;\\\\n    static getDerivedStateFromProps(nextProps: Props, prevState: State): State;\\\\n    getTotalLength(): number;\\\\n    generateSimpleStrokeDasharray: (totalLength: number, length: number) => string;\\\\n    getStrokeDasharray: (length: number, totalLength: number, lines: number[]) => string;\\\\n    id: string;\\\\n    pathRef: (node: SVGPathElement) => void;\\\\n    static repeat(lines: number[], count: number): number[];\\\\n    handleAnimationEnd: () => void;\\\\n    handleAnimationStart: () => void;\\\\n    renderErrorBar(needClip: boolean, clipPathId: string): React.JSX.Element;\\\\n    static renderDotItem(option: LineDot, props: any): React.JSX.Element;\\\\n    renderDots(needClip: boolean, clipDot: boolean, clipPathId: string): React.JSX.Element;\\\\n    renderCurveStatically(points: LinePointItem[], needClip: boolean, clipPathId: string, props?: {\\\\n        strokeDasharray: string;\\\\n    }): React.JSX.Element;\\\\n    renderCurveWithAnimation(needClip: boolean, clipPathId: string): React.JSX.Element;\\\\n    renderCurve(needClip: boolean, clipPathId: string): React.JSX.Element;\\\\n    render(): React.JSX.Element;\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/cartesian/ReferenceArea.d.ts snapshot 1`] = `"\\"import React, { ReactElement } from 'react';\\\\nimport { ImplicitLabelType } from '../component/Label';\\\\nimport { IfOverflow } from '../util/IfOverflowMatches';\\\\nimport { Props as RectangleProps } from '../shape/Rectangle';\\\\nimport { CartesianViewBox, D3Scale } from '../util/types';\\\\nimport { Props as XAxisProps } from './XAxis';\\\\nimport { Props as YAxisProps } from './YAxis';\\\\ninterface InternalReferenceAreaProps {\\\\n    viewBox?: CartesianViewBox;\\\\n    xAxis?: Omit<XAxisProps, 'scale'> & {\\\\n        scale: D3Scale<string | number>;\\\\n    };\\\\n    yAxis?: Omit<YAxisProps, 'scale'> & {\\\\n        scale: D3Scale<string | number>;\\\\n    };\\\\n    clipPathId?: number | string;\\\\n}\\\\ninterface ReferenceAreaProps extends InternalReferenceAreaProps {\\\\n    isFront?: boolean;\\\\n    alwaysShow?: boolean;\\\\n    ifOverflow?: IfOverflow;\\\\n    x1?: number | string;\\\\n    x2?: number | string;\\\\n    y1?: number | string;\\\\n    y2?: number | string;\\\\n    className?: number | string;\\\\n    yAxisId?: number | string;\\\\n    xAxisId?: number | string;\\\\n    shape?: ReactElement<SVGElement> | ((props: any) => ReactElement<SVGElement>);\\\\n    label?: ImplicitLabelType;\\\\n}\\\\nexport type Props = RectangleProps & ReferenceAreaProps;\\\\nexport declare function ReferenceArea(props: Props): React.JSX.Element;\\\\nexport declare namespace ReferenceArea {\\\\n    var displayName: string;\\\\n    var defaultProps: {\\\\n        isFront: boolean;\\\\n        ifOverflow: string;\\\\n        xAxisId: number;\\\\n        yAxisId: number;\\\\n        r: number;\\\\n        fill: string;\\\\n        fillOpacity: number;\\\\n        stroke: string;\\\\n        strokeWidth: number;\\\\n    };\\\\n    var renderRect: (option: React.ReactElement<SVGElement, string | React.JSXElementConstructor<any>> | ((props: any) => React.ReactElement<SVGElement, string | React.JSXElementConstructor<any>>), props: any) => React.JSX.Element;\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/cartesian/ReferenceDot.d.ts snapshot 1`] = `"\\"import React, { ReactElement } from 'react';\\\\nimport { Props as DotProps } from '../shape/Dot';\\\\nimport { ImplicitLabelType } from '../component/Label';\\\\nimport { IfOverflow } from '../util/IfOverflowMatches';\\\\nimport { D3Scale } from '../util/types';\\\\nimport { Props as XAxisProps } from './XAxis';\\\\nimport { Props as YAxisProps } from './YAxis';\\\\ninterface InternalReferenceDotProps {\\\\n    xAxis?: Omit<XAxisProps, 'scale'> & {\\\\n        scale: D3Scale<string | number>;\\\\n    };\\\\n    yAxis?: Omit<YAxisProps, 'scale'> & {\\\\n        scale: D3Scale<string | number>;\\\\n    };\\\\n    clipPathId?: number | string;\\\\n}\\\\ninterface ReferenceDotProps extends InternalReferenceDotProps {\\\\n    r?: number;\\\\n    isFront?: boolean;\\\\n    alwaysShow?: boolean;\\\\n    ifOverflow?: IfOverflow;\\\\n    x?: number | string;\\\\n    y?: number | string;\\\\n    className?: number | string;\\\\n    yAxisId?: number | string;\\\\n    xAxisId?: number | string;\\\\n    shape?: ReactElement<SVGElement> | ((props: any) => ReactElement<SVGElement>);\\\\n    label?: ImplicitLabelType;\\\\n}\\\\nexport type Props = DotProps & ReferenceDotProps;\\\\nexport declare function ReferenceDot(props: Props): React.JSX.Element;\\\\nexport declare namespace ReferenceDot {\\\\n    var displayName: string;\\\\n    var defaultProps: {\\\\n        isFront: boolean;\\\\n        ifOverflow: string;\\\\n        xAxisId: number;\\\\n        yAxisId: number;\\\\n        r: number;\\\\n        fill: string;\\\\n        stroke: string;\\\\n        fillOpacity: number;\\\\n        strokeWidth: number;\\\\n    };\\\\n    var renderDot: (option: React.ReactElement<SVGElement, string | React.JSXElementConstructor<any>> | ((props: any) => React.ReactElement<SVGElement, string | React.JSXElementConstructor<any>>), props: any) => React.JSX.Element;\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/cartesian/ReferenceLine.d.ts snapshot 1`] = `"\\"import React, { ReactElement, SVGProps } from 'react';\\\\nimport { ImplicitLabelType } from '../component/Label';\\\\nimport { IfOverflow } from '../util/IfOverflowMatches';\\\\nimport { CartesianViewBox, D3Scale } from '../util/types';\\\\nimport { Props as XAxisProps } from './XAxis';\\\\nimport { Props as YAxisProps } from './YAxis';\\\\ninterface InternalReferenceLineProps {\\\\n    viewBox?: CartesianViewBox;\\\\n    xAxis?: Omit<XAxisProps, 'scale'> & {\\\\n        scale: D3Scale<string | number>;\\\\n    };\\\\n    yAxis?: Omit<YAxisProps, 'scale'> & {\\\\n        scale: D3Scale<string | number>;\\\\n    };\\\\n    clipPathId?: number | string;\\\\n}\\\\nexport type Segment = {\\\\n    x?: number | string;\\\\n    y?: number | string;\\\\n};\\\\nexport type ReferenceLinePosition = 'middle' | 'start' | 'end';\\\\ninterface ReferenceLineProps extends InternalReferenceLineProps {\\\\n    isFront?: boolean;\\\\n    alwaysShow?: boolean;\\\\n    ifOverflow?: IfOverflow;\\\\n    x?: number | string;\\\\n    y?: number | string;\\\\n    segment?: ReadonlyArray<Segment>;\\\\n    position?: ReferenceLinePosition;\\\\n    className?: number | string;\\\\n    yAxisId?: number | string;\\\\n    xAxisId?: number | string;\\\\n    shape?: ReactElement<SVGElement> | ((props: any) => ReactElement<SVGElement>);\\\\n    label?: ImplicitLabelType;\\\\n}\\\\nexport type Props = Omit<SVGProps<SVGLineElement>, 'viewBox'> & ReferenceLineProps;\\\\ntype EndPointsPropsSubset = {\\\\n    alwaysShow?: boolean;\\\\n    ifOverflow?: IfOverflow;\\\\n    segment?: ReadonlyArray<Segment>;\\\\n    x?: number | string;\\\\n    y?: number | string;\\\\n};\\\\nexport declare const getEndPoints: (scales: any, isFixedX: boolean, isFixedY: boolean, isSegment: boolean, viewBox: CartesianViewBox, position: Props['position'], xAxisOrientation: XAxisProps['orientation'], yAxisOrientation: YAxisProps['orientation'], props: EndPointsPropsSubset) => any[];\\\\nexport declare function ReferenceLine(props: Props): React.JSX.Element;\\\\nexport declare namespace ReferenceLine {\\\\n    var displayName: string;\\\\n    var defaultProps: {\\\\n        isFront: boolean;\\\\n        ifOverflow: string;\\\\n        xAxisId: number;\\\\n        yAxisId: number;\\\\n        fill: string;\\\\n        stroke: string;\\\\n        fillOpacity: number;\\\\n        strokeWidth: number;\\\\n        position: string;\\\\n    };\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/cartesian/Scatter.d.ts snapshot 1`] = `"\\"import React, { PureComponent, ReactElement } from 'react';\\\\nimport { ImplicitLabelListType } from '../component/LabelList';\\\\nimport { Props as ZAxisProps } from './ZAxis';\\\\nimport { Props as CurveProps, CurveType } from '../shape/Curve';\\\\nimport { Props as ErrorBarProps } from './ErrorBar';\\\\nimport { LegendType, AnimationTiming, D3Scale, ChartOffset, DataKey, TickItem, PresentationAttributesAdaptChildEvent, AnimationDuration, ActiveShape, SymbolType } from '../util/types';\\\\nimport { TooltipType } from '../component/DefaultTooltipContent';\\\\nimport { Props as XAxisProps } from './XAxis';\\\\nimport { Props as YAxisProps } from './YAxis';\\\\nimport { InnerSymbolsProp } from '../shape/Symbols';\\\\ninterface ScattterPointNode {\\\\n    x?: number | string;\\\\n    y?: number | string;\\\\n    z?: number | string;\\\\n}\\\\nexport interface ScatterPointItem {\\\\n    cx?: number;\\\\n    cy?: number;\\\\n    size?: number;\\\\n    node?: ScattterPointNode;\\\\n    payload?: any;\\\\n}\\\\nexport type ScatterCustomizedShape = ActiveShape<ScatterPointItem, SVGPathElement & InnerSymbolsProp> | SymbolType;\\\\ninterface ScatterProps {\\\\n    data?: any[];\\\\n    xAxisId?: string | number;\\\\n    yAxisId?: string | number;\\\\n    zAxisId?: string | number;\\\\n    left?: number;\\\\n    top?: number;\\\\n    width?: number;\\\\n    height?: number;\\\\n    xAxis?: Omit<XAxisProps, 'scale'> & {\\\\n        scale: D3Scale<string | number>;\\\\n    };\\\\n    yAxis?: Omit<YAxisProps, 'scale'> & {\\\\n        scale: D3Scale<string | number>;\\\\n    };\\\\n    zAxis?: Omit<ZAxisProps, 'scale'> & {\\\\n        scale: D3Scale<string | number>;\\\\n    };\\\\n    dataKey?: DataKey<any>;\\\\n    line?: ReactElement<SVGElement> | ((props: any) => ReactElement<SVGElement>) | CurveProps | boolean;\\\\n    lineType?: 'fitting' | 'joint';\\\\n    lineJointType?: CurveType;\\\\n    legendType?: LegendType;\\\\n    tooltipType?: TooltipType;\\\\n    className?: string;\\\\n    name?: string | number;\\\\n    activeIndex?: number;\\\\n    activeShape?: ScatterCustomizedShape;\\\\n    shape?: ScatterCustomizedShape;\\\\n    points?: ScatterPointItem[];\\\\n    hide?: boolean;\\\\n    label?: ImplicitLabelListType<any>;\\\\n    isAnimationActive?: boolean;\\\\n    animationId?: number;\\\\n    animationBegin?: number;\\\\n    animationDuration?: AnimationDuration;\\\\n    animationEasing?: AnimationTiming;\\\\n}\\\\nexport type Props = PresentationAttributesAdaptChildEvent<any, SVGElement> & ScatterProps;\\\\ninterface State {\\\\n    isAnimationFinished?: boolean;\\\\n    prevPoints?: ScatterPointItem[];\\\\n    curPoints?: ScatterPointItem[];\\\\n    prevAnimationId?: number;\\\\n}\\\\nexport declare class Scatter extends PureComponent<Props, State> {\\\\n    static displayName: string;\\\\n    static defaultProps: {\\\\n        xAxisId: number;\\\\n        yAxisId: number;\\\\n        zAxisId: number;\\\\n        legendType: string;\\\\n        lineType: string;\\\\n        lineJointType: string;\\\\n        data: any[];\\\\n        shape: string;\\\\n        hide: boolean;\\\\n        isAnimationActive: boolean;\\\\n        animationBegin: number;\\\\n        animationDuration: number;\\\\n        animationEasing: string;\\\\n    };\\\\n    static getComposedData: ({ xAxis, yAxis, zAxis, item, displayedData, xAxisTicks, yAxisTicks, offset, }: {\\\\n        props: Props;\\\\n        xAxis: Props['xAxis'];\\\\n        yAxis: Props['yAxis'];\\\\n        zAxis: Props['zAxis'];\\\\n        xAxisTicks: TickItem[];\\\\n        yAxisTicks: TickItem[];\\\\n        item: Scatter;\\\\n        bandSize: number;\\\\n        displayedData: any[];\\\\n        offset: ChartOffset;\\\\n    }) => {\\\\n        top?: number;\\\\n        bottom?: number;\\\\n        left?: number;\\\\n        right?: number;\\\\n        width?: number;\\\\n        height?: number;\\\\n        brushBottom?: number;\\\\n        points: any[];\\\\n    };\\\\n    state: State;\\\\n    static getDerivedStateFromProps(nextProps: Props, prevState: State): State;\\\\n    handleAnimationEnd: () => void;\\\\n    handleAnimationStart: () => void;\\\\n    id: string;\\\\n    renderSymbolsStatically(points: ScatterPointItem[]): React.JSX.Element[];\\\\n    renderSymbolsWithAnimation(): React.JSX.Element;\\\\n    renderSymbols(): React.JSX.Element | React.JSX.Element[];\\\\n    renderErrorBar(): React.ReactElement<ErrorBarProps, string | React.JSXElementConstructor<any>>[];\\\\n    renderLine(): React.JSX.Element;\\\\n    render(): React.JSX.Element;\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/cartesian/XAxis.d.ts snapshot 1`] = `"\\"import type { FunctionComponent, SVGProps } from 'react';\\\\nimport { BaseAxisProps, AxisInterval } from '../util/types';\\\\ninterface XAxisProps extends BaseAxisProps {\\\\n    xAxisId?: string | number;\\\\n    width?: number;\\\\n    height?: number;\\\\n    mirror?: boolean;\\\\n    orientation?: 'top' | 'bottom';\\\\n    ticks?: (string | number)[];\\\\n    padding?: {\\\\n        left?: number;\\\\n        right?: number;\\\\n    } | 'gap' | 'no-gap';\\\\n    minTickGap?: number;\\\\n    interval?: AxisInterval;\\\\n    reversed?: boolean;\\\\n    angle?: number;\\\\n    tickMargin?: number;\\\\n}\\\\nexport type Props = Omit<SVGProps<SVGElement>, 'scale'> & XAxisProps;\\\\nexport declare const XAxis: FunctionComponent<Props>;\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/cartesian/YAxis.d.ts snapshot 1`] = `"\\"import type { FunctionComponent, SVGProps } from 'react';\\\\nimport { BaseAxisProps, AxisInterval } from '../util/types';\\\\ninterface YAxisProps extends BaseAxisProps {\\\\n    yAxisId?: string | number;\\\\n    ticks?: (string | number)[];\\\\n    width?: number;\\\\n    height?: number;\\\\n    mirror?: boolean;\\\\n    orientation?: 'left' | 'right';\\\\n    padding?: {\\\\n        top?: number;\\\\n        bottom?: number;\\\\n    };\\\\n    minTickGap?: number;\\\\n    interval?: AxisInterval;\\\\n    reversed?: boolean;\\\\n    tickMargin?: number;\\\\n}\\\\nexport type Props = Omit<SVGProps<SVGElement>, 'scale'> & YAxisProps;\\\\nexport declare const YAxis: FunctionComponent<Props>;\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/cartesian/ZAxis.d.ts snapshot 1`] = `"\\"import type { FunctionComponent } from 'react';\\\\nimport { ScaleType, DataKey, AxisDomain } from '../util/types';\\\\nexport interface Props {\\\\n    type?: 'number' | 'category';\\\\n    name?: string | number;\\\\n    unit?: string | number;\\\\n    zAxisId?: string | number;\\\\n    dataKey?: DataKey<any>;\\\\n    range?: number[];\\\\n    scale?: ScaleType | Function;\\\\n    domain?: AxisDomain;\\\\n}\\\\nexport declare const ZAxis: FunctionComponent<Props>;\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/cartesian/getEquidistantTicks.d.ts snapshot 1`] = `"\\"import { CartesianTickItem } from '../util/types';\\\\nimport { Sign } from './getTicks';\\\\nexport declare function getEquidistantTicks(sign: Sign, boundaries: {\\\\n    start: number;\\\\n    end: number;\\\\n}, getTickSize: (tick: CartesianTickItem, index: number) => number, ticks: CartesianTickItem[], minTickGap: number): CartesianTickItem[];\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/cartesian/getTicks.d.ts snapshot 1`] = `"\\"import { Props as CartesianAxisProps } from './CartesianAxis';\\\\nexport type Sign = 0 | 1 | -1;\\\\nexport declare function getTicks(props: CartesianAxisProps, fontSize?: string, letterSpacing?: string): any[];\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/chart/AccessibilityManager.d.ts snapshot 1`] = `"\\"import type { LayoutType, TickItem } from '../util/types';\\\\ninterface ContainerOffset {\\\\n    top: number;\\\\n    left: number;\\\\n}\\\\ninterface InitiableOptions {\\\\n    coordinateList?: TickItem[];\\\\n    mouseHandlerCallback?: (e: Partial<MouseEvent>) => void;\\\\n    container?: HTMLElement;\\\\n    layout?: LayoutType;\\\\n    offset?: ContainerOffset;\\\\n}\\\\nexport declare class AccessibilityManager {\\\\n    private activeIndex;\\\\n    private coordinateList;\\\\n    private mouseHandlerCallback;\\\\n    private container;\\\\n    private layout;\\\\n    private offset;\\\\n    setDetails({ coordinateList, container, layout, offset, mouseHandlerCallback, }: InitiableOptions): void;\\\\n    focus(): void;\\\\n    keyboardEvent(e: any): void;\\\\n    setIndex(newIndex: number): void;\\\\n    private spoofMouse;\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/chart/AreaChart.d.ts snapshot 1`] = `"\\"export declare const AreaChart: {\\\\n    new (props: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps): {\\\\n        readonly eventEmitterSymbol: Symbol;\\\\n        clipPathId: string;\\\\n        accessibilityManager: import(\\\\\\"./AccessibilityManager\\\\\\").AccessibilityManager;\\\\n        throttleTriggeredAfterMouseMove: import(\\\\\\"lodash\\\\\\").DebouncedFunc<(e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer) => any>;\\\\n        container?: HTMLElement;\\\\n        componentDidMount(): void;\\\\n        displayDefaultTooltip(): void;\\\\n        getSnapshotBeforeUpdate(prevProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, prevState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>): null;\\\\n        componentDidUpdate(prevProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps): void;\\\\n        componentWillUnmount(): void;\\\\n        getTooltipEventType(): import(\\\\\\"../util/types\\\\\\").TooltipEventType;\\\\n        getMouseInfo(event: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer): {\\\\n            xValue: any;\\\\n            yValue: any;\\\\n            chartX: number;\\\\n            chartY: number;\\\\n        } | {\\\\n            activeTooltipIndex: number;\\\\n            activeLabel: any;\\\\n            activePayload: any[];\\\\n            activeCoordinate: import(\\\\\\"../util/types\\\\\\").ChartCoordinate;\\\\n            chartX: number;\\\\n            chartY: number;\\\\n        };\\\\n        inRange(x: number, y: number, scale?: number): any;\\\\n        parseEventsOfWrapper(): any;\\\\n        addListener(): void;\\\\n        removeListener(): void;\\\\n        handleLegendBBoxUpdate: (box: DOMRect) => void;\\\\n        handleReceiveSyncEvent: (cId: string | number, data: import(\\\\\\"./types\\\\\\").CategoricalChartState, emitter: Symbol) => void;\\\\n        handleBrushChange: ({ startIndex, endIndex }: {\\\\n            startIndex: number;\\\\n            endIndex: number;\\\\n        }) => void;\\\\n        handleMouseEnter: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>) => void;\\\\n        triggeredAfterMouseMove: (e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer) => any;\\\\n        handleItemMouseEnter: (el: any) => void;\\\\n        handleItemMouseLeave: () => void;\\\\n        handleMouseMove: (e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer & Partial<Omit<import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>, keyof import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer>>) => void;\\\\n        handleMouseLeave: (e: any) => void;\\\\n        handleOuterEvent: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleClick: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>) => void;\\\\n        handleMouseDown: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").Touch) => void;\\\\n        handleMouseUp: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").Touch) => void;\\\\n        handleTouchMove: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleTouchStart: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleTouchEnd: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        triggerSyncEvent: (data: import(\\\\\\"./types\\\\\\").CategoricalChartState) => void;\\\\n        applySyncEvent: (data: import(\\\\\\"./types\\\\\\").CategoricalChartState) => void;\\\\n        filterFormatItem(item: any, displayName: any, childIndex: any): any;\\\\n        renderCursor: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        renderPolarAxis: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n            className: any;\\\\n            key: any;\\\\n            ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n            type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n            dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n            hide?: boolean;\\\\n            scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n            tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n            tickCount?: number;\\\\n            axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n            tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n            tickSize?: number;\\\\n            tickFormatter?: (value: any, index: number) => string;\\\\n            allowDataOverflow?: boolean;\\\\n            allowDuplicatedCategory?: boolean;\\\\n            allowDecimals?: boolean;\\\\n            domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n            includeHidden?: boolean;\\\\n            name?: string;\\\\n            unit?: string | number;\\\\n            axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n            range?: number[];\\\\n            AxisComp?: any;\\\\n            label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        }, HTMLElement>;\\\\n        renderPolarGrid: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderLegend: () => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderTooltip: () => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderBrush: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderReferenceElement: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderActivePoints: ({ item, activePoint, basePoint, childIndex, isRange }: any) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>[];\\\\n        renderGraphicChild: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n        renderCustomized: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderClipPath(): import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        getXScales(): {\\\\n            [x: string]: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        };\\\\n        getYScales(): {\\\\n            [x: string]: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        };\\\\n        getXScaleByAxisId(axisId: string): Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        getYScaleByAxisId(axisId: string): Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        getItemByXY(chartXY: {\\\\n            x: number;\\\\n            y: number;\\\\n        }): {\\\\n            graphicalItem: any;\\\\n            payload: any;\\\\n        };\\\\n        renderMap: {\\\\n            CartesianGrid: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            ReferenceArea: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            ReferenceLine: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            ReferenceDot: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            XAxis: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            YAxis: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            Brush: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            Bar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Line: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Area: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Radar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            RadialBar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Scatter: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Pie: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Funnel: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Tooltip: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").JSX.Element;\\\\n                once: boolean;\\\\n            };\\\\n            PolarGrid: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            PolarAngleAxis: {\\\\n                handler: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n                    className: any;\\\\n                    key: any;\\\\n                    ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n                    type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n                    dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n                    hide?: boolean;\\\\n                    scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n                    tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n                    tickCount?: number;\\\\n                    axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n                    tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n                    tickSize?: number;\\\\n                    tickFormatter?: (value: any, index: number) => string;\\\\n                    allowDataOverflow?: boolean;\\\\n                    allowDuplicatedCategory?: boolean;\\\\n                    allowDecimals?: boolean;\\\\n                    domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n                    includeHidden?: boolean;\\\\n                    name?: string;\\\\n                    unit?: string | number;\\\\n                    axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n                    range?: number[];\\\\n                    AxisComp?: any;\\\\n                    label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                }, HTMLElement>;\\\\n            };\\\\n            PolarRadiusAxis: {\\\\n                handler: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n                    className: any;\\\\n                    key: any;\\\\n                    ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n                    type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n                    dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n                    hide?: boolean;\\\\n                    scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n                    tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n                    tickCount?: number;\\\\n                    axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n                    tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n                    tickSize?: number;\\\\n                    tickFormatter?: (value: any, index: number) => string;\\\\n                    allowDataOverflow?: boolean;\\\\n                    allowDuplicatedCategory?: boolean;\\\\n                    allowDecimals?: boolean;\\\\n                    domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n                    includeHidden?: boolean;\\\\n                    name?: string;\\\\n                    unit?: string | number;\\\\n                    axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n                    range?: number[];\\\\n                    AxisComp?: any;\\\\n                    label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                }, HTMLElement>;\\\\n            };\\\\n            Customized: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n        };\\\\n        render(): import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        context: any;\\\\n        setState<K extends keyof import(\\\\\\"./types\\\\\\").CategoricalChartState>(state: import(\\\\\\"./types\\\\\\").CategoricalChartState | ((prevState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, props: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>) => import(\\\\\\"./types\\\\\\").CategoricalChartState | Pick<import(\\\\\\"./types\\\\\\").CategoricalChartState, K>) | Pick<import(\\\\\\"./types\\\\\\").CategoricalChartState, K>, callback?: () => void): void;\\\\n        forceUpdate(callback?: () => void): void;\\\\n        readonly props: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps> & Readonly<{\\\\n            children?: import(\\\\\\"react\\\\\\").ReactNode;\\\\n        }>;\\\\n        state: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>;\\\\n        refs: {\\\\n            [key: string]: import(\\\\\\"react\\\\\\").ReactInstance;\\\\n        };\\\\n        shouldComponentUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): boolean;\\\\n        componentDidCatch?(error: Error, errorInfo: import(\\\\\\"react\\\\\\").ErrorInfo): void;\\\\n        componentWillMount?(): void;\\\\n        UNSAFE_componentWillMount?(): void;\\\\n        componentWillReceiveProps?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextContext: any): void;\\\\n        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextContext: any): void;\\\\n        componentWillUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): void;\\\\n        UNSAFE_componentWillUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): void;\\\\n    };\\\\n    displayName: string;\\\\n    defaultProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps;\\\\n    getDerivedStateFromProps: (nextProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps, prevState: import(\\\\\\"./types\\\\\\").CategoricalChartState) => import(\\\\\\"./types\\\\\\").CategoricalChartState;\\\\n    renderActiveDot: (option: any, props: any) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n    contextType?: import(\\\\\\"react\\\\\\").Context<any>;\\\\n};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/chart/BarChart.d.ts snapshot 1`] = `"\\"export declare const BarChart: {\\\\n    new (props: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps): {\\\\n        readonly eventEmitterSymbol: Symbol;\\\\n        clipPathId: string;\\\\n        accessibilityManager: import(\\\\\\"./AccessibilityManager\\\\\\").AccessibilityManager;\\\\n        throttleTriggeredAfterMouseMove: import(\\\\\\"lodash\\\\\\").DebouncedFunc<(e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer) => any>;\\\\n        container?: HTMLElement;\\\\n        componentDidMount(): void;\\\\n        displayDefaultTooltip(): void;\\\\n        getSnapshotBeforeUpdate(prevProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, prevState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>): null;\\\\n        componentDidUpdate(prevProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps): void;\\\\n        componentWillUnmount(): void;\\\\n        getTooltipEventType(): import(\\\\\\"../util/types\\\\\\").TooltipEventType;\\\\n        getMouseInfo(event: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer): {\\\\n            xValue: any;\\\\n            yValue: any;\\\\n            chartX: number;\\\\n            chartY: number;\\\\n        } | {\\\\n            activeTooltipIndex: number;\\\\n            activeLabel: any;\\\\n            activePayload: any[];\\\\n            activeCoordinate: import(\\\\\\"../util/types\\\\\\").ChartCoordinate;\\\\n            chartX: number;\\\\n            chartY: number;\\\\n        };\\\\n        inRange(x: number, y: number, scale?: number): any;\\\\n        parseEventsOfWrapper(): any;\\\\n        addListener(): void;\\\\n        removeListener(): void;\\\\n        handleLegendBBoxUpdate: (box: DOMRect) => void;\\\\n        handleReceiveSyncEvent: (cId: string | number, data: import(\\\\\\"./types\\\\\\").CategoricalChartState, emitter: Symbol) => void;\\\\n        handleBrushChange: ({ startIndex, endIndex }: {\\\\n            startIndex: number;\\\\n            endIndex: number;\\\\n        }) => void;\\\\n        handleMouseEnter: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>) => void;\\\\n        triggeredAfterMouseMove: (e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer) => any;\\\\n        handleItemMouseEnter: (el: any) => void;\\\\n        handleItemMouseLeave: () => void;\\\\n        handleMouseMove: (e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer & Partial<Omit<import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>, keyof import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer>>) => void;\\\\n        handleMouseLeave: (e: any) => void;\\\\n        handleOuterEvent: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleClick: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>) => void;\\\\n        handleMouseDown: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").Touch) => void;\\\\n        handleMouseUp: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").Touch) => void;\\\\n        handleTouchMove: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleTouchStart: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleTouchEnd: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        triggerSyncEvent: (data: import(\\\\\\"./types\\\\\\").CategoricalChartState) => void;\\\\n        applySyncEvent: (data: import(\\\\\\"./types\\\\\\").CategoricalChartState) => void;\\\\n        filterFormatItem(item: any, displayName: any, childIndex: any): any;\\\\n        renderCursor: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        renderPolarAxis: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n            className: any;\\\\n            key: any;\\\\n            ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n            type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n            dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n            hide?: boolean;\\\\n            scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n            tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n            tickCount?: number;\\\\n            axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n            tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n            tickSize?: number;\\\\n            tickFormatter?: (value: any, index: number) => string;\\\\n            allowDataOverflow?: boolean;\\\\n            allowDuplicatedCategory?: boolean;\\\\n            allowDecimals?: boolean;\\\\n            domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n            includeHidden?: boolean;\\\\n            name?: string;\\\\n            unit?: string | number;\\\\n            axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n            range?: number[];\\\\n            AxisComp?: any;\\\\n            label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        }, HTMLElement>;\\\\n        renderPolarGrid: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderLegend: () => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderTooltip: () => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderBrush: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderReferenceElement: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderActivePoints: ({ item, activePoint, basePoint, childIndex, isRange }: any) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>[];\\\\n        renderGraphicChild: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n        renderCustomized: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderClipPath(): import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        getXScales(): {\\\\n            [x: string]: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        };\\\\n        getYScales(): {\\\\n            [x: string]: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        };\\\\n        getXScaleByAxisId(axisId: string): Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        getYScaleByAxisId(axisId: string): Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        getItemByXY(chartXY: {\\\\n            x: number;\\\\n            y: number;\\\\n        }): {\\\\n            graphicalItem: any;\\\\n            payload: any;\\\\n        };\\\\n        renderMap: {\\\\n            CartesianGrid: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            ReferenceArea: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            ReferenceLine: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            ReferenceDot: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            XAxis: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            YAxis: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            Brush: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            Bar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Line: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Area: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Radar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            RadialBar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Scatter: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Pie: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Funnel: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Tooltip: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").JSX.Element;\\\\n                once: boolean;\\\\n            };\\\\n            PolarGrid: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            PolarAngleAxis: {\\\\n                handler: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n                    className: any;\\\\n                    key: any;\\\\n                    ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n                    type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n                    dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n                    hide?: boolean;\\\\n                    scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n                    tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n                    tickCount?: number;\\\\n                    axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n                    tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n                    tickSize?: number;\\\\n                    tickFormatter?: (value: any, index: number) => string;\\\\n                    allowDataOverflow?: boolean;\\\\n                    allowDuplicatedCategory?: boolean;\\\\n                    allowDecimals?: boolean;\\\\n                    domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n                    includeHidden?: boolean;\\\\n                    name?: string;\\\\n                    unit?: string | number;\\\\n                    axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n                    range?: number[];\\\\n                    AxisComp?: any;\\\\n                    label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                }, HTMLElement>;\\\\n            };\\\\n            PolarRadiusAxis: {\\\\n                handler: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n                    className: any;\\\\n                    key: any;\\\\n                    ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n                    type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n                    dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n                    hide?: boolean;\\\\n                    scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n                    tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n                    tickCount?: number;\\\\n                    axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n                    tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n                    tickSize?: number;\\\\n                    tickFormatter?: (value: any, index: number) => string;\\\\n                    allowDataOverflow?: boolean;\\\\n                    allowDuplicatedCategory?: boolean;\\\\n                    allowDecimals?: boolean;\\\\n                    domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n                    includeHidden?: boolean;\\\\n                    name?: string;\\\\n                    unit?: string | number;\\\\n                    axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n                    range?: number[];\\\\n                    AxisComp?: any;\\\\n                    label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                }, HTMLElement>;\\\\n            };\\\\n            Customized: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n        };\\\\n        render(): import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        context: any;\\\\n        setState<K extends keyof import(\\\\\\"./types\\\\\\").CategoricalChartState>(state: import(\\\\\\"./types\\\\\\").CategoricalChartState | ((prevState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, props: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>) => import(\\\\\\"./types\\\\\\").CategoricalChartState | Pick<import(\\\\\\"./types\\\\\\").CategoricalChartState, K>) | Pick<import(\\\\\\"./types\\\\\\").CategoricalChartState, K>, callback?: () => void): void;\\\\n        forceUpdate(callback?: () => void): void;\\\\n        readonly props: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps> & Readonly<{\\\\n            children?: import(\\\\\\"react\\\\\\").ReactNode;\\\\n        }>;\\\\n        state: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>;\\\\n        refs: {\\\\n            [key: string]: import(\\\\\\"react\\\\\\").ReactInstance;\\\\n        };\\\\n        shouldComponentUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): boolean;\\\\n        componentDidCatch?(error: Error, errorInfo: import(\\\\\\"react\\\\\\").ErrorInfo): void;\\\\n        componentWillMount?(): void;\\\\n        UNSAFE_componentWillMount?(): void;\\\\n        componentWillReceiveProps?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextContext: any): void;\\\\n        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextContext: any): void;\\\\n        componentWillUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): void;\\\\n        UNSAFE_componentWillUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): void;\\\\n    };\\\\n    displayName: string;\\\\n    defaultProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps;\\\\n    getDerivedStateFromProps: (nextProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps, prevState: import(\\\\\\"./types\\\\\\").CategoricalChartState) => import(\\\\\\"./types\\\\\\").CategoricalChartState;\\\\n    renderActiveDot: (option: any, props: any) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n    contextType?: import(\\\\\\"react\\\\\\").Context<any>;\\\\n};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/chart/ComposedChart.d.ts snapshot 1`] = `"\\"export declare const ComposedChart: {\\\\n    new (props: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps): {\\\\n        readonly eventEmitterSymbol: Symbol;\\\\n        clipPathId: string;\\\\n        accessibilityManager: import(\\\\\\"./AccessibilityManager\\\\\\").AccessibilityManager;\\\\n        throttleTriggeredAfterMouseMove: import(\\\\\\"lodash\\\\\\").DebouncedFunc<(e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer) => any>;\\\\n        container?: HTMLElement;\\\\n        componentDidMount(): void;\\\\n        displayDefaultTooltip(): void;\\\\n        getSnapshotBeforeUpdate(prevProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, prevState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>): null;\\\\n        componentDidUpdate(prevProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps): void;\\\\n        componentWillUnmount(): void;\\\\n        getTooltipEventType(): import(\\\\\\"../util/types\\\\\\").TooltipEventType;\\\\n        getMouseInfo(event: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer): {\\\\n            xValue: any;\\\\n            yValue: any;\\\\n            chartX: number;\\\\n            chartY: number;\\\\n        } | {\\\\n            activeTooltipIndex: number;\\\\n            activeLabel: any;\\\\n            activePayload: any[];\\\\n            activeCoordinate: import(\\\\\\"../util/types\\\\\\").ChartCoordinate;\\\\n            chartX: number;\\\\n            chartY: number;\\\\n        };\\\\n        inRange(x: number, y: number, scale?: number): any;\\\\n        parseEventsOfWrapper(): any;\\\\n        addListener(): void;\\\\n        removeListener(): void;\\\\n        handleLegendBBoxUpdate: (box: DOMRect) => void;\\\\n        handleReceiveSyncEvent: (cId: string | number, data: import(\\\\\\"./types\\\\\\").CategoricalChartState, emitter: Symbol) => void;\\\\n        handleBrushChange: ({ startIndex, endIndex }: {\\\\n            startIndex: number;\\\\n            endIndex: number;\\\\n        }) => void;\\\\n        handleMouseEnter: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>) => void;\\\\n        triggeredAfterMouseMove: (e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer) => any;\\\\n        handleItemMouseEnter: (el: any) => void;\\\\n        handleItemMouseLeave: () => void;\\\\n        handleMouseMove: (e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer & Partial<Omit<import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>, keyof import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer>>) => void;\\\\n        handleMouseLeave: (e: any) => void;\\\\n        handleOuterEvent: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleClick: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>) => void;\\\\n        handleMouseDown: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").Touch) => void;\\\\n        handleMouseUp: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").Touch) => void;\\\\n        handleTouchMove: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleTouchStart: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleTouchEnd: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        triggerSyncEvent: (data: import(\\\\\\"./types\\\\\\").CategoricalChartState) => void;\\\\n        applySyncEvent: (data: import(\\\\\\"./types\\\\\\").CategoricalChartState) => void;\\\\n        filterFormatItem(item: any, displayName: any, childIndex: any): any;\\\\n        renderCursor: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        renderPolarAxis: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n            className: any;\\\\n            key: any;\\\\n            ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n            type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n            dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n            hide?: boolean;\\\\n            scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n            tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n            tickCount?: number;\\\\n            axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n            tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n            tickSize?: number;\\\\n            tickFormatter?: (value: any, index: number) => string;\\\\n            allowDataOverflow?: boolean;\\\\n            allowDuplicatedCategory?: boolean;\\\\n            allowDecimals?: boolean;\\\\n            domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n            includeHidden?: boolean;\\\\n            name?: string;\\\\n            unit?: string | number;\\\\n            axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n            range?: number[];\\\\n            AxisComp?: any;\\\\n            label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        }, HTMLElement>;\\\\n        renderPolarGrid: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderLegend: () => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderTooltip: () => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderBrush: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderReferenceElement: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderActivePoints: ({ item, activePoint, basePoint, childIndex, isRange }: any) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>[];\\\\n        renderGraphicChild: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n        renderCustomized: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderClipPath(): import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        getXScales(): {\\\\n            [x: string]: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        };\\\\n        getYScales(): {\\\\n            [x: string]: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        };\\\\n        getXScaleByAxisId(axisId: string): Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        getYScaleByAxisId(axisId: string): Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        getItemByXY(chartXY: {\\\\n            x: number;\\\\n            y: number;\\\\n        }): {\\\\n            graphicalItem: any;\\\\n            payload: any;\\\\n        };\\\\n        renderMap: {\\\\n            CartesianGrid: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            ReferenceArea: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            ReferenceLine: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            ReferenceDot: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            XAxis: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            YAxis: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            Brush: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            Bar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Line: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Area: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Radar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            RadialBar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Scatter: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Pie: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Funnel: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Tooltip: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").JSX.Element;\\\\n                once: boolean;\\\\n            };\\\\n            PolarGrid: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            PolarAngleAxis: {\\\\n                handler: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n                    className: any;\\\\n                    key: any;\\\\n                    ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n                    type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n                    dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n                    hide?: boolean;\\\\n                    scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n                    tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n                    tickCount?: number;\\\\n                    axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n                    tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n                    tickSize?: number;\\\\n                    tickFormatter?: (value: any, index: number) => string;\\\\n                    allowDataOverflow?: boolean;\\\\n                    allowDuplicatedCategory?: boolean;\\\\n                    allowDecimals?: boolean;\\\\n                    domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n                    includeHidden?: boolean;\\\\n                    name?: string;\\\\n                    unit?: string | number;\\\\n                    axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n                    range?: number[];\\\\n                    AxisComp?: any;\\\\n                    label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                }, HTMLElement>;\\\\n            };\\\\n            PolarRadiusAxis: {\\\\n                handler: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n                    className: any;\\\\n                    key: any;\\\\n                    ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n                    type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n                    dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n                    hide?: boolean;\\\\n                    scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n                    tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n                    tickCount?: number;\\\\n                    axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n                    tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n                    tickSize?: number;\\\\n                    tickFormatter?: (value: any, index: number) => string;\\\\n                    allowDataOverflow?: boolean;\\\\n                    allowDuplicatedCategory?: boolean;\\\\n                    allowDecimals?: boolean;\\\\n                    domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n                    includeHidden?: boolean;\\\\n                    name?: string;\\\\n                    unit?: string | number;\\\\n                    axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n                    range?: number[];\\\\n                    AxisComp?: any;\\\\n                    label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                }, HTMLElement>;\\\\n            };\\\\n            Customized: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n        };\\\\n        render(): import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        context: any;\\\\n        setState<K extends keyof import(\\\\\\"./types\\\\\\").CategoricalChartState>(state: import(\\\\\\"./types\\\\\\").CategoricalChartState | ((prevState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, props: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>) => import(\\\\\\"./types\\\\\\").CategoricalChartState | Pick<import(\\\\\\"./types\\\\\\").CategoricalChartState, K>) | Pick<import(\\\\\\"./types\\\\\\").CategoricalChartState, K>, callback?: () => void): void;\\\\n        forceUpdate(callback?: () => void): void;\\\\n        readonly props: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps> & Readonly<{\\\\n            children?: import(\\\\\\"react\\\\\\").ReactNode;\\\\n        }>;\\\\n        state: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>;\\\\n        refs: {\\\\n            [key: string]: import(\\\\\\"react\\\\\\").ReactInstance;\\\\n        };\\\\n        shouldComponentUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): boolean;\\\\n        componentDidCatch?(error: Error, errorInfo: import(\\\\\\"react\\\\\\").ErrorInfo): void;\\\\n        componentWillMount?(): void;\\\\n        UNSAFE_componentWillMount?(): void;\\\\n        componentWillReceiveProps?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextContext: any): void;\\\\n        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextContext: any): void;\\\\n        componentWillUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): void;\\\\n        UNSAFE_componentWillUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): void;\\\\n    };\\\\n    displayName: string;\\\\n    defaultProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps;\\\\n    getDerivedStateFromProps: (nextProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps, prevState: import(\\\\\\"./types\\\\\\").CategoricalChartState) => import(\\\\\\"./types\\\\\\").CategoricalChartState;\\\\n    renderActiveDot: (option: any, props: any) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n    contextType?: import(\\\\\\"react\\\\\\").Context<any>;\\\\n};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/chart/FunnelChart.d.ts snapshot 1`] = `"\\"export declare const FunnelChart: {\\\\n    new (props: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps): {\\\\n        readonly eventEmitterSymbol: Symbol;\\\\n        clipPathId: string;\\\\n        accessibilityManager: import(\\\\\\"./AccessibilityManager\\\\\\").AccessibilityManager;\\\\n        throttleTriggeredAfterMouseMove: import(\\\\\\"lodash\\\\\\").DebouncedFunc<(e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer) => any>;\\\\n        container?: HTMLElement;\\\\n        componentDidMount(): void;\\\\n        displayDefaultTooltip(): void;\\\\n        getSnapshotBeforeUpdate(prevProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, prevState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>): null;\\\\n        componentDidUpdate(prevProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps): void;\\\\n        componentWillUnmount(): void;\\\\n        getTooltipEventType(): import(\\\\\\"../util/types\\\\\\").TooltipEventType;\\\\n        getMouseInfo(event: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer): {\\\\n            xValue: any;\\\\n            yValue: any;\\\\n            chartX: number;\\\\n            chartY: number;\\\\n        } | {\\\\n            activeTooltipIndex: number;\\\\n            activeLabel: any;\\\\n            activePayload: any[];\\\\n            activeCoordinate: import(\\\\\\"../util/types\\\\\\").ChartCoordinate;\\\\n            chartX: number;\\\\n            chartY: number;\\\\n        };\\\\n        inRange(x: number, y: number, scale?: number): any;\\\\n        parseEventsOfWrapper(): any;\\\\n        addListener(): void;\\\\n        removeListener(): void;\\\\n        handleLegendBBoxUpdate: (box: DOMRect) => void;\\\\n        handleReceiveSyncEvent: (cId: string | number, data: import(\\\\\\"./types\\\\\\").CategoricalChartState, emitter: Symbol) => void;\\\\n        handleBrushChange: ({ startIndex, endIndex }: {\\\\n            startIndex: number;\\\\n            endIndex: number;\\\\n        }) => void;\\\\n        handleMouseEnter: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>) => void;\\\\n        triggeredAfterMouseMove: (e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer) => any;\\\\n        handleItemMouseEnter: (el: any) => void;\\\\n        handleItemMouseLeave: () => void;\\\\n        handleMouseMove: (e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer & Partial<Omit<import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>, keyof import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer>>) => void;\\\\n        handleMouseLeave: (e: any) => void;\\\\n        handleOuterEvent: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleClick: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>) => void;\\\\n        handleMouseDown: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").Touch) => void;\\\\n        handleMouseUp: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").Touch) => void;\\\\n        handleTouchMove: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleTouchStart: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleTouchEnd: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        triggerSyncEvent: (data: import(\\\\\\"./types\\\\\\").CategoricalChartState) => void;\\\\n        applySyncEvent: (data: import(\\\\\\"./types\\\\\\").CategoricalChartState) => void;\\\\n        filterFormatItem(item: any, displayName: any, childIndex: any): any;\\\\n        renderCursor: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        renderPolarAxis: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n            className: any;\\\\n            key: any;\\\\n            ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n            type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n            dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n            hide?: boolean;\\\\n            scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n            tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n            tickCount?: number;\\\\n            axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n            tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n            tickSize?: number;\\\\n            tickFormatter?: (value: any, index: number) => string;\\\\n            allowDataOverflow?: boolean;\\\\n            allowDuplicatedCategory?: boolean;\\\\n            allowDecimals?: boolean;\\\\n            domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n            includeHidden?: boolean;\\\\n            name?: string;\\\\n            unit?: string | number;\\\\n            axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n            range?: number[];\\\\n            AxisComp?: any;\\\\n            label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        }, HTMLElement>;\\\\n        renderPolarGrid: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderLegend: () => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderTooltip: () => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderBrush: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderReferenceElement: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderActivePoints: ({ item, activePoint, basePoint, childIndex, isRange }: any) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>[];\\\\n        renderGraphicChild: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n        renderCustomized: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderClipPath(): import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        getXScales(): {\\\\n            [x: string]: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        };\\\\n        getYScales(): {\\\\n            [x: string]: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        };\\\\n        getXScaleByAxisId(axisId: string): Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        getYScaleByAxisId(axisId: string): Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        getItemByXY(chartXY: {\\\\n            x: number;\\\\n            y: number;\\\\n        }): {\\\\n            graphicalItem: any;\\\\n            payload: any;\\\\n        };\\\\n        renderMap: {\\\\n            CartesianGrid: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            ReferenceArea: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            ReferenceLine: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            ReferenceDot: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            XAxis: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            YAxis: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            Brush: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            Bar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Line: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Area: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Radar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            RadialBar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Scatter: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Pie: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Funnel: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Tooltip: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").JSX.Element;\\\\n                once: boolean;\\\\n            };\\\\n            PolarGrid: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            PolarAngleAxis: {\\\\n                handler: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n                    className: any;\\\\n                    key: any;\\\\n                    ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n                    type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n                    dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n                    hide?: boolean;\\\\n                    scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n                    tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n                    tickCount?: number;\\\\n                    axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n                    tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n                    tickSize?: number;\\\\n                    tickFormatter?: (value: any, index: number) => string;\\\\n                    allowDataOverflow?: boolean;\\\\n                    allowDuplicatedCategory?: boolean;\\\\n                    allowDecimals?: boolean;\\\\n                    domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n                    includeHidden?: boolean;\\\\n                    name?: string;\\\\n                    unit?: string | number;\\\\n                    axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n                    range?: number[];\\\\n                    AxisComp?: any;\\\\n                    label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                }, HTMLElement>;\\\\n            };\\\\n            PolarRadiusAxis: {\\\\n                handler: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n                    className: any;\\\\n                    key: any;\\\\n                    ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n                    type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n                    dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n                    hide?: boolean;\\\\n                    scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n                    tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n                    tickCount?: number;\\\\n                    axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n                    tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n                    tickSize?: number;\\\\n                    tickFormatter?: (value: any, index: number) => string;\\\\n                    allowDataOverflow?: boolean;\\\\n                    allowDuplicatedCategory?: boolean;\\\\n                    allowDecimals?: boolean;\\\\n                    domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n                    includeHidden?: boolean;\\\\n                    name?: string;\\\\n                    unit?: string | number;\\\\n                    axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n                    range?: number[];\\\\n                    AxisComp?: any;\\\\n                    label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                }, HTMLElement>;\\\\n            };\\\\n            Customized: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n        };\\\\n        render(): import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        context: any;\\\\n        setState<K extends keyof import(\\\\\\"./types\\\\\\").CategoricalChartState>(state: import(\\\\\\"./types\\\\\\").CategoricalChartState | ((prevState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, props: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>) => import(\\\\\\"./types\\\\\\").CategoricalChartState | Pick<import(\\\\\\"./types\\\\\\").CategoricalChartState, K>) | Pick<import(\\\\\\"./types\\\\\\").CategoricalChartState, K>, callback?: () => void): void;\\\\n        forceUpdate(callback?: () => void): void;\\\\n        readonly props: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps> & Readonly<{\\\\n            children?: import(\\\\\\"react\\\\\\").ReactNode;\\\\n        }>;\\\\n        state: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>;\\\\n        refs: {\\\\n            [key: string]: import(\\\\\\"react\\\\\\").ReactInstance;\\\\n        };\\\\n        shouldComponentUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): boolean;\\\\n        componentDidCatch?(error: Error, errorInfo: import(\\\\\\"react\\\\\\").ErrorInfo): void;\\\\n        componentWillMount?(): void;\\\\n        UNSAFE_componentWillMount?(): void;\\\\n        componentWillReceiveProps?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextContext: any): void;\\\\n        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextContext: any): void;\\\\n        componentWillUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): void;\\\\n        UNSAFE_componentWillUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): void;\\\\n    };\\\\n    displayName: string;\\\\n    defaultProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps;\\\\n    getDerivedStateFromProps: (nextProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps, prevState: import(\\\\\\"./types\\\\\\").CategoricalChartState) => import(\\\\\\"./types\\\\\\").CategoricalChartState;\\\\n    renderActiveDot: (option: any, props: any) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n    contextType?: import(\\\\\\"react\\\\\\").Context<any>;\\\\n};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/chart/LineChart.d.ts snapshot 1`] = `"\\"export declare const LineChart: {\\\\n    new (props: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps): {\\\\n        readonly eventEmitterSymbol: Symbol;\\\\n        clipPathId: string;\\\\n        accessibilityManager: import(\\\\\\"./AccessibilityManager\\\\\\").AccessibilityManager;\\\\n        throttleTriggeredAfterMouseMove: import(\\\\\\"lodash\\\\\\").DebouncedFunc<(e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer) => any>;\\\\n        container?: HTMLElement;\\\\n        componentDidMount(): void;\\\\n        displayDefaultTooltip(): void;\\\\n        getSnapshotBeforeUpdate(prevProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, prevState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>): null;\\\\n        componentDidUpdate(prevProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps): void;\\\\n        componentWillUnmount(): void;\\\\n        getTooltipEventType(): import(\\\\\\"../util/types\\\\\\").TooltipEventType;\\\\n        getMouseInfo(event: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer): {\\\\n            xValue: any;\\\\n            yValue: any;\\\\n            chartX: number;\\\\n            chartY: number;\\\\n        } | {\\\\n            activeTooltipIndex: number;\\\\n            activeLabel: any;\\\\n            activePayload: any[];\\\\n            activeCoordinate: import(\\\\\\"../util/types\\\\\\").ChartCoordinate;\\\\n            chartX: number;\\\\n            chartY: number;\\\\n        };\\\\n        inRange(x: number, y: number, scale?: number): any;\\\\n        parseEventsOfWrapper(): any;\\\\n        addListener(): void;\\\\n        removeListener(): void;\\\\n        handleLegendBBoxUpdate: (box: DOMRect) => void;\\\\n        handleReceiveSyncEvent: (cId: string | number, data: import(\\\\\\"./types\\\\\\").CategoricalChartState, emitter: Symbol) => void;\\\\n        handleBrushChange: ({ startIndex, endIndex }: {\\\\n            startIndex: number;\\\\n            endIndex: number;\\\\n        }) => void;\\\\n        handleMouseEnter: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>) => void;\\\\n        triggeredAfterMouseMove: (e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer) => any;\\\\n        handleItemMouseEnter: (el: any) => void;\\\\n        handleItemMouseLeave: () => void;\\\\n        handleMouseMove: (e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer & Partial<Omit<import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>, keyof import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer>>) => void;\\\\n        handleMouseLeave: (e: any) => void;\\\\n        handleOuterEvent: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleClick: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>) => void;\\\\n        handleMouseDown: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").Touch) => void;\\\\n        handleMouseUp: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").Touch) => void;\\\\n        handleTouchMove: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleTouchStart: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleTouchEnd: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        triggerSyncEvent: (data: import(\\\\\\"./types\\\\\\").CategoricalChartState) => void;\\\\n        applySyncEvent: (data: import(\\\\\\"./types\\\\\\").CategoricalChartState) => void;\\\\n        filterFormatItem(item: any, displayName: any, childIndex: any): any;\\\\n        renderCursor: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        renderPolarAxis: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n            className: any;\\\\n            key: any;\\\\n            ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n            type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n            dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n            hide?: boolean;\\\\n            scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n            tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n            tickCount?: number;\\\\n            axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n            tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n            tickSize?: number;\\\\n            tickFormatter?: (value: any, index: number) => string;\\\\n            allowDataOverflow?: boolean;\\\\n            allowDuplicatedCategory?: boolean;\\\\n            allowDecimals?: boolean;\\\\n            domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n            includeHidden?: boolean;\\\\n            name?: string;\\\\n            unit?: string | number;\\\\n            axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n            range?: number[];\\\\n            AxisComp?: any;\\\\n            label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        }, HTMLElement>;\\\\n        renderPolarGrid: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderLegend: () => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderTooltip: () => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderBrush: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderReferenceElement: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderActivePoints: ({ item, activePoint, basePoint, childIndex, isRange }: any) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>[];\\\\n        renderGraphicChild: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n        renderCustomized: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderClipPath(): import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        getXScales(): {\\\\n            [x: string]: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        };\\\\n        getYScales(): {\\\\n            [x: string]: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        };\\\\n        getXScaleByAxisId(axisId: string): Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        getYScaleByAxisId(axisId: string): Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        getItemByXY(chartXY: {\\\\n            x: number;\\\\n            y: number;\\\\n        }): {\\\\n            graphicalItem: any;\\\\n            payload: any;\\\\n        };\\\\n        renderMap: {\\\\n            CartesianGrid: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            ReferenceArea: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            ReferenceLine: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            ReferenceDot: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            XAxis: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            YAxis: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            Brush: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            Bar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Line: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Area: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Radar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            RadialBar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Scatter: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Pie: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Funnel: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Tooltip: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").JSX.Element;\\\\n                once: boolean;\\\\n            };\\\\n            PolarGrid: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            PolarAngleAxis: {\\\\n                handler: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n                    className: any;\\\\n                    key: any;\\\\n                    ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n                    type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n                    dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n                    hide?: boolean;\\\\n                    scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n                    tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n                    tickCount?: number;\\\\n                    axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n                    tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n                    tickSize?: number;\\\\n                    tickFormatter?: (value: any, index: number) => string;\\\\n                    allowDataOverflow?: boolean;\\\\n                    allowDuplicatedCategory?: boolean;\\\\n                    allowDecimals?: boolean;\\\\n                    domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n                    includeHidden?: boolean;\\\\n                    name?: string;\\\\n                    unit?: string | number;\\\\n                    axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n                    range?: number[];\\\\n                    AxisComp?: any;\\\\n                    label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                }, HTMLElement>;\\\\n            };\\\\n            PolarRadiusAxis: {\\\\n                handler: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n                    className: any;\\\\n                    key: any;\\\\n                    ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n                    type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n                    dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n                    hide?: boolean;\\\\n                    scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n                    tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n                    tickCount?: number;\\\\n                    axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n                    tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n                    tickSize?: number;\\\\n                    tickFormatter?: (value: any, index: number) => string;\\\\n                    allowDataOverflow?: boolean;\\\\n                    allowDuplicatedCategory?: boolean;\\\\n                    allowDecimals?: boolean;\\\\n                    domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n                    includeHidden?: boolean;\\\\n                    name?: string;\\\\n                    unit?: string | number;\\\\n                    axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n                    range?: number[];\\\\n                    AxisComp?: any;\\\\n                    label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                }, HTMLElement>;\\\\n            };\\\\n            Customized: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n        };\\\\n        render(): import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        context: any;\\\\n        setState<K extends keyof import(\\\\\\"./types\\\\\\").CategoricalChartState>(state: import(\\\\\\"./types\\\\\\").CategoricalChartState | ((prevState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, props: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>) => import(\\\\\\"./types\\\\\\").CategoricalChartState | Pick<import(\\\\\\"./types\\\\\\").CategoricalChartState, K>) | Pick<import(\\\\\\"./types\\\\\\").CategoricalChartState, K>, callback?: () => void): void;\\\\n        forceUpdate(callback?: () => void): void;\\\\n        readonly props: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps> & Readonly<{\\\\n            children?: import(\\\\\\"react\\\\\\").ReactNode;\\\\n        }>;\\\\n        state: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>;\\\\n        refs: {\\\\n            [key: string]: import(\\\\\\"react\\\\\\").ReactInstance;\\\\n        };\\\\n        shouldComponentUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): boolean;\\\\n        componentDidCatch?(error: Error, errorInfo: import(\\\\\\"react\\\\\\").ErrorInfo): void;\\\\n        componentWillMount?(): void;\\\\n        UNSAFE_componentWillMount?(): void;\\\\n        componentWillReceiveProps?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextContext: any): void;\\\\n        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextContext: any): void;\\\\n        componentWillUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): void;\\\\n        UNSAFE_componentWillUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): void;\\\\n    };\\\\n    displayName: string;\\\\n    defaultProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps;\\\\n    getDerivedStateFromProps: (nextProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps, prevState: import(\\\\\\"./types\\\\\\").CategoricalChartState) => import(\\\\\\"./types\\\\\\").CategoricalChartState;\\\\n    renderActiveDot: (option: any, props: any) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n    contextType?: import(\\\\\\"react\\\\\\").Context<any>;\\\\n};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/chart/PieChart.d.ts snapshot 1`] = `"\\"export declare const PieChart: {\\\\n    new (props: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps): {\\\\n        readonly eventEmitterSymbol: Symbol;\\\\n        clipPathId: string;\\\\n        accessibilityManager: import(\\\\\\"./AccessibilityManager\\\\\\").AccessibilityManager;\\\\n        throttleTriggeredAfterMouseMove: import(\\\\\\"lodash\\\\\\").DebouncedFunc<(e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer) => any>;\\\\n        container?: HTMLElement;\\\\n        componentDidMount(): void;\\\\n        displayDefaultTooltip(): void;\\\\n        getSnapshotBeforeUpdate(prevProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, prevState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>): null;\\\\n        componentDidUpdate(prevProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps): void;\\\\n        componentWillUnmount(): void;\\\\n        getTooltipEventType(): import(\\\\\\"../util/types\\\\\\").TooltipEventType;\\\\n        getMouseInfo(event: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer): {\\\\n            xValue: any;\\\\n            yValue: any;\\\\n            chartX: number;\\\\n            chartY: number;\\\\n        } | {\\\\n            activeTooltipIndex: number;\\\\n            activeLabel: any;\\\\n            activePayload: any[];\\\\n            activeCoordinate: import(\\\\\\"../util/types\\\\\\").ChartCoordinate;\\\\n            chartX: number;\\\\n            chartY: number;\\\\n        };\\\\n        inRange(x: number, y: number, scale?: number): any;\\\\n        parseEventsOfWrapper(): any;\\\\n        addListener(): void;\\\\n        removeListener(): void;\\\\n        handleLegendBBoxUpdate: (box: DOMRect) => void;\\\\n        handleReceiveSyncEvent: (cId: string | number, data: import(\\\\\\"./types\\\\\\").CategoricalChartState, emitter: Symbol) => void;\\\\n        handleBrushChange: ({ startIndex, endIndex }: {\\\\n            startIndex: number;\\\\n            endIndex: number;\\\\n        }) => void;\\\\n        handleMouseEnter: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>) => void;\\\\n        triggeredAfterMouseMove: (e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer) => any;\\\\n        handleItemMouseEnter: (el: any) => void;\\\\n        handleItemMouseLeave: () => void;\\\\n        handleMouseMove: (e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer & Partial<Omit<import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>, keyof import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer>>) => void;\\\\n        handleMouseLeave: (e: any) => void;\\\\n        handleOuterEvent: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleClick: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>) => void;\\\\n        handleMouseDown: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").Touch) => void;\\\\n        handleMouseUp: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").Touch) => void;\\\\n        handleTouchMove: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleTouchStart: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleTouchEnd: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        triggerSyncEvent: (data: import(\\\\\\"./types\\\\\\").CategoricalChartState) => void;\\\\n        applySyncEvent: (data: import(\\\\\\"./types\\\\\\").CategoricalChartState) => void;\\\\n        filterFormatItem(item: any, displayName: any, childIndex: any): any;\\\\n        renderCursor: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        renderPolarAxis: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n            className: any;\\\\n            key: any;\\\\n            ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n            type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n            dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n            hide?: boolean;\\\\n            scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n            tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n            tickCount?: number;\\\\n            axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n            tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n            tickSize?: number;\\\\n            tickFormatter?: (value: any, index: number) => string;\\\\n            allowDataOverflow?: boolean;\\\\n            allowDuplicatedCategory?: boolean;\\\\n            allowDecimals?: boolean;\\\\n            domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n            includeHidden?: boolean;\\\\n            name?: string;\\\\n            unit?: string | number;\\\\n            axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n            range?: number[];\\\\n            AxisComp?: any;\\\\n            label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        }, HTMLElement>;\\\\n        renderPolarGrid: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderLegend: () => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderTooltip: () => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderBrush: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderReferenceElement: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderActivePoints: ({ item, activePoint, basePoint, childIndex, isRange }: any) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>[];\\\\n        renderGraphicChild: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n        renderCustomized: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderClipPath(): import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        getXScales(): {\\\\n            [x: string]: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        };\\\\n        getYScales(): {\\\\n            [x: string]: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        };\\\\n        getXScaleByAxisId(axisId: string): Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        getYScaleByAxisId(axisId: string): Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        getItemByXY(chartXY: {\\\\n            x: number;\\\\n            y: number;\\\\n        }): {\\\\n            graphicalItem: any;\\\\n            payload: any;\\\\n        };\\\\n        renderMap: {\\\\n            CartesianGrid: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            ReferenceArea: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            ReferenceLine: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            ReferenceDot: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            XAxis: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            YAxis: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            Brush: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            Bar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Line: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Area: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Radar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            RadialBar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Scatter: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Pie: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Funnel: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Tooltip: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").JSX.Element;\\\\n                once: boolean;\\\\n            };\\\\n            PolarGrid: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            PolarAngleAxis: {\\\\n                handler: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n                    className: any;\\\\n                    key: any;\\\\n                    ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n                    type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n                    dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n                    hide?: boolean;\\\\n                    scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n                    tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n                    tickCount?: number;\\\\n                    axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n                    tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n                    tickSize?: number;\\\\n                    tickFormatter?: (value: any, index: number) => string;\\\\n                    allowDataOverflow?: boolean;\\\\n                    allowDuplicatedCategory?: boolean;\\\\n                    allowDecimals?: boolean;\\\\n                    domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n                    includeHidden?: boolean;\\\\n                    name?: string;\\\\n                    unit?: string | number;\\\\n                    axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n                    range?: number[];\\\\n                    AxisComp?: any;\\\\n                    label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                }, HTMLElement>;\\\\n            };\\\\n            PolarRadiusAxis: {\\\\n                handler: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n                    className: any;\\\\n                    key: any;\\\\n                    ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n                    type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n                    dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n                    hide?: boolean;\\\\n                    scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n                    tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n                    tickCount?: number;\\\\n                    axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n                    tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n                    tickSize?: number;\\\\n                    tickFormatter?: (value: any, index: number) => string;\\\\n                    allowDataOverflow?: boolean;\\\\n                    allowDuplicatedCategory?: boolean;\\\\n                    allowDecimals?: boolean;\\\\n                    domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n                    includeHidden?: boolean;\\\\n                    name?: string;\\\\n                    unit?: string | number;\\\\n                    axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n                    range?: number[];\\\\n                    AxisComp?: any;\\\\n                    label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                }, HTMLElement>;\\\\n            };\\\\n            Customized: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n        };\\\\n        render(): import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        context: any;\\\\n        setState<K extends keyof import(\\\\\\"./types\\\\\\").CategoricalChartState>(state: import(\\\\\\"./types\\\\\\").CategoricalChartState | ((prevState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, props: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>) => import(\\\\\\"./types\\\\\\").CategoricalChartState | Pick<import(\\\\\\"./types\\\\\\").CategoricalChartState, K>) | Pick<import(\\\\\\"./types\\\\\\").CategoricalChartState, K>, callback?: () => void): void;\\\\n        forceUpdate(callback?: () => void): void;\\\\n        readonly props: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps> & Readonly<{\\\\n            children?: import(\\\\\\"react\\\\\\").ReactNode;\\\\n        }>;\\\\n        state: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>;\\\\n        refs: {\\\\n            [key: string]: import(\\\\\\"react\\\\\\").ReactInstance;\\\\n        };\\\\n        shouldComponentUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): boolean;\\\\n        componentDidCatch?(error: Error, errorInfo: import(\\\\\\"react\\\\\\").ErrorInfo): void;\\\\n        componentWillMount?(): void;\\\\n        UNSAFE_componentWillMount?(): void;\\\\n        componentWillReceiveProps?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextContext: any): void;\\\\n        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextContext: any): void;\\\\n        componentWillUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): void;\\\\n        UNSAFE_componentWillUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): void;\\\\n    };\\\\n    displayName: string;\\\\n    defaultProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps;\\\\n    getDerivedStateFromProps: (nextProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps, prevState: import(\\\\\\"./types\\\\\\").CategoricalChartState) => import(\\\\\\"./types\\\\\\").CategoricalChartState;\\\\n    renderActiveDot: (option: any, props: any) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n    contextType?: import(\\\\\\"react\\\\\\").Context<any>;\\\\n};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/chart/RadarChart.d.ts snapshot 1`] = `"\\"export declare const RadarChart: {\\\\n    new (props: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps): {\\\\n        readonly eventEmitterSymbol: Symbol;\\\\n        clipPathId: string;\\\\n        accessibilityManager: import(\\\\\\"./AccessibilityManager\\\\\\").AccessibilityManager;\\\\n        throttleTriggeredAfterMouseMove: import(\\\\\\"lodash\\\\\\").DebouncedFunc<(e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer) => any>;\\\\n        container?: HTMLElement;\\\\n        componentDidMount(): void;\\\\n        displayDefaultTooltip(): void;\\\\n        getSnapshotBeforeUpdate(prevProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, prevState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>): null;\\\\n        componentDidUpdate(prevProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps): void;\\\\n        componentWillUnmount(): void;\\\\n        getTooltipEventType(): import(\\\\\\"../util/types\\\\\\").TooltipEventType;\\\\n        getMouseInfo(event: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer): {\\\\n            xValue: any;\\\\n            yValue: any;\\\\n            chartX: number;\\\\n            chartY: number;\\\\n        } | {\\\\n            activeTooltipIndex: number;\\\\n            activeLabel: any;\\\\n            activePayload: any[];\\\\n            activeCoordinate: import(\\\\\\"../util/types\\\\\\").ChartCoordinate;\\\\n            chartX: number;\\\\n            chartY: number;\\\\n        };\\\\n        inRange(x: number, y: number, scale?: number): any;\\\\n        parseEventsOfWrapper(): any;\\\\n        addListener(): void;\\\\n        removeListener(): void;\\\\n        handleLegendBBoxUpdate: (box: DOMRect) => void;\\\\n        handleReceiveSyncEvent: (cId: string | number, data: import(\\\\\\"./types\\\\\\").CategoricalChartState, emitter: Symbol) => void;\\\\n        handleBrushChange: ({ startIndex, endIndex }: {\\\\n            startIndex: number;\\\\n            endIndex: number;\\\\n        }) => void;\\\\n        handleMouseEnter: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>) => void;\\\\n        triggeredAfterMouseMove: (e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer) => any;\\\\n        handleItemMouseEnter: (el: any) => void;\\\\n        handleItemMouseLeave: () => void;\\\\n        handleMouseMove: (e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer & Partial<Omit<import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>, keyof import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer>>) => void;\\\\n        handleMouseLeave: (e: any) => void;\\\\n        handleOuterEvent: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleClick: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>) => void;\\\\n        handleMouseDown: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").Touch) => void;\\\\n        handleMouseUp: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").Touch) => void;\\\\n        handleTouchMove: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleTouchStart: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleTouchEnd: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        triggerSyncEvent: (data: import(\\\\\\"./types\\\\\\").CategoricalChartState) => void;\\\\n        applySyncEvent: (data: import(\\\\\\"./types\\\\\\").CategoricalChartState) => void;\\\\n        filterFormatItem(item: any, displayName: any, childIndex: any): any;\\\\n        renderCursor: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        renderPolarAxis: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n            className: any;\\\\n            key: any;\\\\n            ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n            type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n            dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n            hide?: boolean;\\\\n            scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n            tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n            tickCount?: number;\\\\n            axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n            tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n            tickSize?: number;\\\\n            tickFormatter?: (value: any, index: number) => string;\\\\n            allowDataOverflow?: boolean;\\\\n            allowDuplicatedCategory?: boolean;\\\\n            allowDecimals?: boolean;\\\\n            domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n            includeHidden?: boolean;\\\\n            name?: string;\\\\n            unit?: string | number;\\\\n            axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n            range?: number[];\\\\n            AxisComp?: any;\\\\n            label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        }, HTMLElement>;\\\\n        renderPolarGrid: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderLegend: () => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderTooltip: () => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderBrush: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderReferenceElement: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderActivePoints: ({ item, activePoint, basePoint, childIndex, isRange }: any) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>[];\\\\n        renderGraphicChild: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n        renderCustomized: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderClipPath(): import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        getXScales(): {\\\\n            [x: string]: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        };\\\\n        getYScales(): {\\\\n            [x: string]: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        };\\\\n        getXScaleByAxisId(axisId: string): Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        getYScaleByAxisId(axisId: string): Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        getItemByXY(chartXY: {\\\\n            x: number;\\\\n            y: number;\\\\n        }): {\\\\n            graphicalItem: any;\\\\n            payload: any;\\\\n        };\\\\n        renderMap: {\\\\n            CartesianGrid: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            ReferenceArea: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            ReferenceLine: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            ReferenceDot: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            XAxis: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            YAxis: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            Brush: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            Bar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Line: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Area: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Radar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            RadialBar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Scatter: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Pie: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Funnel: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Tooltip: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").JSX.Element;\\\\n                once: boolean;\\\\n            };\\\\n            PolarGrid: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            PolarAngleAxis: {\\\\n                handler: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n                    className: any;\\\\n                    key: any;\\\\n                    ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n                    type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n                    dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n                    hide?: boolean;\\\\n                    scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n                    tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n                    tickCount?: number;\\\\n                    axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n                    tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n                    tickSize?: number;\\\\n                    tickFormatter?: (value: any, index: number) => string;\\\\n                    allowDataOverflow?: boolean;\\\\n                    allowDuplicatedCategory?: boolean;\\\\n                    allowDecimals?: boolean;\\\\n                    domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n                    includeHidden?: boolean;\\\\n                    name?: string;\\\\n                    unit?: string | number;\\\\n                    axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n                    range?: number[];\\\\n                    AxisComp?: any;\\\\n                    label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                }, HTMLElement>;\\\\n            };\\\\n            PolarRadiusAxis: {\\\\n                handler: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n                    className: any;\\\\n                    key: any;\\\\n                    ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n                    type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n                    dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n                    hide?: boolean;\\\\n                    scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n                    tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n                    tickCount?: number;\\\\n                    axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n                    tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n                    tickSize?: number;\\\\n                    tickFormatter?: (value: any, index: number) => string;\\\\n                    allowDataOverflow?: boolean;\\\\n                    allowDuplicatedCategory?: boolean;\\\\n                    allowDecimals?: boolean;\\\\n                    domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n                    includeHidden?: boolean;\\\\n                    name?: string;\\\\n                    unit?: string | number;\\\\n                    axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n                    range?: number[];\\\\n                    AxisComp?: any;\\\\n                    label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                }, HTMLElement>;\\\\n            };\\\\n            Customized: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n        };\\\\n        render(): import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        context: any;\\\\n        setState<K extends keyof import(\\\\\\"./types\\\\\\").CategoricalChartState>(state: import(\\\\\\"./types\\\\\\").CategoricalChartState | ((prevState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, props: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>) => import(\\\\\\"./types\\\\\\").CategoricalChartState | Pick<import(\\\\\\"./types\\\\\\").CategoricalChartState, K>) | Pick<import(\\\\\\"./types\\\\\\").CategoricalChartState, K>, callback?: () => void): void;\\\\n        forceUpdate(callback?: () => void): void;\\\\n        readonly props: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps> & Readonly<{\\\\n            children?: import(\\\\\\"react\\\\\\").ReactNode;\\\\n        }>;\\\\n        state: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>;\\\\n        refs: {\\\\n            [key: string]: import(\\\\\\"react\\\\\\").ReactInstance;\\\\n        };\\\\n        shouldComponentUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): boolean;\\\\n        componentDidCatch?(error: Error, errorInfo: import(\\\\\\"react\\\\\\").ErrorInfo): void;\\\\n        componentWillMount?(): void;\\\\n        UNSAFE_componentWillMount?(): void;\\\\n        componentWillReceiveProps?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextContext: any): void;\\\\n        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextContext: any): void;\\\\n        componentWillUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): void;\\\\n        UNSAFE_componentWillUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): void;\\\\n    };\\\\n    displayName: string;\\\\n    defaultProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps;\\\\n    getDerivedStateFromProps: (nextProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps, prevState: import(\\\\\\"./types\\\\\\").CategoricalChartState) => import(\\\\\\"./types\\\\\\").CategoricalChartState;\\\\n    renderActiveDot: (option: any, props: any) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n    contextType?: import(\\\\\\"react\\\\\\").Context<any>;\\\\n};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/chart/RadialBarChart.d.ts snapshot 1`] = `"\\"export declare const RadialBarChart: {\\\\n    new (props: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps): {\\\\n        readonly eventEmitterSymbol: Symbol;\\\\n        clipPathId: string;\\\\n        accessibilityManager: import(\\\\\\"./AccessibilityManager\\\\\\").AccessibilityManager;\\\\n        throttleTriggeredAfterMouseMove: import(\\\\\\"lodash\\\\\\").DebouncedFunc<(e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer) => any>;\\\\n        container?: HTMLElement;\\\\n        componentDidMount(): void;\\\\n        displayDefaultTooltip(): void;\\\\n        getSnapshotBeforeUpdate(prevProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, prevState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>): null;\\\\n        componentDidUpdate(prevProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps): void;\\\\n        componentWillUnmount(): void;\\\\n        getTooltipEventType(): import(\\\\\\"../util/types\\\\\\").TooltipEventType;\\\\n        getMouseInfo(event: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer): {\\\\n            xValue: any;\\\\n            yValue: any;\\\\n            chartX: number;\\\\n            chartY: number;\\\\n        } | {\\\\n            activeTooltipIndex: number;\\\\n            activeLabel: any;\\\\n            activePayload: any[];\\\\n            activeCoordinate: import(\\\\\\"../util/types\\\\\\").ChartCoordinate;\\\\n            chartX: number;\\\\n            chartY: number;\\\\n        };\\\\n        inRange(x: number, y: number, scale?: number): any;\\\\n        parseEventsOfWrapper(): any;\\\\n        addListener(): void;\\\\n        removeListener(): void;\\\\n        handleLegendBBoxUpdate: (box: DOMRect) => void;\\\\n        handleReceiveSyncEvent: (cId: string | number, data: import(\\\\\\"./types\\\\\\").CategoricalChartState, emitter: Symbol) => void;\\\\n        handleBrushChange: ({ startIndex, endIndex }: {\\\\n            startIndex: number;\\\\n            endIndex: number;\\\\n        }) => void;\\\\n        handleMouseEnter: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>) => void;\\\\n        triggeredAfterMouseMove: (e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer) => any;\\\\n        handleItemMouseEnter: (el: any) => void;\\\\n        handleItemMouseLeave: () => void;\\\\n        handleMouseMove: (e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer & Partial<Omit<import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>, keyof import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer>>) => void;\\\\n        handleMouseLeave: (e: any) => void;\\\\n        handleOuterEvent: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleClick: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>) => void;\\\\n        handleMouseDown: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").Touch) => void;\\\\n        handleMouseUp: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").Touch) => void;\\\\n        handleTouchMove: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleTouchStart: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleTouchEnd: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        triggerSyncEvent: (data: import(\\\\\\"./types\\\\\\").CategoricalChartState) => void;\\\\n        applySyncEvent: (data: import(\\\\\\"./types\\\\\\").CategoricalChartState) => void;\\\\n        filterFormatItem(item: any, displayName: any, childIndex: any): any;\\\\n        renderCursor: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        renderPolarAxis: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n            className: any;\\\\n            key: any;\\\\n            ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n            type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n            dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n            hide?: boolean;\\\\n            scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n            tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n            tickCount?: number;\\\\n            axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n            tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n            tickSize?: number;\\\\n            tickFormatter?: (value: any, index: number) => string;\\\\n            allowDataOverflow?: boolean;\\\\n            allowDuplicatedCategory?: boolean;\\\\n            allowDecimals?: boolean;\\\\n            domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n            includeHidden?: boolean;\\\\n            name?: string;\\\\n            unit?: string | number;\\\\n            axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n            range?: number[];\\\\n            AxisComp?: any;\\\\n            label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        }, HTMLElement>;\\\\n        renderPolarGrid: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderLegend: () => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderTooltip: () => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderBrush: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderReferenceElement: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderActivePoints: ({ item, activePoint, basePoint, childIndex, isRange }: any) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>[];\\\\n        renderGraphicChild: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n        renderCustomized: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderClipPath(): import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        getXScales(): {\\\\n            [x: string]: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        };\\\\n        getYScales(): {\\\\n            [x: string]: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        };\\\\n        getXScaleByAxisId(axisId: string): Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        getYScaleByAxisId(axisId: string): Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        getItemByXY(chartXY: {\\\\n            x: number;\\\\n            y: number;\\\\n        }): {\\\\n            graphicalItem: any;\\\\n            payload: any;\\\\n        };\\\\n        renderMap: {\\\\n            CartesianGrid: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            ReferenceArea: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            ReferenceLine: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            ReferenceDot: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            XAxis: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            YAxis: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            Brush: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            Bar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Line: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Area: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Radar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            RadialBar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Scatter: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Pie: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Funnel: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Tooltip: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").JSX.Element;\\\\n                once: boolean;\\\\n            };\\\\n            PolarGrid: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            PolarAngleAxis: {\\\\n                handler: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n                    className: any;\\\\n                    key: any;\\\\n                    ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n                    type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n                    dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n                    hide?: boolean;\\\\n                    scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n                    tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n                    tickCount?: number;\\\\n                    axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n                    tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n                    tickSize?: number;\\\\n                    tickFormatter?: (value: any, index: number) => string;\\\\n                    allowDataOverflow?: boolean;\\\\n                    allowDuplicatedCategory?: boolean;\\\\n                    allowDecimals?: boolean;\\\\n                    domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n                    includeHidden?: boolean;\\\\n                    name?: string;\\\\n                    unit?: string | number;\\\\n                    axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n                    range?: number[];\\\\n                    AxisComp?: any;\\\\n                    label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                }, HTMLElement>;\\\\n            };\\\\n            PolarRadiusAxis: {\\\\n                handler: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n                    className: any;\\\\n                    key: any;\\\\n                    ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n                    type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n                    dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n                    hide?: boolean;\\\\n                    scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n                    tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n                    tickCount?: number;\\\\n                    axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n                    tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n                    tickSize?: number;\\\\n                    tickFormatter?: (value: any, index: number) => string;\\\\n                    allowDataOverflow?: boolean;\\\\n                    allowDuplicatedCategory?: boolean;\\\\n                    allowDecimals?: boolean;\\\\n                    domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n                    includeHidden?: boolean;\\\\n                    name?: string;\\\\n                    unit?: string | number;\\\\n                    axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n                    range?: number[];\\\\n                    AxisComp?: any;\\\\n                    label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                }, HTMLElement>;\\\\n            };\\\\n            Customized: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n        };\\\\n        render(): import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        context: any;\\\\n        setState<K extends keyof import(\\\\\\"./types\\\\\\").CategoricalChartState>(state: import(\\\\\\"./types\\\\\\").CategoricalChartState | ((prevState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, props: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>) => import(\\\\\\"./types\\\\\\").CategoricalChartState | Pick<import(\\\\\\"./types\\\\\\").CategoricalChartState, K>) | Pick<import(\\\\\\"./types\\\\\\").CategoricalChartState, K>, callback?: () => void): void;\\\\n        forceUpdate(callback?: () => void): void;\\\\n        readonly props: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps> & Readonly<{\\\\n            children?: import(\\\\\\"react\\\\\\").ReactNode;\\\\n        }>;\\\\n        state: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>;\\\\n        refs: {\\\\n            [key: string]: import(\\\\\\"react\\\\\\").ReactInstance;\\\\n        };\\\\n        shouldComponentUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): boolean;\\\\n        componentDidCatch?(error: Error, errorInfo: import(\\\\\\"react\\\\\\").ErrorInfo): void;\\\\n        componentWillMount?(): void;\\\\n        UNSAFE_componentWillMount?(): void;\\\\n        componentWillReceiveProps?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextContext: any): void;\\\\n        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextContext: any): void;\\\\n        componentWillUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): void;\\\\n        UNSAFE_componentWillUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): void;\\\\n    };\\\\n    displayName: string;\\\\n    defaultProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps;\\\\n    getDerivedStateFromProps: (nextProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps, prevState: import(\\\\\\"./types\\\\\\").CategoricalChartState) => import(\\\\\\"./types\\\\\\").CategoricalChartState;\\\\n    renderActiveDot: (option: any, props: any) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n    contextType?: import(\\\\\\"react\\\\\\").Context<any>;\\\\n};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/chart/Sankey.d.ts snapshot 1`] = `"\\"import React, { PureComponent, ReactElement, SVGProps } from 'react';\\\\nimport { Props as RectangleProps } from '../shape/Rectangle';\\\\nimport { Margin, DataKey, SankeyLink, SankeyNode } from '../util/types';\\\\ninterface LinkDataItem {\\\\n    source: number;\\\\n    target: number;\\\\n    [key: string]: any;\\\\n}\\\\ninterface SankeyData {\\\\n    nodes: any[];\\\\n    links: LinkDataItem[];\\\\n}\\\\ntype SankeyNodeOptions = ReactElement<SVGElement> | ((props: any) => ReactElement<SVGElement>) | RectangleProps;\\\\ntype SankeyLinkOptions = ReactElement<SVGElement> | ((props: any) => ReactElement<SVGElement>) | SVGProps<SVGPathElement>;\\\\ninterface SankeyProps {\\\\n    nameKey?: DataKey<any>;\\\\n    dataKey?: DataKey<any>;\\\\n    width?: number;\\\\n    height?: number;\\\\n    data: SankeyData;\\\\n    nodePadding?: number;\\\\n    nodeWidth?: number;\\\\n    linkCurvature?: number;\\\\n    iterations?: number;\\\\n    node?: SankeyNodeOptions;\\\\n    link?: SankeyLinkOptions;\\\\n    style?: any;\\\\n    className?: string;\\\\n    children?: any;\\\\n    margin?: Margin;\\\\n    onClick?: any;\\\\n    onMouseEnter?: any;\\\\n    onMouseLeave?: any;\\\\n    sort?: boolean;\\\\n}\\\\ntype Props = SVGProps<SVGElement> & SankeyProps;\\\\ninterface State {\\\\n    activeElement?: any;\\\\n    activeElementType?: any;\\\\n    isTooltipActive: boolean;\\\\n    nodes: SankeyNode[];\\\\n    links: SankeyLink[];\\\\n    sort?: boolean;\\\\n    prevData?: SankeyData;\\\\n    prevWidth?: number;\\\\n    prevHeight?: number;\\\\n    prevMargin?: Margin;\\\\n    prevIterations?: number;\\\\n    prevNodeWidth?: number;\\\\n    prevNodePadding?: number;\\\\n    prevSort?: boolean;\\\\n}\\\\nexport declare class Sankey extends PureComponent<Props, State> {\\\\n    static displayName: string;\\\\n    static defaultProps: {\\\\n        nameKey: string;\\\\n        dataKey: string;\\\\n        nodePadding: number;\\\\n        nodeWidth: number;\\\\n        linkCurvature: number;\\\\n        iterations: number;\\\\n        margin: {\\\\n            top: number;\\\\n            right: number;\\\\n            bottom: number;\\\\n            left: number;\\\\n        };\\\\n        sort: boolean;\\\\n    };\\\\n    state: {\\\\n        activeElement: any;\\\\n        activeElementType: any;\\\\n        isTooltipActive: boolean;\\\\n        nodes: SankeyNode[];\\\\n        links: SankeyLink[];\\\\n    };\\\\n    static getDerivedStateFromProps(nextProps: Props, prevState: State): State;\\\\n    handleMouseEnter(el: React.ReactElement, type: string, e: any): void;\\\\n    handleMouseLeave(el: React.ReactElement, type: string, e: any): void;\\\\n    handleClick(el: React.ReactElement, type: string, e: any): void;\\\\n    static renderLinkItem(option: any, props: any): any;\\\\n    renderLinks(links: SankeyLink[], nodes: SankeyNode[]): React.JSX.Element;\\\\n    static renderNodeItem(option: any, props: Props): any;\\\\n    renderNodes(nodes: SankeyNode[]): React.JSX.Element;\\\\n    renderTooltip(): ReactElement;\\\\n    render(): React.JSX.Element;\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/chart/ScatterChart.d.ts snapshot 1`] = `"\\"export declare const ScatterChart: {\\\\n    new (props: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps): {\\\\n        readonly eventEmitterSymbol: Symbol;\\\\n        clipPathId: string;\\\\n        accessibilityManager: import(\\\\\\"./AccessibilityManager\\\\\\").AccessibilityManager;\\\\n        throttleTriggeredAfterMouseMove: import(\\\\\\"lodash\\\\\\").DebouncedFunc<(e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer) => any>;\\\\n        container?: HTMLElement;\\\\n        componentDidMount(): void;\\\\n        displayDefaultTooltip(): void;\\\\n        getSnapshotBeforeUpdate(prevProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, prevState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>): null;\\\\n        componentDidUpdate(prevProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps): void;\\\\n        componentWillUnmount(): void;\\\\n        getTooltipEventType(): import(\\\\\\"../util/types\\\\\\").TooltipEventType;\\\\n        getMouseInfo(event: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer): {\\\\n            xValue: any;\\\\n            yValue: any;\\\\n            chartX: number;\\\\n            chartY: number;\\\\n        } | {\\\\n            activeTooltipIndex: number;\\\\n            activeLabel: any;\\\\n            activePayload: any[];\\\\n            activeCoordinate: import(\\\\\\"../util/types\\\\\\").ChartCoordinate;\\\\n            chartX: number;\\\\n            chartY: number;\\\\n        };\\\\n        inRange(x: number, y: number, scale?: number): any;\\\\n        parseEventsOfWrapper(): any;\\\\n        addListener(): void;\\\\n        removeListener(): void;\\\\n        handleLegendBBoxUpdate: (box: DOMRect) => void;\\\\n        handleReceiveSyncEvent: (cId: string | number, data: import(\\\\\\"./types\\\\\\").CategoricalChartState, emitter: Symbol) => void;\\\\n        handleBrushChange: ({ startIndex, endIndex }: {\\\\n            startIndex: number;\\\\n            endIndex: number;\\\\n        }) => void;\\\\n        handleMouseEnter: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>) => void;\\\\n        triggeredAfterMouseMove: (e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer) => any;\\\\n        handleItemMouseEnter: (el: any) => void;\\\\n        handleItemMouseLeave: () => void;\\\\n        handleMouseMove: (e: import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer & Partial<Omit<import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>, keyof import(\\\\\\"./generateCategoricalChart\\\\\\").MousePointer>>) => void;\\\\n        handleMouseLeave: (e: any) => void;\\\\n        handleOuterEvent: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleClick: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent>) => void;\\\\n        handleMouseDown: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").Touch) => void;\\\\n        handleMouseUp: (e: import(\\\\\\"react\\\\\\").MouseEvent<Element, MouseEvent> | import(\\\\\\"react\\\\\\").Touch) => void;\\\\n        handleTouchMove: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleTouchStart: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        handleTouchEnd: (e: import(\\\\\\"react\\\\\\").TouchEvent<Element>) => void;\\\\n        triggerSyncEvent: (data: import(\\\\\\"./types\\\\\\").CategoricalChartState) => void;\\\\n        applySyncEvent: (data: import(\\\\\\"./types\\\\\\").CategoricalChartState) => void;\\\\n        filterFormatItem(item: any, displayName: any, childIndex: any): any;\\\\n        renderCursor: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        renderPolarAxis: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n            className: any;\\\\n            key: any;\\\\n            ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n            type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n            dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n            hide?: boolean;\\\\n            scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n            tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n            tickCount?: number;\\\\n            axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n            tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n            tickSize?: number;\\\\n            tickFormatter?: (value: any, index: number) => string;\\\\n            allowDataOverflow?: boolean;\\\\n            allowDuplicatedCategory?: boolean;\\\\n            allowDecimals?: boolean;\\\\n            domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n            includeHidden?: boolean;\\\\n            name?: string;\\\\n            unit?: string | number;\\\\n            axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n            range?: number[];\\\\n            AxisComp?: any;\\\\n            label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        }, HTMLElement>;\\\\n        renderPolarGrid: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderLegend: () => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderTooltip: () => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderBrush: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderReferenceElement: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderActivePoints: ({ item, activePoint, basePoint, childIndex, isRange }: any) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>[];\\\\n        renderGraphicChild: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n        renderCustomized: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n        renderClipPath(): import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        getXScales(): {\\\\n            [x: string]: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        };\\\\n        getYScales(): {\\\\n            [x: string]: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        };\\\\n        getXScaleByAxisId(axisId: string): Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        getYScaleByAxisId(axisId: string): Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        getItemByXY(chartXY: {\\\\n            x: number;\\\\n            y: number;\\\\n        }): {\\\\n            graphicalItem: any;\\\\n            payload: any;\\\\n        };\\\\n        renderMap: {\\\\n            CartesianGrid: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            ReferenceArea: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            ReferenceLine: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            ReferenceDot: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            XAxis: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            YAxis: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n            Brush: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            Bar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Line: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Area: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Radar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            RadialBar: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Scatter: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Pie: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Funnel: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => any[];\\\\n            };\\\\n            Tooltip: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").JSX.Element;\\\\n                once: boolean;\\\\n            };\\\\n            PolarGrid: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            PolarAngleAxis: {\\\\n                handler: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n                    className: any;\\\\n                    key: any;\\\\n                    ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n                    type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n                    dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n                    hide?: boolean;\\\\n                    scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n                    tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n                    tickCount?: number;\\\\n                    axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n                    tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n                    tickSize?: number;\\\\n                    tickFormatter?: (value: any, index: number) => string;\\\\n                    allowDataOverflow?: boolean;\\\\n                    allowDuplicatedCategory?: boolean;\\\\n                    allowDecimals?: boolean;\\\\n                    domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n                    includeHidden?: boolean;\\\\n                    name?: string;\\\\n                    unit?: string | number;\\\\n                    axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n                    range?: number[];\\\\n                    AxisComp?: any;\\\\n                    label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                }, HTMLElement>;\\\\n            };\\\\n            PolarRadiusAxis: {\\\\n                handler: (element: any, displayName: string, index: number) => import(\\\\\\"react\\\\\\").DetailedReactHTMLElement<{\\\\n                    className: any;\\\\n                    key: any;\\\\n                    ticks: import(\\\\\\"../util/types\\\\\\").TickItem[];\\\\n                    type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n                    dataKey?: import(\\\\\\"../util/types\\\\\\").DataKey<any>;\\\\n                    hide?: boolean;\\\\n                    scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n                    tick?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement> | import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>> | ((props: any) => import(\\\\\\"react\\\\\\").ReactElement<SVGElement, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>);\\\\n                    tickCount?: number;\\\\n                    axisLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGLineElement>;\\\\n                    tickLine?: boolean | import(\\\\\\"react\\\\\\").SVGProps<SVGTextElement>;\\\\n                    tickSize?: number;\\\\n                    tickFormatter?: (value: any, index: number) => string;\\\\n                    allowDataOverflow?: boolean;\\\\n                    allowDuplicatedCategory?: boolean;\\\\n                    allowDecimals?: boolean;\\\\n                    domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n                    includeHidden?: boolean;\\\\n                    name?: string;\\\\n                    unit?: string | number;\\\\n                    axisType?: import(\\\\\\"../util/types\\\\\\").AxisType;\\\\n                    range?: number[];\\\\n                    AxisComp?: any;\\\\n                    label?: string | number | object | import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n                }, HTMLElement>;\\\\n            };\\\\n            Customized: {\\\\n                handler: (element: import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>, displayName: string, index: number) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n            };\\\\n        };\\\\n        render(): import(\\\\\\"react\\\\\\").JSX.Element;\\\\n        context: any;\\\\n        setState<K extends keyof import(\\\\\\"./types\\\\\\").CategoricalChartState>(state: import(\\\\\\"./types\\\\\\").CategoricalChartState | ((prevState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, props: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>) => import(\\\\\\"./types\\\\\\").CategoricalChartState | Pick<import(\\\\\\"./types\\\\\\").CategoricalChartState, K>) | Pick<import(\\\\\\"./types\\\\\\").CategoricalChartState, K>, callback?: () => void): void;\\\\n        forceUpdate(callback?: () => void): void;\\\\n        readonly props: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps> & Readonly<{\\\\n            children?: import(\\\\\\"react\\\\\\").ReactNode;\\\\n        }>;\\\\n        state: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>;\\\\n        refs: {\\\\n            [key: string]: import(\\\\\\"react\\\\\\").ReactInstance;\\\\n        };\\\\n        shouldComponentUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): boolean;\\\\n        componentDidCatch?(error: Error, errorInfo: import(\\\\\\"react\\\\\\").ErrorInfo): void;\\\\n        componentWillMount?(): void;\\\\n        UNSAFE_componentWillMount?(): void;\\\\n        componentWillReceiveProps?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextContext: any): void;\\\\n        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextContext: any): void;\\\\n        componentWillUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): void;\\\\n        UNSAFE_componentWillUpdate?(nextProps: Readonly<import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps>, nextState: Readonly<import(\\\\\\"./types\\\\\\").CategoricalChartState>, nextContext: any): void;\\\\n    };\\\\n    displayName: string;\\\\n    defaultProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps;\\\\n    getDerivedStateFromProps: (nextProps: import(\\\\\\"./generateCategoricalChart\\\\\\").CategoricalChartProps, prevState: import(\\\\\\"./types\\\\\\").CategoricalChartState) => import(\\\\\\"./types\\\\\\").CategoricalChartState;\\\\n    renderActiveDot: (option: any, props: any) => import(\\\\\\"react\\\\\\").ReactElement<any, string | import(\\\\\\"react\\\\\\").JSXElementConstructor<any>>;\\\\n    contextType?: import(\\\\\\"react\\\\\\").Context<any>;\\\\n};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/chart/SunburstChart.d.ts snapshot 1`] = `"\\"import React from 'react';\\\\nexport interface SunburstData {\\\\n    [key: string]: any;\\\\n    name: string;\\\\n    value?: number;\\\\n    fill?: string;\\\\n    children?: SunburstData[];\\\\n}\\\\ninterface TextOptions {\\\\n    fontFamily?: string;\\\\n    fontWeight?: string;\\\\n    paintOrder?: string;\\\\n    stroke?: string;\\\\n    fill?: string;\\\\n    fontSize?: string;\\\\n    pointerEvents?: string;\\\\n}\\\\nexport interface SunburstChartProps {\\\\n    className?: string;\\\\n    data?: SunburstData;\\\\n    width?: number;\\\\n    height?: number;\\\\n    padding?: number;\\\\n    dataKey?: string;\\\\n    ringPadding?: number;\\\\n    innerRadius?: number;\\\\n    outerRadius?: number;\\\\n    cx?: number;\\\\n    cy?: number;\\\\n    startAngle?: number;\\\\n    endAngle?: number;\\\\n    children?: React.ReactNode;\\\\n    fill?: string;\\\\n    stroke?: string;\\\\n    textOptions?: TextOptions;\\\\n    onMouseEnter?: (node: SunburstData, e: React.MouseEvent) => void;\\\\n    onMouseLeave?: (node: SunburstData, e: React.MouseEvent) => void;\\\\n    onClick?: (node: SunburstData) => void;\\\\n}\\\\nexport declare const SunburstChart: ({ className, data, children, width, height, padding, dataKey, ringPadding, innerRadius, fill, stroke, textOptions, outerRadius, cx, cy, startAngle, endAngle, onClick, onMouseEnter, onMouseLeave, }: SunburstChartProps) => React.JSX.Element;\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/chart/Treemap.d.ts snapshot 1`] = `"\\"import React, { PureComponent } from 'react';\\\\nimport { AnimationDuration, AnimationTiming, DataKey, TreemapNode } from '../util/types';\\\\nexport interface Props {\\\\n    width?: number;\\\\n    height?: number;\\\\n    data?: any[];\\\\n    animationId?: number;\\\\n    style?: any;\\\\n    aspectRatio?: number;\\\\n    content?: React.ReactElement;\\\\n    fill?: string;\\\\n    stroke?: string;\\\\n    className?: string;\\\\n    nameKey?: DataKey<any>;\\\\n    dataKey?: DataKey<any>;\\\\n    children?: any;\\\\n    type?: 'flat' | 'nest';\\\\n    colorPanel?: [];\\\\n    nestIndexContent?: React.ReactElement | ((item: any, i: number) => any);\\\\n    onAnimationStart?: () => void;\\\\n    onAnimationEnd?: () => void;\\\\n    onMouseEnter?: (node: TreemapNode, e: any) => void;\\\\n    onMouseLeave?: (node: TreemapNode, e: any) => void;\\\\n    onClick?: (node: TreemapNode) => void;\\\\n    isAnimationActive?: boolean;\\\\n    isUpdateAnimationActive?: boolean;\\\\n    animationBegin?: number;\\\\n    animationDuration?: AnimationDuration;\\\\n    animationEasing?: AnimationTiming;\\\\n}\\\\ninterface State {\\\\n    isTooltipActive: boolean;\\\\n    isAnimationFinished: boolean;\\\\n    activeNode?: TreemapNode;\\\\n    formatRoot?: TreemapNode;\\\\n    currentRoot?: TreemapNode;\\\\n    nestIndex?: TreemapNode[];\\\\n    prevData?: any[];\\\\n    prevType?: 'flat' | 'nest';\\\\n    prevWidth?: number;\\\\n    prevHeight?: number;\\\\n    prevDataKey?: DataKey<any>;\\\\n    prevAspectRatio?: number;\\\\n}\\\\nexport declare class Treemap extends PureComponent<Props, State> {\\\\n    static displayName: string;\\\\n    static defaultProps: {\\\\n        aspectRatio: number;\\\\n        dataKey: string;\\\\n        type: string;\\\\n        isAnimationActive: boolean;\\\\n        isUpdateAnimationActive: boolean;\\\\n        animationBegin: number;\\\\n        animationDuration: number;\\\\n        animationEasing: string;\\\\n    };\\\\n    state: {\\\\n        isTooltipActive: boolean;\\\\n        isAnimationFinished: boolean;\\\\n        activeNode?: TreemapNode;\\\\n        formatRoot?: TreemapNode;\\\\n        currentRoot?: TreemapNode;\\\\n        nestIndex?: TreemapNode[];\\\\n        prevData?: any[];\\\\n        prevType?: \\\\\\"flat\\\\\\" | \\\\\\"nest\\\\\\";\\\\n        prevWidth?: number;\\\\n        prevHeight?: number;\\\\n        prevDataKey?: DataKey<any>;\\\\n        prevAspectRatio?: number;\\\\n    };\\\\n    static getDerivedStateFromProps(nextProps: Props, prevState: State): State;\\\\n    handleMouseEnter(node: TreemapNode, e: any): void;\\\\n    handleMouseLeave(node: TreemapNode, e: any): void;\\\\n    handleAnimationEnd: () => void;\\\\n    handleAnimationStart: () => void;\\\\n    handleClick(node: TreemapNode): void;\\\\n    handleNestIndex(node: TreemapNode, i: number): void;\\\\n    renderItem(content: any, nodeProps: TreemapNode, isLeaf: boolean): React.ReactElement;\\\\n    static renderContentItem(content: any, nodeProps: TreemapNode, type: string, colorPanel: string[]): React.ReactElement;\\\\n    renderNode(root: TreemapNode, node: TreemapNode): React.ReactElement;\\\\n    renderAllNodes(): React.ReactElement;\\\\n    renderTooltip(): React.ReactElement;\\\\n    renderNestIndex(): React.ReactElement;\\\\n    render(): React.JSX.Element;\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/chart/generateCategoricalChart.d.ts snapshot 1`] = `"\\"import React, { ReactElement } from 'react';\\\\nimport type { DebouncedFunc } from 'lodash';\\\\nimport { AxisStackGroups } from '../util/ChartUtils';\\\\nimport { AxisType, CategoricalChartOptions, ChartCoordinate, DataKey, LayoutType, Margin, StackOffsetType, TickItem, TooltipEventType } from '../util/types';\\\\nimport { AccessibilityManager } from './AccessibilityManager';\\\\nimport { AxisMap, CategoricalChartState } from './types';\\\\nexport interface MousePointer {\\\\n    pageX: number;\\\\n    pageY: number;\\\\n}\\\\nexport type GraphicalItem<Props = Record<string, any>> = ReactElement<Props, string | React.JSXElementConstructor<Props>> & {\\\\n    item: ReactElement<Props, string | React.JSXElementConstructor<Props>>;\\\\n};\\\\ndeclare function renderAsIs(element: React.ReactElement): React.ReactElement;\\\\nexport declare const getAxisMapByAxes: (props: CategoricalChartProps, { axes, graphicalItems, axisType, axisIdKey, stackGroups, dataStartIndex, dataEndIndex, }: {\\\\n    axes: ReadonlyArray<ReactElement>;\\\\n    graphicalItems: ReadonlyArray<ReactElement>;\\\\n    axisType: AxisType;\\\\n    axisIdKey: string;\\\\n    stackGroups: AxisStackGroups;\\\\n    dataStartIndex: number;\\\\n    dataEndIndex: number;\\\\n}) => AxisMap;\\\\nexport declare const createDefaultState: (props: CategoricalChartProps) => CategoricalChartState;\\\\nexport type CategoricalChartFunc = (nextState: CategoricalChartState, event: any) => void;\\\\nexport interface CategoricalChartProps {\\\\n    syncId?: number | string;\\\\n    syncMethod?: 'index' | 'value' | Function;\\\\n    compact?: boolean;\\\\n    width?: number;\\\\n    height?: number;\\\\n    dataKey?: DataKey<any>;\\\\n    data?: any[];\\\\n    layout?: LayoutType;\\\\n    stackOffset?: StackOffsetType;\\\\n    throttleDelay?: number;\\\\n    margin?: Margin;\\\\n    barCategoryGap?: number | string;\\\\n    barGap?: number | string;\\\\n    barSize?: number | string;\\\\n    maxBarSize?: number;\\\\n    style?: any;\\\\n    className?: string;\\\\n    children?: any;\\\\n    defaultShowTooltip?: boolean;\\\\n    onClick?: CategoricalChartFunc;\\\\n    onMouseLeave?: CategoricalChartFunc;\\\\n    onMouseEnter?: CategoricalChartFunc;\\\\n    onMouseMove?: CategoricalChartFunc;\\\\n    onMouseDown?: CategoricalChartFunc;\\\\n    onMouseUp?: CategoricalChartFunc;\\\\n    reverseStackOrder?: boolean;\\\\n    id?: string;\\\\n    startAngle?: number;\\\\n    endAngle?: number;\\\\n    cx?: number | string;\\\\n    cy?: number | string;\\\\n    innerRadius?: number | string;\\\\n    outerRadius?: number | string;\\\\n    title?: string;\\\\n    desc?: string;\\\\n    accessibilityLayer?: boolean;\\\\n    role?: string;\\\\n    tabIndex?: number;\\\\n}\\\\nexport declare const generateCategoricalChart: ({ chartName, GraphicalChild, defaultTooltipEventType, validateTooltipEventTypes, axisComponents, legendContent, formatAxisMap, defaultProps, }: CategoricalChartOptions) => {\\\\n    new (props: CategoricalChartProps): {\\\\n        readonly eventEmitterSymbol: Symbol;\\\\n        clipPathId: string;\\\\n        accessibilityManager: AccessibilityManager;\\\\n        throttleTriggeredAfterMouseMove: DebouncedFunc<(e: MousePointer) => any>;\\\\n        container?: HTMLElement;\\\\n        componentDidMount(): void;\\\\n        displayDefaultTooltip(): void;\\\\n        getSnapshotBeforeUpdate(prevProps: Readonly<CategoricalChartProps>, prevState: Readonly<CategoricalChartState>): null;\\\\n        componentDidUpdate(prevProps: CategoricalChartProps): void;\\\\n        componentWillUnmount(): void;\\\\n        getTooltipEventType(): TooltipEventType;\\\\n        getMouseInfo(event: MousePointer): {\\\\n            xValue: any;\\\\n            yValue: any;\\\\n            chartX: number;\\\\n            chartY: number;\\\\n        } | {\\\\n            activeTooltipIndex: number;\\\\n            activeLabel: any;\\\\n            activePayload: any[];\\\\n            activeCoordinate: ChartCoordinate;\\\\n            chartX: number;\\\\n            chartY: number;\\\\n        };\\\\n        inRange(x: number, y: number, scale?: number): any;\\\\n        parseEventsOfWrapper(): any;\\\\n        addListener(): void;\\\\n        removeListener(): void;\\\\n        handleLegendBBoxUpdate: (box: DOMRect | null) => void;\\\\n        handleReceiveSyncEvent: (cId: number | string, data: CategoricalChartState, emitter: Symbol) => void;\\\\n        handleBrushChange: ({ startIndex, endIndex }: {\\\\n            startIndex: number;\\\\n            endIndex: number;\\\\n        }) => void;\\\\n        handleMouseEnter: (e: React.MouseEvent) => void;\\\\n        triggeredAfterMouseMove: (e: MousePointer) => any;\\\\n        handleItemMouseEnter: (el: any) => void;\\\\n        handleItemMouseLeave: () => void;\\\\n        handleMouseMove: (e: MousePointer & Partial<Omit<React.MouseEvent, keyof MousePointer>>) => void;\\\\n        handleMouseLeave: (e: any) => void;\\\\n        handleOuterEvent: (e: React.MouseEvent | React.TouchEvent) => void;\\\\n        handleClick: (e: React.MouseEvent) => void;\\\\n        handleMouseDown: (e: React.MouseEvent | React.Touch) => void;\\\\n        handleMouseUp: (e: React.MouseEvent | React.Touch) => void;\\\\n        handleTouchMove: (e: React.TouchEvent) => void;\\\\n        handleTouchStart: (e: React.TouchEvent) => void;\\\\n        handleTouchEnd: (e: React.TouchEvent) => void;\\\\n        triggerSyncEvent: (data: CategoricalChartState) => void;\\\\n        applySyncEvent: (data: CategoricalChartState) => void;\\\\n        filterFormatItem(item: any, displayName: any, childIndex: any): any;\\\\n        renderCursor: (element: ReactElement) => React.JSX.Element;\\\\n        renderPolarAxis: (element: any, displayName: string, index: number) => React.DetailedReactHTMLElement<{\\\\n            className: any;\\\\n            key: any;\\\\n            ticks: TickItem[];\\\\n            type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n            dataKey?: DataKey<any>;\\\\n            hide?: boolean;\\\\n            scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n            tick?: boolean | React.SVGProps<SVGTextElement> | React.ReactElement<SVGElement, string | React.JSXElementConstructor<any>> | ((props: any) => React.ReactElement<SVGElement, string | React.JSXElementConstructor<any>>);\\\\n            tickCount?: number;\\\\n            axisLine?: boolean | React.SVGProps<SVGLineElement>;\\\\n            tickLine?: boolean | React.SVGProps<SVGTextElement>;\\\\n            tickSize?: number;\\\\n            tickFormatter?: (value: any, index: number) => string;\\\\n            allowDataOverflow?: boolean;\\\\n            allowDuplicatedCategory?: boolean;\\\\n            allowDecimals?: boolean;\\\\n            domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n            includeHidden?: boolean;\\\\n            name?: string;\\\\n            unit?: string | number;\\\\n            axisType?: AxisType;\\\\n            range?: number[];\\\\n            AxisComp?: any;\\\\n            label?: string | number | object | React.ReactElement<any, string | React.JSXElementConstructor<any>>;\\\\n        }, HTMLElement>;\\\\n        renderPolarGrid: (element: React.ReactElement) => React.ReactElement;\\\\n        renderLegend: () => React.ReactElement;\\\\n        renderTooltip: () => React.ReactElement;\\\\n        renderBrush: (element: React.ReactElement) => React.ReactElement<any, string | React.JSXElementConstructor<any>>;\\\\n        renderReferenceElement: (element: React.ReactElement, displayName: string, index: number) => React.ReactElement;\\\\n        renderActivePoints: ({ item, activePoint, basePoint, childIndex, isRange }: any) => React.ReactElement<any, string | React.JSXElementConstructor<any>>[];\\\\n        renderGraphicChild: (element: React.ReactElement, displayName: string, index: number) => any[];\\\\n        renderCustomized: (element: React.ReactElement, displayName: string, index: number) => React.ReactElement;\\\\n        renderClipPath(): React.JSX.Element;\\\\n        getXScales(): {\\\\n            [x: string]: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        };\\\\n        getYScales(): {\\\\n            [x: string]: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        };\\\\n        getXScaleByAxisId(axisId: string): Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        getYScaleByAxisId(axisId: string): Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n        getItemByXY(chartXY: {\\\\n            x: number;\\\\n            y: number;\\\\n        }): {\\\\n            graphicalItem: any;\\\\n            payload: any;\\\\n        };\\\\n        renderMap: {\\\\n            CartesianGrid: {\\\\n                handler: typeof renderAsIs;\\\\n                once: boolean;\\\\n            };\\\\n            ReferenceArea: {\\\\n                handler: (element: React.ReactElement, displayName: string, index: number) => React.ReactElement;\\\\n            };\\\\n            ReferenceLine: {\\\\n                handler: typeof renderAsIs;\\\\n            };\\\\n            ReferenceDot: {\\\\n                handler: (element: React.ReactElement, displayName: string, index: number) => React.ReactElement;\\\\n            };\\\\n            XAxis: {\\\\n                handler: typeof renderAsIs;\\\\n            };\\\\n            YAxis: {\\\\n                handler: typeof renderAsIs;\\\\n            };\\\\n            Brush: {\\\\n                handler: (element: React.ReactElement) => React.ReactElement<any, string | React.JSXElementConstructor<any>>;\\\\n                once: boolean;\\\\n            };\\\\n            Bar: {\\\\n                handler: (element: React.ReactElement, displayName: string, index: number) => any[];\\\\n            };\\\\n            Line: {\\\\n                handler: (element: React.ReactElement, displayName: string, index: number) => any[];\\\\n            };\\\\n            Area: {\\\\n                handler: (element: React.ReactElement, displayName: string, index: number) => any[];\\\\n            };\\\\n            Radar: {\\\\n                handler: (element: React.ReactElement, displayName: string, index: number) => any[];\\\\n            };\\\\n            RadialBar: {\\\\n                handler: (element: React.ReactElement, displayName: string, index: number) => any[];\\\\n            };\\\\n            Scatter: {\\\\n                handler: (element: React.ReactElement, displayName: string, index: number) => any[];\\\\n            };\\\\n            Pie: {\\\\n                handler: (element: React.ReactElement, displayName: string, index: number) => any[];\\\\n            };\\\\n            Funnel: {\\\\n                handler: (element: React.ReactElement, displayName: string, index: number) => any[];\\\\n            };\\\\n            Tooltip: {\\\\n                handler: (element: ReactElement) => React.JSX.Element;\\\\n                once: boolean;\\\\n            };\\\\n            PolarGrid: {\\\\n                handler: (element: React.ReactElement) => React.ReactElement;\\\\n                once: boolean;\\\\n            };\\\\n            PolarAngleAxis: {\\\\n                handler: (element: any, displayName: string, index: number) => React.DetailedReactHTMLElement<{\\\\n                    className: any;\\\\n                    key: any;\\\\n                    ticks: TickItem[];\\\\n                    type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n                    dataKey?: DataKey<any>;\\\\n                    hide?: boolean;\\\\n                    scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n                    tick?: boolean | React.SVGProps<SVGTextElement> | React.ReactElement<SVGElement, string | React.JSXElementConstructor<any>> | ((props: any) => React.ReactElement<SVGElement, string | React.JSXElementConstructor<any>>);\\\\n                    tickCount?: number;\\\\n                    axisLine?: boolean | React.SVGProps<SVGLineElement>;\\\\n                    tickLine?: boolean | React.SVGProps<SVGTextElement>;\\\\n                    tickSize?: number;\\\\n                    tickFormatter?: (value: any, index: number) => string;\\\\n                    allowDataOverflow?: boolean;\\\\n                    allowDuplicatedCategory?: boolean;\\\\n                    allowDecimals?: boolean;\\\\n                    domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n                    includeHidden?: boolean;\\\\n                    name?: string;\\\\n                    unit?: string | number;\\\\n                    axisType?: AxisType;\\\\n                    range?: number[];\\\\n                    AxisComp?: any;\\\\n                    label?: string | number | object | React.ReactElement<any, string | React.JSXElementConstructor<any>>;\\\\n                }, HTMLElement>;\\\\n            };\\\\n            PolarRadiusAxis: {\\\\n                handler: (element: any, displayName: string, index: number) => React.DetailedReactHTMLElement<{\\\\n                    className: any;\\\\n                    key: any;\\\\n                    ticks: TickItem[];\\\\n                    type?: \\\\\\"number\\\\\\" | \\\\\\"category\\\\\\";\\\\n                    dataKey?: DataKey<any>;\\\\n                    hide?: boolean;\\\\n                    scale?: Function | import(\\\\\\"../util/types\\\\\\").ScaleType;\\\\n                    tick?: boolean | React.SVGProps<SVGTextElement> | React.ReactElement<SVGElement, string | React.JSXElementConstructor<any>> | ((props: any) => React.ReactElement<SVGElement, string | React.JSXElementConstructor<any>>);\\\\n                    tickCount?: number;\\\\n                    axisLine?: boolean | React.SVGProps<SVGLineElement>;\\\\n                    tickLine?: boolean | React.SVGProps<SVGTextElement>;\\\\n                    tickSize?: number;\\\\n                    tickFormatter?: (value: any, index: number) => string;\\\\n                    allowDataOverflow?: boolean;\\\\n                    allowDuplicatedCategory?: boolean;\\\\n                    allowDecimals?: boolean;\\\\n                    domain?: import(\\\\\\"../util/types\\\\\\").AxisDomain;\\\\n                    includeHidden?: boolean;\\\\n                    name?: string;\\\\n                    unit?: string | number;\\\\n                    axisType?: AxisType;\\\\n                    range?: number[];\\\\n                    AxisComp?: any;\\\\n                    label?: string | number | object | React.ReactElement<any, string | React.JSXElementConstructor<any>>;\\\\n                }, HTMLElement>;\\\\n            };\\\\n            Customized: {\\\\n                handler: (element: React.ReactElement, displayName: string, index: number) => React.ReactElement;\\\\n            };\\\\n        };\\\\n        render(): React.JSX.Element;\\\\n        context: any;\\\\n        setState<K extends keyof CategoricalChartState>(state: CategoricalChartState | ((prevState: Readonly<CategoricalChartState>, props: Readonly<CategoricalChartProps>) => CategoricalChartState | Pick<CategoricalChartState, K>) | Pick<CategoricalChartState, K>, callback?: () => void): void;\\\\n        forceUpdate(callback?: () => void): void;\\\\n        readonly props: Readonly<CategoricalChartProps> & Readonly<{\\\\n            children?: React.ReactNode;\\\\n        }>;\\\\n        state: Readonly<CategoricalChartState>;\\\\n        refs: {\\\\n            [key: string]: React.ReactInstance;\\\\n        };\\\\n        shouldComponentUpdate?(nextProps: Readonly<CategoricalChartProps>, nextState: Readonly<CategoricalChartState>, nextContext: any): boolean;\\\\n        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;\\\\n        componentWillMount?(): void;\\\\n        UNSAFE_componentWillMount?(): void;\\\\n        componentWillReceiveProps?(nextProps: Readonly<CategoricalChartProps>, nextContext: any): void;\\\\n        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<CategoricalChartProps>, nextContext: any): void;\\\\n        componentWillUpdate?(nextProps: Readonly<CategoricalChartProps>, nextState: Readonly<CategoricalChartState>, nextContext: any): void;\\\\n        UNSAFE_componentWillUpdate?(nextProps: Readonly<CategoricalChartProps>, nextState: Readonly<CategoricalChartState>, nextContext: any): void;\\\\n    };\\\\n    displayName: string;\\\\n    defaultProps: CategoricalChartProps;\\\\n    getDerivedStateFromProps: (nextProps: CategoricalChartProps, prevState: CategoricalChartState) => CategoricalChartState;\\\\n    renderActiveDot: (option: any, props: any) => React.ReactElement;\\\\n    contextType?: React.Context<any>;\\\\n};\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/chart/types.d.ts snapshot 1`] = `"\\"import { ReactElement } from 'react';\\\\nimport { BaseAxisProps, ChartCoordinate, ChartOffset, DataKey, LayoutType, Margin, StackOffsetType, TickItem } from '../util/types';\\\\nimport { AxisStackGroups } from '../util/ChartUtils';\\\\nexport type AxisMap = {\\\\n    [axisId: string]: BaseAxisProps;\\\\n};\\\\nexport interface CategoricalChartState {\\\\n    chartX?: number;\\\\n    chartY?: number;\\\\n    dataStartIndex?: number;\\\\n    dataEndIndex?: number;\\\\n    activeTooltipIndex?: number;\\\\n    isTooltipActive?: boolean;\\\\n    updateId?: number;\\\\n    xAxisMap?: AxisMap;\\\\n    yAxisMap?: AxisMap;\\\\n    zAxisMap?: AxisMap;\\\\n    orderedTooltipTicks?: any;\\\\n    tooltipAxis?: BaseAxisProps;\\\\n    tooltipTicks?: TickItem[];\\\\n    graphicalItems?: ReadonlyArray<ReactElement>;\\\\n    activeCoordinate?: ChartCoordinate;\\\\n    offset?: ChartOffset;\\\\n    angleAxisMap?: any;\\\\n    radiusAxisMap?: any;\\\\n    formattedGraphicalItems?: any;\\\\n    activePayload?: any[];\\\\n    tooltipAxisBandSize?: number;\\\\n    activeItem?: any;\\\\n    activeLabel?: string;\\\\n    activeIndex?: number;\\\\n    xValue?: number;\\\\n    yValue?: number;\\\\n    legendBBox?: DOMRect | null;\\\\n    prevDataKey?: DataKey<any>;\\\\n    prevData?: any[];\\\\n    prevWidth?: number;\\\\n    prevHeight?: number;\\\\n    prevLayout?: LayoutType;\\\\n    prevStackOffset?: StackOffsetType;\\\\n    prevMargin?: Margin;\\\\n    prevChildren?: any;\\\\n    stackGroups?: AxisStackGroups;\\\\n}\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/component/Cell.d.ts snapshot 1`] = `"\\"import type { FunctionComponent, SVGProps } from 'react';\\\\nexport type Props = SVGProps<SVGElement>;\\\\nexport declare const Cell: FunctionComponent<Props>;\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/component/Cursor.d.ts snapshot 1`] = `"\\"import React, { ReactElement } from 'react';\\\\nimport { ChartCoordinate, ChartOffset, LayoutType, TooltipEventType } from '../util/types';\\\\nexport type CursorProps = {\\\\n    activeCoordinate: ChartCoordinate;\\\\n    activePayload: any[];\\\\n    activeTooltipIndex: number;\\\\n    chartName: string;\\\\n    element: ReactElement;\\\\n    isActive: boolean;\\\\n    layout: LayoutType;\\\\n    offset: ChartOffset;\\\\n    tooltipAxisBandSize: number;\\\\n    tooltipEventType: TooltipEventType;\\\\n};\\\\nexport declare function Cursor(props: CursorProps): React.FunctionComponentElement<any> | React.DetailedReactHTMLElement<{\\\\n    payload: any[];\\\\n    payloadIndex: number;\\\\n    className: string;\\\\n    stroke: string;\\\\n    fill: string;\\\\n    x: number;\\\\n    y: number;\\\\n    width: number;\\\\n    height: number;\\\\n    top?: number;\\\\n    bottom?: number;\\\\n    left?: number;\\\\n    right?: number;\\\\n    brushBottom?: number;\\\\n    pointerEvents: string;\\\\n} | {\\\\n    payload: any[];\\\\n    payloadIndex: number;\\\\n    className: string;\\\\n    xAxis?: any;\\\\n    yAxis?: any;\\\\n    width?: any;\\\\n    height?: any;\\\\n    offset?: ChartOffset;\\\\n    angle?: number;\\\\n    radius?: number;\\\\n    cx?: number;\\\\n    cy?: number;\\\\n    startAngle?: number;\\\\n    endAngle?: number;\\\\n    innerRadius?: number;\\\\n    outerRadius?: number;\\\\n    x: number;\\\\n    y: number;\\\\n    top?: number;\\\\n    bottom?: number;\\\\n    left?: number;\\\\n    right?: number;\\\\n    brushBottom?: number;\\\\n    stroke: string;\\\\n    pointerEvents: string;\\\\n} | {\\\\n    payload: any[];\\\\n    payloadIndex: number;\\\\n    className: string;\\\\n    cx: number;\\\\n    cy: number;\\\\n    startAngle: number;\\\\n    endAngle: number;\\\\n    innerRadius: number;\\\\n    outerRadius: number;\\\\n    top?: number;\\\\n    bottom?: number;\\\\n    left?: number;\\\\n    right?: number;\\\\n    width?: number;\\\\n    height?: number;\\\\n    brushBottom?: number;\\\\n    stroke: string;\\\\n    pointerEvents: string;\\\\n} | {\\\\n    payload: any[];\\\\n    payloadIndex: number;\\\\n    className: string;\\\\n    points: import(\\\\\\"../util/cursor/getRadialCursorPoints\\\\\\").RadialCursorPoints | [import(\\\\\\"../util/types\\\\\\").Coordinate, import(\\\\\\"../util/types\\\\\\").Coordinate];\\\\n    top?: number;\\\\n    bottom?: number;\\\\n    left?: number;\\\\n    right?: number;\\\\n    width?: number;\\\\n    height?: number;\\\\n    brushBottom?: number;\\\\n    stroke: string;\\\\n    pointerEvents: string;\\\\n}, HTMLElement>;\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/component/Customized.d.ts snapshot 1`] = `"\\"import React, { Component, FunctionComponent, ReactElement } from 'react';\\\\ntype Comp<P> = FunctionComponent<P> | Component<P> | ReactElement<P>;\\\\nexport type Props<P, C extends Comp<P>> = P & {\\\\n    component: C;\\\\n};\\\\nexport declare function Customized<P, C extends Comp<P>>({ component, ...props }: Props<P, C>): React.JSX.Element;\\\\nexport declare namespace Customized {\\\\n    var displayName: string;\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/component/DefaultLegendContent.d.ts snapshot 1`] = `"\\"import React, { PureComponent, ReactNode, MouseEvent, ReactText, ReactElement } from 'react';\\\\nimport { DataKey, LegendType, LayoutType, PresentationAttributesAdaptChildEvent } from '../util/types';\\\\nexport type ContentType = ReactElement | ((props: Props) => ReactNode);\\\\nexport type IconType = Exclude<LegendType, 'none'>;\\\\nexport type HorizontalAlignmentType = 'center' | 'left' | 'right';\\\\nexport type VerticalAlignmentType = 'top' | 'bottom' | 'middle';\\\\nexport type Formatter = (value: any, entry: {\\\\n    value: any;\\\\n    id?: string;\\\\n    type?: LegendType;\\\\n    color?: string;\\\\n    payload?: {\\\\n        strokeDasharray: ReactText;\\\\n        value?: any;\\\\n    };\\\\n}, index: number) => ReactNode;\\\\nexport interface Payload {\\\\n    value: any;\\\\n    id?: string;\\\\n    type?: LegendType;\\\\n    color?: string;\\\\n    payload?: {\\\\n        strokeDasharray: ReactText;\\\\n        value?: any;\\\\n    };\\\\n    formatter?: Formatter;\\\\n    inactive?: boolean;\\\\n    legendIcon?: ReactElement<SVGElement>;\\\\n    dataKey?: DataKey<any>;\\\\n}\\\\ninterface InternalProps {\\\\n    content?: ContentType;\\\\n    iconSize?: number;\\\\n    iconType?: IconType;\\\\n    layout?: LayoutType;\\\\n    align?: HorizontalAlignmentType;\\\\n    verticalAlign?: VerticalAlignmentType;\\\\n    payload?: Array<Payload>;\\\\n    inactiveColor?: string;\\\\n    formatter?: Formatter;\\\\n    onMouseEnter?: (data: Payload, index: number, event: MouseEvent) => void;\\\\n    onMouseLeave?: (data: Payload, index: number, event: MouseEvent) => void;\\\\n    onClick?: (data: Payload, index: number, event: MouseEvent) => void;\\\\n}\\\\nexport type Props = InternalProps & Omit<PresentationAttributesAdaptChildEvent<any, ReactElement>, keyof InternalProps>;\\\\nexport declare class DefaultLegendContent extends PureComponent<Props> {\\\\n    static displayName: string;\\\\n    static defaultProps: {\\\\n        iconSize: number;\\\\n        layout: string;\\\\n        align: string;\\\\n        verticalAlign: string;\\\\n        inactiveColor: string;\\\\n    };\\\\n    renderIcon(data: Payload): React.JSX.Element;\\\\n    renderItems(): React.JSX.Element[];\\\\n    render(): React.JSX.Element;\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/component/DefaultTooltipContent.d.ts snapshot 1`] = `"\\"import React, { CSSProperties, ReactNode } from 'react';\\\\nexport type TooltipType = 'none';\\\\nexport type ValueType = number | string | Array<number | string>;\\\\nexport type NameType = number | string;\\\\nexport type Formatter<TValue extends ValueType, TName extends NameType> = (value: TValue, name: TName, item: Payload<TValue, TName>, index: number, payload: Array<Payload<TValue, TName>>) => [React.ReactNode, TName] | React.ReactNode;\\\\nexport interface Payload<TValue extends ValueType, TName extends NameType> {\\\\n    type?: TooltipType;\\\\n    color?: string;\\\\n    formatter?: Formatter<TValue, TName>;\\\\n    name?: TName;\\\\n    value?: TValue;\\\\n    unit?: ReactNode;\\\\n    dataKey?: string | number;\\\\n    payload?: any;\\\\n    chartType?: string;\\\\n    stroke?: string;\\\\n    strokeDasharray?: string | number;\\\\n    strokeWidth?: number | string;\\\\n    className?: string;\\\\n    hide?: boolean;\\\\n}\\\\nexport interface Props<TValue extends ValueType, TName extends NameType> {\\\\n    separator?: string;\\\\n    wrapperClassName?: string;\\\\n    labelClassName?: string;\\\\n    formatter?: Formatter<TValue, TName>;\\\\n    contentStyle?: CSSProperties;\\\\n    itemStyle?: CSSProperties;\\\\n    labelStyle?: CSSProperties;\\\\n    labelFormatter?: (label: any, payload: Array<Payload<TValue, TName>>) => ReactNode;\\\\n    label?: any;\\\\n    payload?: Array<Payload<TValue, TName>>;\\\\n    itemSorter?: (item: Payload<TValue, TName>) => number | string;\\\\n}\\\\nexport declare const DefaultTooltipContent: <TValue extends ValueType, TName extends NameType>(props: Props<TValue, TName>) => React.JSX.Element;\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/component/Label.d.ts snapshot 1`] = `"\\"import React, { ReactNode, ReactElement, SVGProps } from 'react';\\\\nimport { ViewBox } from '../util/types';\\\\nexport type ContentType = ReactElement | ((props: Props) => ReactNode);\\\\nexport type LabelPosition = 'top' | 'left' | 'right' | 'bottom' | 'inside' | 'outside' | 'insideLeft' | 'insideRight' | 'insideTop' | 'insideBottom' | 'insideTopLeft' | 'insideBottomLeft' | 'insideTopRight' | 'insideBottomRight' | 'insideStart' | 'insideEnd' | 'end' | 'center' | 'centerTop' | 'centerBottom' | 'middle' | {\\\\n    x?: number;\\\\n    y?: number;\\\\n};\\\\ninterface LabelProps {\\\\n    viewBox?: ViewBox;\\\\n    parentViewBox?: ViewBox;\\\\n    formatter?: Function;\\\\n    value?: number | string;\\\\n    offset?: number;\\\\n    position?: LabelPosition;\\\\n    children?: ReactNode;\\\\n    className?: string;\\\\n    content?: ContentType;\\\\n    textBreakAll?: boolean;\\\\n    angle?: number;\\\\n    index?: number;\\\\n}\\\\nexport type Props = Omit<SVGProps<SVGTextElement>, 'viewBox'> & LabelProps;\\\\nexport type ImplicitLabelType = boolean | string | number | ReactElement<SVGElement> | ((props: any) => ReactElement<SVGElement>) | Props;\\\\nexport declare function Label({ offset, ...restProps }: Props): React.JSX.Element;\\\\nexport declare namespace Label {\\\\n    var displayName: string;\\\\n    var parseViewBox: (props: any) => ViewBox;\\\\n    var renderCallByParent: (parentProps: {\\\\n        children?: React.ReactNode;\\\\n        label?: unknown;\\\\n    }, viewBox?: ViewBox, checkPropsLabel?: boolean) => React.ReactElement<any, string | React.JSXElementConstructor<any>>[];\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/component/LabelList.d.ts snapshot 1`] = `"\\"import React, { ReactElement, SVGProps } from 'react';\\\\nimport { ContentType, Props as LabelProps, LabelPosition } from './Label';\\\\nimport { DataKey, ViewBox } from '../util/types';\\\\ninterface Data {\\\\n    value?: number | string | Array<number | string>;\\\\n    payload?: any;\\\\n    parentViewBox?: ViewBox;\\\\n}\\\\ninterface LabelListProps<T extends Data> {\\\\n    id?: string;\\\\n    data?: Array<T>;\\\\n    valueAccessor?: Function;\\\\n    clockWise?: boolean;\\\\n    dataKey?: DataKey<T>;\\\\n    content?: ContentType;\\\\n    textBreakAll?: boolean;\\\\n    position?: LabelPosition;\\\\n    offset?: LabelProps['offset'];\\\\n    angle?: number;\\\\n    formatter?: Function;\\\\n}\\\\nexport type Props<T extends Data> = SVGProps<SVGTextElement> & LabelListProps<T>;\\\\nexport type ImplicitLabelListType<T extends Data> = boolean | ReactElement<SVGElement> | ((props: any) => ReactElement<SVGElement>) | Props<T>;\\\\nexport declare function LabelList<T extends Data>({ valueAccessor, ...restProps }: Props<T>): React.JSX.Element;\\\\nexport declare namespace LabelList {\\\\n    var displayName: string;\\\\n    var renderCallByParent: <T extends Data>(parentProps: {\\\\n        children?: React.ReactNode;\\\\n        label?: unknown;\\\\n    }, data: T[], checkPropsLabel?: boolean) => React.JSX.Element[];\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/component/Legend.d.ts snapshot 1`] = `"\\"import React, { PureComponent, CSSProperties } from 'react';\\\\nimport { Payload, Props as DefaultProps } from './DefaultLegendContent';\\\\nimport { LayoutType } from '../util/types';\\\\nimport { UniqueOption } from '../util/payload/getUniqPayload';\\\\nexport type Props = DefaultProps & {\\\\n    wrapperStyle?: CSSProperties;\\\\n    chartWidth?: number;\\\\n    chartHeight?: number;\\\\n    width?: number;\\\\n    height?: number;\\\\n    margin?: {\\\\n        top?: number;\\\\n        left?: number;\\\\n        bottom?: number;\\\\n        right?: number;\\\\n    };\\\\n    payloadUniqBy?: UniqueOption<Payload>;\\\\n    onBBoxUpdate?: (box: DOMRect | null) => void;\\\\n};\\\\ninterface State {\\\\n    boxWidth: number;\\\\n    boxHeight: number;\\\\n}\\\\nexport declare class Legend extends PureComponent<Props, State> {\\\\n    static displayName: string;\\\\n    static defaultProps: {\\\\n        iconSize: number;\\\\n        layout: string;\\\\n        align: string;\\\\n        verticalAlign: string;\\\\n    };\\\\n    private wrapperNode;\\\\n    static getWithHeight(item: {\\\\n        props: {\\\\n            layout?: LayoutType;\\\\n            height?: number;\\\\n            width?: number;\\\\n        };\\\\n    }, chartWidth: number): null | {\\\\n        height: number;\\\\n    } | {\\\\n        width: number;\\\\n    };\\\\n    lastBoundingBox: {\\\\n        width: number;\\\\n        height: number;\\\\n    };\\\\n    componentDidMount(): void;\\\\n    componentDidUpdate(): void;\\\\n    getBBox(): DOMRect;\\\\n    private updateBBox;\\\\n    private getBBoxSnapshot;\\\\n    private getDefaultPosition;\\\\n    render(): React.JSX.Element;\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/component/ResponsiveContainer.d.ts snapshot 1`] = `"\\"import React, { ReactElement, CSSProperties } from 'react';\\\\nexport interface Props {\\\\n    aspect?: number;\\\\n    width?: string | number;\\\\n    height?: string | number;\\\\n    minWidth?: string | number;\\\\n    minHeight?: string | number;\\\\n    initialDimension?: {\\\\n        width: number;\\\\n        height: number;\\\\n    };\\\\n    maxHeight?: number;\\\\n    children: ReactElement;\\\\n    debounce?: number;\\\\n    id?: string | number;\\\\n    className?: string | number;\\\\n    style?: Omit<CSSProperties, keyof Props>;\\\\n    onResize?: (width: number, height: number) => void;\\\\n}\\\\nexport declare const ResponsiveContainer: React.ForwardRefExoticComponent<Props & React.RefAttributes<HTMLDivElement | {\\\\n    current: HTMLDivElement;\\\\n}>>;\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/component/Text.d.ts snapshot 1`] = `"\\"import React, { CSSProperties, SVGProps } from 'react';\\\\ninterface TextProps {\\\\n    scaleToFit?: boolean;\\\\n    angle?: number;\\\\n    textAnchor?: 'start' | 'middle' | 'end' | 'inherit';\\\\n    verticalAnchor?: 'start' | 'middle' | 'end';\\\\n    style?: CSSProperties;\\\\n    lineHeight?: number | string;\\\\n    breakAll?: boolean;\\\\n    children?: string | number;\\\\n    maxLines?: number;\\\\n}\\\\nexport type Props = Omit<SVGProps<SVGTextElement>, 'textAnchor' | 'verticalAnchor'> & TextProps;\\\\nexport declare const Text: ({ x: propsX, y: propsY, lineHeight, capHeight, scaleToFit, textAnchor, verticalAnchor, fill, ...props }: Props) => React.JSX.Element;\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/component/Tooltip.d.ts snapshot 1`] = `"\\"import React, { PureComponent, CSSProperties, ReactNode, ReactElement, SVGProps } from 'react';\\\\nimport { ValueType, NameType, Payload, Props as ToltipContentProps } from './DefaultTooltipContent';\\\\nimport { UniqueOption } from '../util/payload/getUniqPayload';\\\\nimport { AllowInDimension, AnimationDuration, AnimationTiming, CartesianViewBox, Coordinate } from '../util/types';\\\\nexport type ContentType<TValue extends ValueType, TName extends NameType> = ReactElement | ((props: TooltipProps<TValue, TName>) => ReactNode);\\\\nexport type TooltipProps<TValue extends ValueType, TName extends NameType> = ToltipContentProps<TValue, TName> & {\\\\n    active?: boolean | undefined;\\\\n    includeHidden?: boolean | undefined;\\\\n    allowEscapeViewBox?: AllowInDimension;\\\\n    animationDuration?: AnimationDuration;\\\\n    animationEasing?: AnimationTiming;\\\\n    content?: ContentType<TValue, TName>;\\\\n    coordinate?: Partial<Coordinate>;\\\\n    cursor?: boolean | ReactElement | SVGProps<SVGElement>;\\\\n    filterNull?: boolean;\\\\n    defaultIndex?: number;\\\\n    isAnimationActive?: boolean;\\\\n    offset?: number;\\\\n    payloadUniqBy?: UniqueOption<Payload<TValue, TName>>;\\\\n    position?: Partial<Coordinate>;\\\\n    reverseDirection?: AllowInDimension;\\\\n    shared?: boolean;\\\\n    trigger?: 'hover' | 'click';\\\\n    useTranslate3d?: boolean;\\\\n    viewBox?: CartesianViewBox;\\\\n    wrapperStyle?: CSSProperties;\\\\n};\\\\nexport declare class Tooltip<TValue extends ValueType, TName extends NameType> extends PureComponent<TooltipProps<TValue, TName>> {\\\\n    static displayName: string;\\\\n    static defaultProps: {\\\\n        allowEscapeViewBox: {\\\\n            x: boolean;\\\\n            y: boolean;\\\\n        };\\\\n        animationDuration: number;\\\\n        animationEasing: string;\\\\n        contentStyle: {};\\\\n        coordinate: {\\\\n            x: number;\\\\n            y: number;\\\\n        };\\\\n        cursor: boolean;\\\\n        cursorStyle: {};\\\\n        filterNull: boolean;\\\\n        isAnimationActive: boolean;\\\\n        itemStyle: {};\\\\n        labelStyle: {};\\\\n        offset: number;\\\\n        reverseDirection: {\\\\n            x: boolean;\\\\n            y: boolean;\\\\n        };\\\\n        separator: string;\\\\n        trigger: string;\\\\n        useTranslate3d: boolean;\\\\n        viewBox: {\\\\n            x: number;\\\\n            y: number;\\\\n            height: number;\\\\n            width: number;\\\\n        };\\\\n        wrapperStyle: {};\\\\n    };\\\\n    render(): React.JSX.Element;\\\\n}\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/component/TooltipBoundingBox.d.ts snapshot 1`] = `"\\"import React, { CSSProperties, PureComponent, ReactNode } from 'react';\\\\nimport { AllowInDimension, AnimationDuration, AnimationTiming, CartesianViewBox, Coordinate } from '../util/types';\\\\nexport type TooltipBoundingBoxProps = {\\\\n    active: boolean;\\\\n    allowEscapeViewBox: AllowInDimension;\\\\n    animationDuration: AnimationDuration;\\\\n    animationEasing: AnimationTiming;\\\\n    children: ReactNode;\\\\n    coordinate: Partial<Coordinate>;\\\\n    hasPayload: boolean;\\\\n    isAnimationActive: boolean;\\\\n    offset: number;\\\\n    position: Partial<Coordinate>;\\\\n    reverseDirection: AllowInDimension;\\\\n    useTranslate3d: boolean;\\\\n    viewBox: CartesianViewBox;\\\\n    wrapperStyle: CSSProperties;\\\\n};\\\\ntype State = {\\\\n    dismissed: boolean;\\\\n    dismissedAtCoordinate: Coordinate;\\\\n};\\\\nexport declare class TooltipBoundingBox extends PureComponent<TooltipBoundingBoxProps, State> {\\\\n    state: {\\\\n        dismissed: boolean;\\\\n        dismissedAtCoordinate: {\\\\n            x: number;\\\\n            y: number;\\\\n        };\\\\n    };\\\\n    lastBoundingBox: {\\\\n        width: number;\\\\n        height: number;\\\\n    };\\\\n    private wrapperNode;\\\\n    updateBBox(): void;\\\\n    componentDidMount(): void;\\\\n    componentWillUnmount(): void;\\\\n    componentDidUpdate(): void;\\\\n    handleKeyDown: (event: KeyboardEvent) => void;\\\\n    render(): React.JSX.Element;\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/container/Layer.d.ts snapshot 1`] = `"\\"import React, { ReactNode, SVGProps } from 'react';\\\\ninterface LayerProps {\\\\n    className?: string;\\\\n    children?: ReactNode;\\\\n}\\\\nexport type Props = SVGProps<SVGGElement> & LayerProps;\\\\nexport declare const Layer: React.ForwardRefExoticComponent<Pick<React.SVGProps<SVGGElement> & LayerProps, \\\\\\"string\\\\\\" | \\\\\\"ideographic\\\\\\" | \\\\\\"alphabetic\\\\\\" | \\\\\\"hanging\\\\\\" | \\\\\\"mathematical\\\\\\" | \\\\\\"className\\\\\\" | \\\\\\"color\\\\\\" | \\\\\\"height\\\\\\" | \\\\\\"id\\\\\\" | \\\\\\"lang\\\\\\" | \\\\\\"max\\\\\\" | \\\\\\"media\\\\\\" | \\\\\\"method\\\\\\" | \\\\\\"min\\\\\\" | \\\\\\"name\\\\\\" | \\\\\\"style\\\\\\" | \\\\\\"target\\\\\\" | \\\\\\"type\\\\\\" | \\\\\\"width\\\\\\" | \\\\\\"role\\\\\\" | \\\\\\"tabIndex\\\\\\" | \\\\\\"crossOrigin\\\\\\" | \\\\\\"accentHeight\\\\\\" | \\\\\\"accumulate\\\\\\" | \\\\\\"additive\\\\\\" | \\\\\\"alignmentBaseline\\\\\\" | \\\\\\"allowReorder\\\\\\" | \\\\\\"amplitude\\\\\\" | \\\\\\"arabicForm\\\\\\" | \\\\\\"ascent\\\\\\" | \\\\\\"attributeName\\\\\\" | \\\\\\"attributeType\\\\\\" | \\\\\\"autoReverse\\\\\\" | \\\\\\"azimuth\\\\\\" | \\\\\\"baseFrequency\\\\\\" | \\\\\\"baselineShift\\\\\\" | \\\\\\"baseProfile\\\\\\" | \\\\\\"bbox\\\\\\" | \\\\\\"begin\\\\\\" | \\\\\\"bias\\\\\\" | \\\\\\"by\\\\\\" | \\\\\\"calcMode\\\\\\" | \\\\\\"capHeight\\\\\\" | \\\\\\"clip\\\\\\" | \\\\\\"clipPath\\\\\\" | \\\\\\"clipPathUnits\\\\\\" | \\\\\\"clipRule\\\\\\" | \\\\\\"colorInterpolation\\\\\\" | \\\\\\"colorInterpolationFilters\\\\\\" | \\\\\\"colorProfile\\\\\\" | \\\\\\"colorRendering\\\\\\" | \\\\\\"contentScriptType\\\\\\" | \\\\\\"contentStyleType\\\\\\" | \\\\\\"cursor\\\\\\" | \\\\\\"cx\\\\\\" | \\\\\\"cy\\\\\\" | \\\\\\"d\\\\\\" | \\\\\\"decelerate\\\\\\" | \\\\\\"descent\\\\\\" | \\\\\\"diffuseConstant\\\\\\" | \\\\\\"direction\\\\\\" | \\\\\\"display\\\\\\" | \\\\\\"divisor\\\\\\" | \\\\\\"dominantBaseline\\\\\\" | \\\\\\"dur\\\\\\" | \\\\\\"dx\\\\\\" | \\\\\\"dy\\\\\\" | \\\\\\"edgeMode\\\\\\" | \\\\\\"elevation\\\\\\" | \\\\\\"enableBackground\\\\\\" | \\\\\\"end\\\\\\" | \\\\\\"exponent\\\\\\" | \\\\\\"externalResourcesRequired\\\\\\" | \\\\\\"fill\\\\\\" | \\\\\\"fillOpacity\\\\\\" | \\\\\\"fillRule\\\\\\" | \\\\\\"filter\\\\\\" | \\\\\\"filterRes\\\\\\" | \\\\\\"filterUnits\\\\\\" | \\\\\\"floodColor\\\\\\" | \\\\\\"floodOpacity\\\\\\" | \\\\\\"focusable\\\\\\" | \\\\\\"fontFamily\\\\\\" | \\\\\\"fontSize\\\\\\" | \\\\\\"fontSizeAdjust\\\\\\" | \\\\\\"fontStretch\\\\\\" | \\\\\\"fontStyle\\\\\\" | \\\\\\"fontVariant\\\\\\" | \\\\\\"fontWeight\\\\\\" | \\\\\\"format\\\\\\" | \\\\\\"fr\\\\\\" | \\\\\\"from\\\\\\" | \\\\\\"fx\\\\\\" | \\\\\\"fy\\\\\\" | \\\\\\"g1\\\\\\" | \\\\\\"g2\\\\\\" | \\\\\\"glyphName\\\\\\" | \\\\\\"glyphOrientationHorizontal\\\\\\" | \\\\\\"glyphOrientationVertical\\\\\\" | \\\\\\"glyphRef\\\\\\" | \\\\\\"gradientTransform\\\\\\" | \\\\\\"gradientUnits\\\\\\" | \\\\\\"horizAdvX\\\\\\" | \\\\\\"horizOriginX\\\\\\" | \\\\\\"href\\\\\\" | \\\\\\"imageRendering\\\\\\" | \\\\\\"in2\\\\\\" | \\\\\\"in\\\\\\" | \\\\\\"intercept\\\\\\" | \\\\\\"k1\\\\\\" | \\\\\\"k2\\\\\\" | \\\\\\"k3\\\\\\" | \\\\\\"k4\\\\\\" | \\\\\\"k\\\\\\" | \\\\\\"kernelMatrix\\\\\\" | \\\\\\"kernelUnitLength\\\\\\" | \\\\\\"kerning\\\\\\" | \\\\\\"keyPoints\\\\\\" | \\\\\\"keySplines\\\\\\" | \\\\\\"keyTimes\\\\\\" | \\\\\\"lengthAdjust\\\\\\" | \\\\\\"letterSpacing\\\\\\" | \\\\\\"lightingColor\\\\\\" | \\\\\\"limitingConeAngle\\\\\\" | \\\\\\"local\\\\\\" | \\\\\\"markerEnd\\\\\\" | \\\\\\"markerHeight\\\\\\" | \\\\\\"markerMid\\\\\\" | \\\\\\"markerStart\\\\\\" | \\\\\\"markerUnits\\\\\\" | \\\\\\"markerWidth\\\\\\" | \\\\\\"mask\\\\\\" | \\\\\\"maskContentUnits\\\\\\" | \\\\\\"maskUnits\\\\\\" | \\\\\\"mode\\\\\\" | \\\\\\"numOctaves\\\\\\" | \\\\\\"offset\\\\\\" | \\\\\\"opacity\\\\\\" | \\\\\\"operator\\\\\\" | \\\\\\"order\\\\\\" | \\\\\\"orient\\\\\\" | \\\\\\"orientation\\\\\\" | \\\\\\"origin\\\\\\" | \\\\\\"overflow\\\\\\" | \\\\\\"overlinePosition\\\\\\" | \\\\\\"overlineThickness\\\\\\" | \\\\\\"paintOrder\\\\\\" | \\\\\\"panose1\\\\\\" | \\\\\\"path\\\\\\" | \\\\\\"pathLength\\\\\\" | \\\\\\"patternContentUnits\\\\\\" | \\\\\\"patternTransform\\\\\\" | \\\\\\"patternUnits\\\\\\" | \\\\\\"pointerEvents\\\\\\" | \\\\\\"points\\\\\\" | \\\\\\"pointsAtX\\\\\\" | \\\\\\"pointsAtY\\\\\\" | \\\\\\"pointsAtZ\\\\\\" | \\\\\\"preserveAlpha\\\\\\" | \\\\\\"preserveAspectRatio\\\\\\" | \\\\\\"primitiveUnits\\\\\\" | \\\\\\"r\\\\\\" | \\\\\\"radius\\\\\\" | \\\\\\"refX\\\\\\" | \\\\\\"refY\\\\\\" | \\\\\\"renderingIntent\\\\\\" | \\\\\\"repeatCount\\\\\\" | \\\\\\"repeatDur\\\\\\" | \\\\\\"requiredExtensions\\\\\\" | \\\\\\"requiredFeatures\\\\\\" | \\\\\\"restart\\\\\\" | \\\\\\"result\\\\\\" | \\\\\\"rotate\\\\\\" | \\\\\\"rx\\\\\\" | \\\\\\"ry\\\\\\" | \\\\\\"scale\\\\\\" | \\\\\\"seed\\\\\\" | \\\\\\"shapeRendering\\\\\\" | \\\\\\"slope\\\\\\" | \\\\\\"spacing\\\\\\" | \\\\\\"specularConstant\\\\\\" | \\\\\\"specularExponent\\\\\\" | \\\\\\"speed\\\\\\" | \\\\\\"spreadMethod\\\\\\" | \\\\\\"startOffset\\\\\\" | \\\\\\"stdDeviation\\\\\\" | \\\\\\"stemh\\\\\\" | \\\\\\"stemv\\\\\\" | \\\\\\"stitchTiles\\\\\\" | \\\\\\"stopColor\\\\\\" | \\\\\\"stopOpacity\\\\\\" | \\\\\\"strikethroughPosition\\\\\\" | \\\\\\"strikethroughThickness\\\\\\" | \\\\\\"stroke\\\\\\" | \\\\\\"strokeDasharray\\\\\\" | \\\\\\"strokeDashoffset\\\\\\" | \\\\\\"strokeLinecap\\\\\\" | \\\\\\"strokeLinejoin\\\\\\" | \\\\\\"strokeMiterlimit\\\\\\" | \\\\\\"strokeOpacity\\\\\\" | \\\\\\"strokeWidth\\\\\\" | \\\\\\"surfaceScale\\\\\\" | \\\\\\"systemLanguage\\\\\\" | \\\\\\"tableValues\\\\\\" | \\\\\\"targetX\\\\\\" | \\\\\\"targetY\\\\\\" | \\\\\\"textAnchor\\\\\\" | \\\\\\"textDecoration\\\\\\" | \\\\\\"textLength\\\\\\" | \\\\\\"textRendering\\\\\\" | \\\\\\"to\\\\\\" | \\\\\\"transform\\\\\\" | \\\\\\"u1\\\\\\" | \\\\\\"u2\\\\\\" | \\\\\\"underlinePosition\\\\\\" | \\\\\\"underlineThickness\\\\\\" | \\\\\\"unicode\\\\\\" | \\\\\\"unicodeBidi\\\\\\" | \\\\\\"unicodeRange\\\\\\" | \\\\\\"unitsPerEm\\\\\\" | \\\\\\"vAlphabetic\\\\\\" | \\\\\\"values\\\\\\" | \\\\\\"vectorEffect\\\\\\" | \\\\\\"version\\\\\\" | \\\\\\"vertAdvY\\\\\\" | \\\\\\"vertOriginX\\\\\\" | \\\\\\"vertOriginY\\\\\\" | \\\\\\"vHanging\\\\\\" | \\\\\\"vIdeographic\\\\\\" | \\\\\\"viewBox\\\\\\" | \\\\\\"viewTarget\\\\\\" | \\\\\\"visibility\\\\\\" | \\\\\\"vMathematical\\\\\\" | \\\\\\"widths\\\\\\" | \\\\\\"wordSpacing\\\\\\" | \\\\\\"writingMode\\\\\\" | \\\\\\"x1\\\\\\" | \\\\\\"x2\\\\\\" | \\\\\\"x\\\\\\" | \\\\\\"xChannelSelector\\\\\\" | \\\\\\"xHeight\\\\\\" | \\\\\\"xlinkActuate\\\\\\" | \\\\\\"xlinkArcrole\\\\\\" | \\\\\\"xlinkHref\\\\\\" | \\\\\\"xlinkRole\\\\\\" | \\\\\\"xlinkShow\\\\\\" | \\\\\\"xlinkTitle\\\\\\" | \\\\\\"xlinkType\\\\\\" | \\\\\\"xmlBase\\\\\\" | \\\\\\"xmlLang\\\\\\" | \\\\\\"xmlns\\\\\\" | \\\\\\"xmlnsXlink\\\\\\" | \\\\\\"xmlSpace\\\\\\" | \\\\\\"y1\\\\\\" | \\\\\\"y2\\\\\\" | \\\\\\"y\\\\\\" | \\\\\\"yChannelSelector\\\\\\" | \\\\\\"z\\\\\\" | \\\\\\"zoomAndPan\\\\\\" | \\\\\\"aria-activedescendant\\\\\\" | \\\\\\"aria-atomic\\\\\\" | \\\\\\"aria-autocomplete\\\\\\" | \\\\\\"aria-busy\\\\\\" | \\\\\\"aria-checked\\\\\\" | \\\\\\"aria-colcount\\\\\\" | \\\\\\"aria-colindex\\\\\\" | \\\\\\"aria-colspan\\\\\\" | \\\\\\"aria-controls\\\\\\" | \\\\\\"aria-current\\\\\\" | \\\\\\"aria-describedby\\\\\\" | \\\\\\"aria-details\\\\\\" | \\\\\\"aria-disabled\\\\\\" | \\\\\\"aria-dropeffect\\\\\\" | \\\\\\"aria-errormessage\\\\\\" | \\\\\\"aria-expanded\\\\\\" | \\\\\\"aria-flowto\\\\\\" | \\\\\\"aria-grabbed\\\\\\" | \\\\\\"aria-haspopup\\\\\\" | \\\\\\"aria-hidden\\\\\\" | \\\\\\"aria-invalid\\\\\\" | \\\\\\"aria-keyshortcuts\\\\\\" | \\\\\\"aria-label\\\\\\" | \\\\\\"aria-labelledby\\\\\\" | \\\\\\"aria-level\\\\\\" | \\\\\\"aria-live\\\\\\" | \\\\\\"aria-modal\\\\\\" | \\\\\\"aria-multiline\\\\\\" | \\\\\\"aria-multiselectable\\\\\\" | \\\\\\"aria-orientation\\\\\\" | \\\\\\"aria-owns\\\\\\" | \\\\\\"aria-placeholder\\\\\\" | \\\\\\"aria-posinset\\\\\\" | \\\\\\"aria-pressed\\\\\\" | \\\\\\"aria-readonly\\\\\\" | \\\\\\"aria-relevant\\\\\\" | \\\\\\"aria-required\\\\\\" | \\\\\\"aria-roledescription\\\\\\" | \\\\\\"aria-rowcount\\\\\\" | \\\\\\"aria-rowindex\\\\\\" | \\\\\\"aria-rowspan\\\\\\" | \\\\\\"aria-selected\\\\\\" | \\\\\\"aria-setsize\\\\\\" | \\\\\\"aria-sort\\\\\\" | \\\\\\"aria-valuemax\\\\\\" | \\\\\\"aria-valuemin\\\\\\" | \\\\\\"aria-valuenow\\\\\\" | \\\\\\"aria-valuetext\\\\\\" | \\\\\\"children\\\\\\" | \\\\\\"dangerouslySetInnerHTML\\\\\\" | \\\\\\"onCopy\\\\\\" | \\\\\\"onCopyCapture\\\\\\" | \\\\\\"onCut\\\\\\" | \\\\\\"onCutCapture\\\\\\" | \\\\\\"onPaste\\\\\\" | \\\\\\"onPasteCapture\\\\\\" | \\\\\\"onCompositionEnd\\\\\\" | \\\\\\"onCompositionEndCapture\\\\\\" | \\\\\\"onCompositionStart\\\\\\" | \\\\\\"onCompositionStartCapture\\\\\\" | \\\\\\"onCompositionUpdate\\\\\\" | \\\\\\"onCompositionUpdateCapture\\\\\\" | \\\\\\"onFocus\\\\\\" | \\\\\\"onFocusCapture\\\\\\" | \\\\\\"onBlur\\\\\\" | \\\\\\"onBlurCapture\\\\\\" | \\\\\\"onChange\\\\\\" | \\\\\\"onChangeCapture\\\\\\" | \\\\\\"onBeforeInput\\\\\\" | \\\\\\"onBeforeInputCapture\\\\\\" | \\\\\\"onInput\\\\\\" | \\\\\\"onInputCapture\\\\\\" | \\\\\\"onReset\\\\\\" | \\\\\\"onResetCapture\\\\\\" | \\\\\\"onSubmit\\\\\\" | \\\\\\"onSubmitCapture\\\\\\" | \\\\\\"onInvalid\\\\\\" | \\\\\\"onInvalidCapture\\\\\\" | \\\\\\"onLoad\\\\\\" | \\\\\\"onLoadCapture\\\\\\" | \\\\\\"onError\\\\\\" | \\\\\\"onErrorCapture\\\\\\" | \\\\\\"onKeyDown\\\\\\" | \\\\\\"onKeyDownCapture\\\\\\" | \\\\\\"onKeyPress\\\\\\" | \\\\\\"onKeyPressCapture\\\\\\" | \\\\\\"onKeyUp\\\\\\" | \\\\\\"onKeyUpCapture\\\\\\" | \\\\\\"onAbort\\\\\\" | \\\\\\"onAbortCapture\\\\\\" | \\\\\\"onCanPlay\\\\\\" | \\\\\\"onCanPlayCapture\\\\\\" | \\\\\\"onCanPlayThrough\\\\\\" | \\\\\\"onCanPlayThroughCapture\\\\\\" | \\\\\\"onDurationChange\\\\\\" | \\\\\\"onDurationChangeCapture\\\\\\" | \\\\\\"onEmptied\\\\\\" | \\\\\\"onEmptiedCapture\\\\\\" | \\\\\\"onEncrypted\\\\\\" | \\\\\\"onEncryptedCapture\\\\\\" | \\\\\\"onEnded\\\\\\" | \\\\\\"onEndedCapture\\\\\\" | \\\\\\"onLoadedData\\\\\\" | \\\\\\"onLoadedDataCapture\\\\\\" | \\\\\\"onLoadedMetadata\\\\\\" | \\\\\\"onLoadedMetadataCapture\\\\\\" | \\\\\\"onLoadStart\\\\\\" | \\\\\\"onLoadStartCapture\\\\\\" | \\\\\\"onPause\\\\\\" | \\\\\\"onPauseCapture\\\\\\" | \\\\\\"onPlay\\\\\\" | \\\\\\"onPlayCapture\\\\\\" | \\\\\\"onPlaying\\\\\\" | \\\\\\"onPlayingCapture\\\\\\" | \\\\\\"onProgress\\\\\\" | \\\\\\"onProgressCapture\\\\\\" | \\\\\\"onRateChange\\\\\\" | \\\\\\"onRateChangeCapture\\\\\\" | \\\\\\"onSeeked\\\\\\" | \\\\\\"onSeekedCapture\\\\\\" | \\\\\\"onSeeking\\\\\\" | \\\\\\"onSeekingCapture\\\\\\" | \\\\\\"onStalled\\\\\\" | \\\\\\"onStalledCapture\\\\\\" | \\\\\\"onSuspend\\\\\\" | \\\\\\"onSuspendCapture\\\\\\" | \\\\\\"onTimeUpdate\\\\\\" | \\\\\\"onTimeUpdateCapture\\\\\\" | \\\\\\"onVolumeChange\\\\\\" | \\\\\\"onVolumeChangeCapture\\\\\\" | \\\\\\"onWaiting\\\\\\" | \\\\\\"onWaitingCapture\\\\\\" | \\\\\\"onAuxClick\\\\\\" | \\\\\\"onAuxClickCapture\\\\\\" | \\\\\\"onClick\\\\\\" | \\\\\\"onClickCapture\\\\\\" | \\\\\\"onContextMenu\\\\\\" | \\\\\\"onContextMenuCapture\\\\\\" | \\\\\\"onDoubleClick\\\\\\" | \\\\\\"onDoubleClickCapture\\\\\\" | \\\\\\"onDrag\\\\\\" | \\\\\\"onDragCapture\\\\\\" | \\\\\\"onDragEnd\\\\\\" | \\\\\\"onDragEndCapture\\\\\\" | \\\\\\"onDragEnter\\\\\\" | \\\\\\"onDragEnterCapture\\\\\\" | \\\\\\"onDragExit\\\\\\" | \\\\\\"onDragExitCapture\\\\\\" | \\\\\\"onDragLeave\\\\\\" | \\\\\\"onDragLeaveCapture\\\\\\" | \\\\\\"onDragOver\\\\\\" | \\\\\\"onDragOverCapture\\\\\\" | \\\\\\"onDragStart\\\\\\" | \\\\\\"onDragStartCapture\\\\\\" | \\\\\\"onDrop\\\\\\" | \\\\\\"onDropCapture\\\\\\" | \\\\\\"onMouseDown\\\\\\" | \\\\\\"onMouseDownCapture\\\\\\" | \\\\\\"onMouseEnter\\\\\\" | \\\\\\"onMouseLeave\\\\\\" | \\\\\\"onMouseMove\\\\\\" | \\\\\\"onMouseMoveCapture\\\\\\" | \\\\\\"onMouseOut\\\\\\" | \\\\\\"onMouseOutCapture\\\\\\" | \\\\\\"onMouseOver\\\\\\" | \\\\\\"onMouseOverCapture\\\\\\" | \\\\\\"onMouseUp\\\\\\" | \\\\\\"onMouseUpCapture\\\\\\" | \\\\\\"onSelect\\\\\\" | \\\\\\"onSelectCapture\\\\\\" | \\\\\\"onTouchCancel\\\\\\" | \\\\\\"onTouchCancelCapture\\\\\\" | \\\\\\"onTouchEnd\\\\\\" | \\\\\\"onTouchEndCapture\\\\\\" | \\\\\\"onTouchMove\\\\\\" | \\\\\\"onTouchMoveCapture\\\\\\" | \\\\\\"onTouchStart\\\\\\" | \\\\\\"onTouchStartCapture\\\\\\" | \\\\\\"onPointerDown\\\\\\" | \\\\\\"onPointerDownCapture\\\\\\" | \\\\\\"onPointerMove\\\\\\" | \\\\\\"onPointerMoveCapture\\\\\\" | \\\\\\"onPointerUp\\\\\\" | \\\\\\"onPointerUpCapture\\\\\\" | \\\\\\"onPointerCancel\\\\\\" | \\\\\\"onPointerCancelCapture\\\\\\" | \\\\\\"onPointerEnter\\\\\\" | \\\\\\"onPointerEnterCapture\\\\\\" | \\\\\\"onPointerLeave\\\\\\" | \\\\\\"onPointerLeaveCapture\\\\\\" | \\\\\\"onPointerOver\\\\\\" | \\\\\\"onPointerOverCapture\\\\\\" | \\\\\\"onPointerOut\\\\\\" | \\\\\\"onPointerOutCapture\\\\\\" | \\\\\\"onGotPointerCapture\\\\\\" | \\\\\\"onGotPointerCaptureCapture\\\\\\" | \\\\\\"onLostPointerCapture\\\\\\" | \\\\\\"onLostPointerCaptureCapture\\\\\\" | \\\\\\"onScroll\\\\\\" | \\\\\\"onScrollCapture\\\\\\" | \\\\\\"onWheel\\\\\\" | \\\\\\"onWheelCapture\\\\\\" | \\\\\\"onAnimationStart\\\\\\" | \\\\\\"onAnimationStartCapture\\\\\\" | \\\\\\"onAnimationEnd\\\\\\" | \\\\\\"onAnimationEndCapture\\\\\\" | \\\\\\"onAnimationIteration\\\\\\" | \\\\\\"onAnimationIterationCapture\\\\\\" | \\\\\\"onTransitionEnd\\\\\\" | \\\\\\"onTransitionEndCapture\\\\\\" | \\\\\\"key\\\\\\"> & React.RefAttributes<unknown>>;\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/container/Surface.d.ts snapshot 1`] = `"\\"import React, { ReactNode, CSSProperties, SVGProps } from 'react';\\\\ninterface SurfaceProps {\\\\n    width: number;\\\\n    height: number;\\\\n    viewBox?: {\\\\n        x?: number;\\\\n        y?: number;\\\\n        width?: number;\\\\n        height?: number;\\\\n    };\\\\n    className?: string;\\\\n    style?: CSSProperties;\\\\n    children?: ReactNode;\\\\n    title?: string;\\\\n    desc?: string;\\\\n}\\\\nexport type Props = Omit<SVGProps<SVGSVGElement>, 'viewBox'> & SurfaceProps;\\\\nexport declare function Surface(props: Props): React.JSX.Element;\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/context/chartLayoutContext.d.ts snapshot 1`] = `"\\"import React, { ReactNode } from 'react';\\\\nimport { CartesianViewBox, ChartOffset, XAxisMap, YAxisMap } from '../util/types';\\\\nimport type { CategoricalChartState } from '../chart/types';\\\\nimport type { Props as XAxisProps } from '../cartesian/XAxis';\\\\nimport type { Props as YAxisProps } from '../cartesian/YAxis';\\\\nexport declare const XAxisContext: React.Context<XAxisMap>;\\\\nexport declare const YAxisContext: React.Context<YAxisMap>;\\\\nexport declare const ViewBoxContext: React.Context<CartesianViewBox>;\\\\nexport declare const OffsetContext: React.Context<ChartOffset>;\\\\nexport declare const ClipPathIdContext: React.Context<string>;\\\\nexport declare const ChartHeightContext: React.Context<number>;\\\\nexport declare const ChartWidthContext: React.Context<number>;\\\\nexport declare const ChartLayoutContextProvider: (props: {\\\\n    state: CategoricalChartState;\\\\n    children: ReactNode;\\\\n    clipPathId: string;\\\\n    width: number;\\\\n    height: number;\\\\n}) => React.JSX.Element;\\\\nexport declare const useClipPathId: () => string | undefined;\\\\nexport declare const useXAxisOrThrow: (xAxisId: string | number) => XAxisProps;\\\\nexport declare const useArbitraryXAxis: () => XAxisProps | undefined;\\\\nexport declare const useArbitraryYAxis: () => XAxisProps | undefined;\\\\nexport declare const useYAxisWithFiniteDomainOrRandom: () => YAxisProps | undefined;\\\\nexport declare const useYAxisOrThrow: (yAxisId: string | number) => YAxisProps;\\\\nexport declare const useViewBox: () => CartesianViewBox;\\\\nexport declare const useOffset: () => ChartOffset;\\\\nexport declare const useChartWidth: () => number;\\\\nexport declare const useChartHeight: () => number;\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/index.d.ts snapshot 1`] = `"\\"export { Surface } from './container/Surface';\\\\nexport type { Props as SurfaceProps } from './container/Surface';\\\\nexport { Layer } from './container/Layer';\\\\nexport type { Props as LayerProps } from './container/Layer';\\\\nexport { Legend } from './component/Legend';\\\\nexport type { Props as LegendProps } from './component/Legend';\\\\nexport { DefaultLegendContent } from './component/DefaultLegendContent';\\\\nexport type { Props as DefaultLegendContentProps } from './component/DefaultLegendContent';\\\\nexport { Tooltip } from './component/Tooltip';\\\\nexport type { TooltipProps } from './component/Tooltip';\\\\nexport { DefaultTooltipContent } from './component/DefaultTooltipContent';\\\\nexport type { Props as DefaultTooltipContentProps } from './component/DefaultTooltipContent';\\\\nexport { ResponsiveContainer } from './component/ResponsiveContainer';\\\\nexport type { Props as ResponsiveContainerProps } from './component/ResponsiveContainer';\\\\nexport { Cell } from './component/Cell';\\\\nexport type { Props as CellProps } from './component/Cell';\\\\nexport { Text } from './component/Text';\\\\nexport type { Props as TextProps } from './component/Text';\\\\nexport { Label } from './component/Label';\\\\nexport type { Props as LabelProps } from './component/Label';\\\\nexport { LabelList } from './component/LabelList';\\\\nexport type { Props as LabelListProps } from './component/LabelList';\\\\nexport { Customized } from './component/Customized';\\\\nexport type { Props as CustomizedProps } from './component/Customized';\\\\nexport { Sector } from './shape/Sector';\\\\nexport type { Props as SectorProps } from './shape/Sector';\\\\nexport { Curve } from './shape/Curve';\\\\nexport type { Props as CurveProps } from './shape/Curve';\\\\nexport { Rectangle } from './shape/Rectangle';\\\\nexport type { Props as RectangleProps } from './shape/Rectangle';\\\\nexport { Polygon } from './shape/Polygon';\\\\nexport type { Props as PolygonProps } from './shape/Polygon';\\\\nexport { Dot } from './shape/Dot';\\\\nexport type { Props as DotProps } from './shape/Dot';\\\\nexport { Cross } from './shape/Cross';\\\\nexport type { Props as CrossProps } from './shape/Cross';\\\\nexport { Symbols } from './shape/Symbols';\\\\nexport type { SymbolsProps } from './shape/Symbols';\\\\nexport { PolarGrid } from './polar/PolarGrid';\\\\nexport type { Props as PolarGridProps } from './polar/PolarGrid';\\\\nexport { PolarRadiusAxis } from './polar/PolarRadiusAxis';\\\\nexport type { Props as PolarRadiusAxisProps } from './polar/PolarRadiusAxis';\\\\nexport { PolarAngleAxis } from './polar/PolarAngleAxis';\\\\nexport type { Props as PolarAngleAxisProps } from './polar/PolarAngleAxis';\\\\nexport { Pie } from './polar/Pie';\\\\nexport type { Props as PieProps, PieLabel, PieLabelRenderProps } from './polar/Pie';\\\\nexport { Radar } from './polar/Radar';\\\\nexport type { Props as RadarProps } from './polar/Radar';\\\\nexport { RadialBar } from './polar/RadialBar';\\\\nexport type { RadialBarProps } from './polar/RadialBar';\\\\nexport { Brush } from './cartesian/Brush';\\\\nexport type { Props as BrushProps } from './cartesian/Brush';\\\\nexport { ReferenceLine } from './cartesian/ReferenceLine';\\\\nexport type { Props as ReferenceLineProps } from './cartesian/ReferenceLine';\\\\nexport { ReferenceDot } from './cartesian/ReferenceDot';\\\\nexport type { Props as ReferenceDotProps } from './cartesian/ReferenceDot';\\\\nexport { ReferenceArea } from './cartesian/ReferenceArea';\\\\nexport type { Props as ReferenceAreaProps } from './cartesian/ReferenceArea';\\\\nexport { CartesianAxis } from './cartesian/CartesianAxis';\\\\nexport type { Props as CartesianAxisProps } from './cartesian/CartesianAxis';\\\\nexport { CartesianGrid } from './cartesian/CartesianGrid';\\\\nexport type { Props as CartesianGridProps } from './cartesian/CartesianGrid';\\\\nexport { Line } from './cartesian/Line';\\\\nexport type { Props as LineProps } from './cartesian/Line';\\\\nexport { Area } from './cartesian/Area';\\\\nexport type { Props as AreaProps } from './cartesian/Area';\\\\nexport { Bar } from './cartesian/Bar';\\\\nexport type { Props as BarProps } from './cartesian/Bar';\\\\nexport { Scatter } from './cartesian/Scatter';\\\\nexport type { Props as ScatterProps } from './cartesian/Scatter';\\\\nexport { XAxis } from './cartesian/XAxis';\\\\nexport type { Props as XAxisProps } from './cartesian/XAxis';\\\\nexport { YAxis } from './cartesian/YAxis';\\\\nexport type { Props as YAxisProps } from './cartesian/YAxis';\\\\nexport { ZAxis } from './cartesian/ZAxis';\\\\nexport type { Props as ZAxisProps } from './cartesian/ZAxis';\\\\nexport { ErrorBar } from './cartesian/ErrorBar';\\\\nexport type { Props as ErrorBarProps } from './cartesian/ErrorBar';\\\\nexport { LineChart } from './chart/LineChart';\\\\nexport { BarChart } from './chart/BarChart';\\\\nexport { PieChart } from './chart/PieChart';\\\\nexport { Treemap } from './chart/Treemap';\\\\nexport type { Props as TreemapProps } from './chart/Treemap';\\\\nexport { Sankey } from './chart/Sankey';\\\\nexport { RadarChart } from './chart/RadarChart';\\\\nexport { ScatterChart } from './chart/ScatterChart';\\\\nexport { AreaChart } from './chart/AreaChart';\\\\nexport { RadialBarChart } from './chart/RadialBarChart';\\\\nexport { ComposedChart } from './chart/ComposedChart';\\\\nexport { SunburstChart } from './chart/SunburstChart';\\\\nexport { Funnel } from './numberAxis/Funnel';\\\\nexport type { FunnelProps } from './numberAxis/Funnel';\\\\nexport { FunnelChart } from './chart/FunnelChart';\\\\nexport { Trapezoid } from './shape/Trapezoid';\\\\nexport type { Props as TrapezoidProps } from './shape/Trapezoid';\\\\nexport { Global } from './util/Global';\\\\nexport type { LegendType } from './util/types';\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/numberAxis/Funnel.d.ts snapshot 1`] = `"\\"import React, { PureComponent } from 'react';\\\\nimport { Props as TrapezoidProps } from '../shape/Trapezoid';\\\\nimport { LegendType, TooltipType, AnimationTiming, ChartOffset, DataKey, PresentationAttributesAdaptChildEvent, AnimationDuration, ActiveShape } from '../util/types';\\\\nexport interface FunnelTrapezoidItem extends TrapezoidProps {\\\\n    value?: number | string;\\\\n    payload?: any;\\\\n    isActive: boolean;\\\\n}\\\\ninterface InternalFunnelProps {\\\\n    className?: string;\\\\n    dataKey: DataKey<any>;\\\\n    nameKey?: DataKey<any>;\\\\n    data?: any[];\\\\n    hide?: boolean;\\\\n    shape?: ActiveShape<FunnelTrapezoidItem, SVGPathElement>;\\\\n    activeShape?: ActiveShape<FunnelTrapezoidItem, SVGPathElement>;\\\\n    legendType?: LegendType;\\\\n    tooltipType?: TooltipType;\\\\n    activeIndex?: number | number[];\\\\n    lastShapeType?: 'triangle' | 'rectangle';\\\\n    reversed?: boolean;\\\\n    onAnimationStart?: () => void;\\\\n    onAnimationEnd?: () => void;\\\\n    isAnimationActive?: boolean;\\\\n    animateNewValues?: boolean;\\\\n    animationBegin?: number;\\\\n    animationDuration?: AnimationDuration;\\\\n    animationEasing?: AnimationTiming;\\\\n    id?: string;\\\\n    trapezoids?: FunnelTrapezoidItem[];\\\\n    animationId?: number;\\\\n}\\\\nexport type FunnelProps = PresentationAttributesAdaptChildEvent<any, SVGElement> & TrapezoidProps & InternalFunnelProps;\\\\ninterface State {\\\\n    readonly prevTrapezoids?: FunnelTrapezoidItem[];\\\\n    readonly curTrapezoids?: FunnelTrapezoidItem[];\\\\n    readonly prevAnimationId?: number;\\\\n    readonly isAnimationFinished?: boolean;\\\\n}\\\\nexport declare class Funnel extends PureComponent<FunnelProps, State> {\\\\n    static displayName: string;\\\\n    static defaultProps: {\\\\n        stroke: string;\\\\n        fill: string;\\\\n        legendType: string;\\\\n        labelLine: boolean;\\\\n        hide: boolean;\\\\n        isAnimationActive: boolean;\\\\n        animationBegin: number;\\\\n        animationDuration: number;\\\\n        animationEasing: string;\\\\n        nameKey: string;\\\\n        lastShapeType: string;\\\\n    };\\\\n    static getRealFunnelData: (item: Funnel) => any[];\\\\n    static getRealWidthHeight: (item: Funnel, offset: ChartOffset) => {\\\\n        realWidth: number;\\\\n        realHeight: number;\\\\n        offsetX: number;\\\\n        offsetY: number;\\\\n    };\\\\n    static getComposedData: ({ item, offset }: {\\\\n        item: Funnel;\\\\n        offset: ChartOffset;\\\\n    }) => {\\\\n        trapezoids: {\\\\n            payload: any;\\\\n            parentViewBox: {\\\\n                x: number;\\\\n                y: number;\\\\n                width: number;\\\\n                height: number;\\\\n            };\\\\n            labelViewBox: {\\\\n                x: number;\\\\n                y: number;\\\\n                width: number;\\\\n                height: number;\\\\n            };\\\\n            x: number;\\\\n            y: number;\\\\n            width: number;\\\\n            upperWidth: number;\\\\n            lowerWidth: number;\\\\n            height: number;\\\\n            name: any;\\\\n            val: any;\\\\n            tooltipPayload: {\\\\n                name: any;\\\\n                value: any;\\\\n                payload: any;\\\\n                dataKey: DataKey<any>;\\\\n                type: \\\\\\"none\\\\\\";\\\\n            }[];\\\\n            tooltipPosition: {\\\\n                x: number;\\\\n                y: number;\\\\n            };\\\\n        }[];\\\\n        data: any[];\\\\n    };\\\\n    state: State;\\\\n    static getDerivedStateFromProps(nextProps: FunnelProps, prevState: State): State;\\\\n    handleAnimationEnd: () => void;\\\\n    handleAnimationStart: () => void;\\\\n    isActiveIndex(i: number): boolean;\\\\n    renderTrapezoidsStatically(trapezoids: FunnelTrapezoidItem[]): React.JSX.Element[];\\\\n    renderTrapezoidsWithAnimation(): React.JSX.Element;\\\\n    renderTrapezoids(): React.JSX.Element | React.JSX.Element[];\\\\n    render(): React.JSX.Element;\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/polar/Pie.d.ts snapshot 1`] = `"\\"import React, { PureComponent, ReactElement, ReactNode, SVGProps } from 'react';\\\\nimport { Props as SectorProps } from '../shape/Sector';\\\\nimport { LegendType, TooltipType, AnimationTiming, Coordinate, ChartOffset, DataKey, PresentationAttributesAdaptChildEvent, AnimationDuration, ActiveShape } from '../util/types';\\\\ninterface PieDef {\\\\n    cx?: number | string;\\\\n    cy?: number | string;\\\\n    startAngle?: number;\\\\n    endAngle?: number;\\\\n    paddingAngle?: number;\\\\n    innerRadius?: number | string;\\\\n    outerRadius?: number | string;\\\\n    cornerRadius?: number | string;\\\\n}\\\\ntype PieLabelLine = ReactElement<SVGElement> | ((props: any) => ReactElement<SVGElement>) | SVGProps<SVGPathElement> | boolean;\\\\nexport type PieLabel<P = any> = ReactElement<SVGElement> | ((props: P) => ReactNode | ReactElement<SVGElement>) | (SVGProps<SVGTextElement> & {\\\\n    offsetRadius?: number;\\\\n}) | boolean;\\\\nexport type PieSectorDataItem = SectorProps & {\\\\n    percent?: number;\\\\n    name?: string | number;\\\\n    midAngle?: number;\\\\n    middleRadius?: number;\\\\n    tooltipPosition?: Coordinate;\\\\n    value?: number;\\\\n    paddingAngle?: number;\\\\n    dataKey?: string;\\\\n    payload?: any[];\\\\n};\\\\ninterface PieProps extends PieDef {\\\\n    className?: string;\\\\n    animationId?: number;\\\\n    dataKey: DataKey<any>;\\\\n    nameKey?: DataKey<any>;\\\\n    valueKey?: DataKey<any>;\\\\n    blendStroke?: boolean;\\\\n    minAngle?: number;\\\\n    legendType?: LegendType;\\\\n    tooltipType?: TooltipType;\\\\n    maxRadius?: number;\\\\n    hide?: boolean;\\\\n    data?: any[];\\\\n    sectors?: PieSectorDataItem[];\\\\n    activeShape?: ActiveShape<PieSectorDataItem>;\\\\n    inactiveShape?: ActiveShape<PieSectorDataItem>;\\\\n    labelLine?: PieLabelLine;\\\\n    label?: PieLabel;\\\\n    activeIndex?: number | number[];\\\\n    animationEasing?: AnimationTiming;\\\\n    isAnimationActive?: boolean;\\\\n    animationBegin?: number;\\\\n    animationDuration?: AnimationDuration;\\\\n    onAnimationEnd?: () => void;\\\\n    onAnimationStart?: () => void;\\\\n    id?: string;\\\\n    onMouseEnter?: (data: any, index: number, e: React.MouseEvent) => void;\\\\n    onMouseLeave?: (data: any, index: number, e: React.MouseEvent) => void;\\\\n    onClick?: (data: any, index: number, e: React.MouseEvent) => void;\\\\n    rootTabIndex?: number;\\\\n}\\\\nexport interface PieLabelRenderProps extends PieDef {\\\\n    name: string;\\\\n    percent?: number;\\\\n    stroke: string;\\\\n    index?: number;\\\\n    textAnchor: string;\\\\n    x: number;\\\\n    y: number;\\\\n    [key: string]: any;\\\\n}\\\\ninterface State {\\\\n    isAnimationFinished?: boolean;\\\\n    prevIsAnimationActive?: boolean;\\\\n    prevSectors?: PieSectorDataItem[];\\\\n    curSectors?: PieSectorDataItem[];\\\\n    prevAnimationId?: number;\\\\n    sectorToFocus?: number;\\\\n}\\\\nexport type Props = PresentationAttributesAdaptChildEvent<any, SVGElement> & PieProps;\\\\nexport declare class Pie extends PureComponent<Props, State> {\\\\n    pieRef: HTMLElement;\\\\n    sectorRefs: HTMLElement[];\\\\n    static displayName: string;\\\\n    static defaultProps: {\\\\n        stroke: string;\\\\n        fill: string;\\\\n        legendType: string;\\\\n        cx: string;\\\\n        cy: string;\\\\n        startAngle: number;\\\\n        endAngle: number;\\\\n        innerRadius: number;\\\\n        outerRadius: string;\\\\n        paddingAngle: number;\\\\n        labelLine: boolean;\\\\n        hide: boolean;\\\\n        minAngle: number;\\\\n        isAnimationActive: boolean;\\\\n        animationBegin: number;\\\\n        animationDuration: number;\\\\n        animationEasing: string;\\\\n        nameKey: string;\\\\n        blendStroke: boolean;\\\\n        rootTabIndex: number;\\\\n    };\\\\n    static parseDeltaAngle: (startAngle: number, endAngle: number) => number;\\\\n    static getRealPieData: (item: Pie) => any[];\\\\n    static parseCoordinateOfPie: (item: Pie, offset: ChartOffset) => {\\\\n        cx: number;\\\\n        cy: number;\\\\n        innerRadius: number;\\\\n        outerRadius: number;\\\\n        maxRadius: number;\\\\n    };\\\\n    static getComposedData: ({ item, offset }: {\\\\n        item: Pie;\\\\n        offset: ChartOffset;\\\\n    }) => Omit<Props, 'dataKey'>;\\\\n    constructor(props: Props);\\\\n    state: State;\\\\n    static getDerivedStateFromProps(nextProps: Props, prevState: State): State;\\\\n    static getTextAnchor(x: number, cx: number): \\\\\\"middle\\\\\\" | \\\\\\"start\\\\\\" | \\\\\\"end\\\\\\";\\\\n    id: string;\\\\n    isActiveIndex(i: number): boolean;\\\\n    hasActiveIndex(): number | boolean;\\\\n    handleAnimationEnd: () => void;\\\\n    handleAnimationStart: () => void;\\\\n    static renderLabelLineItem(option: PieLabelLine, props: any): React.JSX.Element;\\\\n    static renderLabelItem(option: PieLabel, props: any, value: any): React.JSX.Element;\\\\n    renderLabels(sectors: PieSectorDataItem[]): React.JSX.Element;\\\\n    renderSectorsStatically(sectors: PieSectorDataItem[]): React.JSX.Element[];\\\\n    renderSectorsWithAnimation(): React.JSX.Element;\\\\n    attachKeyboardHandlers(pieRef: HTMLElement): void;\\\\n    renderSectors(): React.JSX.Element | React.JSX.Element[];\\\\n    componentDidMount(): void;\\\\n    render(): React.JSX.Element;\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/polar/PolarAngleAxis.d.ts snapshot 1`] = `"\\"import React, { PureComponent } from 'react';\\\\nimport { BaseAxisProps, TickItem, PresentationAttributesAdaptChildEvent } from '../util/types';\\\\nexport interface PolarAngleAxisProps extends BaseAxisProps {\\\\n    angleAxisId?: string | number;\\\\n    cx?: number;\\\\n    cy?: number;\\\\n    radius?: number;\\\\n    axisLineType?: 'polygon' | 'circle';\\\\n    ticks?: TickItem[];\\\\n    orientation?: 'inner' | 'outer';\\\\n}\\\\nexport type Props = PresentationAttributesAdaptChildEvent<any, SVGTextElement> & PolarAngleAxisProps;\\\\nexport declare class PolarAngleAxis extends PureComponent<Props> {\\\\n    static displayName: string;\\\\n    static axisType: string;\\\\n    static defaultProps: {\\\\n        type: string;\\\\n        angleAxisId: number;\\\\n        scale: string;\\\\n        cx: number;\\\\n        cy: number;\\\\n        orientation: string;\\\\n        axisLine: boolean;\\\\n        tickLine: boolean;\\\\n        tickSize: number;\\\\n        tick: boolean;\\\\n        hide: boolean;\\\\n        allowDuplicatedCategory: boolean;\\\\n    };\\\\n    getTickLineCoord(data: TickItem): {\\\\n        x1: number;\\\\n        y1: number;\\\\n        x2: number;\\\\n        y2: number;\\\\n    };\\\\n    getTickTextAnchor(data: TickItem): string;\\\\n    renderAxisLine(): React.JSX.Element;\\\\n    static renderTickItem(option: PolarAngleAxisProps['tick'], props: any, value: string | number): React.JSX.Element;\\\\n    renderTicks(): React.JSX.Element;\\\\n    render(): React.JSX.Element;\\\\n}\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/polar/PolarGrid.d.ts snapshot 1`] = `"\\"import React, { SVGProps } from 'react';\\\\ninterface PolarGridProps {\\\\n    cx?: number;\\\\n    cy?: number;\\\\n    innerRadius?: number;\\\\n    outerRadius?: number;\\\\n    polarAngles?: number[];\\\\n    polarRadius?: number[];\\\\n    gridType?: 'polygon' | 'circle';\\\\n    radialLines?: boolean;\\\\n}\\\\nexport type Props = SVGProps<SVGPathElement> & PolarGridProps;\\\\nexport declare const PolarGrid: {\\\\n    ({ cx, cy, innerRadius, outerRadius, gridType, radialLines, ...props }: Props): React.JSX.Element;\\\\n    displayName: string;\\\\n};\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/polar/PolarRadiusAxis.d.ts snapshot 1`] = `"\\"import React, { PureComponent } from 'react';\\\\nimport { BaseAxisProps, TickItem, PresentationAttributesAdaptChildEvent } from '../util/types';\\\\nexport interface PolarRadiusAxisProps extends Omit<BaseAxisProps, 'unit'> {\\\\n    cx?: number;\\\\n    cy?: number;\\\\n    radiusAxisId?: string | number;\\\\n    angle?: number;\\\\n    orientation?: 'left' | 'right' | 'middle';\\\\n    ticks?: TickItem[];\\\\n    reversed?: boolean;\\\\n}\\\\nexport type Props = PresentationAttributesAdaptChildEvent<any, SVGElement> & PolarRadiusAxisProps;\\\\nexport declare class PolarRadiusAxis extends PureComponent<Props> {\\\\n    static displayName: string;\\\\n    static axisType: string;\\\\n    static defaultProps: {\\\\n        type: string;\\\\n        radiusAxisId: number;\\\\n        cx: number;\\\\n        cy: number;\\\\n        angle: number;\\\\n        orientation: string;\\\\n        stroke: string;\\\\n        axisLine: boolean;\\\\n        tick: boolean;\\\\n        tickCount: number;\\\\n        allowDataOverflow: boolean;\\\\n        scale: string;\\\\n        allowDuplicatedCategory: boolean;\\\\n    };\\\\n    getTickValueCoord({ coordinate }: TickItem): import(\\\\\\"../util/types\\\\\\").Coordinate;\\\\n    getTickTextAnchor(): string;\\\\n    getViewBox(): {\\\\n        cx: number;\\\\n        cy: number;\\\\n        startAngle: number;\\\\n        endAngle: number;\\\\n        innerRadius: number;\\\\n        outerRadius: number;\\\\n    };\\\\n    renderAxisLine(): React.JSX.Element;\\\\n    static renderTickItem(option: Props['tick'], props: any, value: string | number): React.JSX.Element;\\\\n    renderTicks(): React.JSX.Element;\\\\n    render(): React.JSX.Element;\\\\n}\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/polar/Radar.d.ts snapshot 1`] = `"\\"import React, { PureComponent, ReactElement, MouseEvent, SVGProps } from 'react';\\\\nimport { Props as DotProps } from '../shape/Dot';\\\\nimport { LegendType, TooltipType, AnimationTiming, DataKey, AnimationDuration } from '../util/types';\\\\nimport { Props as PolarAngleAxisProps } from './PolarAngleAxis';\\\\nimport { Props as PolarRadiusAxisProps } from './PolarRadiusAxis';\\\\ninterface RadarPoint {\\\\n    x: number;\\\\n    y: number;\\\\n    cx?: number;\\\\n    cy?: number;\\\\n    angle?: number;\\\\n    radius?: number;\\\\n    value?: number;\\\\n    payload?: any;\\\\n    name?: string;\\\\n}\\\\ntype RadarDot = ReactElement<SVGElement> | ((props: any) => ReactElement<SVGElement>) | DotProps | boolean;\\\\ninterface RadarProps {\\\\n    className?: string;\\\\n    dataKey: DataKey<any>;\\\\n    angleAxisId?: string | number;\\\\n    radiusAxisId?: string | number;\\\\n    points?: RadarPoint[];\\\\n    baseLinePoints?: RadarPoint[];\\\\n    isRange?: boolean;\\\\n    shape?: ReactElement<SVGElement> | ((props: any) => ReactElement<SVGElement>);\\\\n    activeDot?: RadarDot;\\\\n    dot?: RadarDot;\\\\n    legendType?: LegendType;\\\\n    tooltipType?: TooltipType;\\\\n    hide?: boolean;\\\\n    connectNulls?: boolean;\\\\n    label?: any;\\\\n    onAnimationStart?: () => void;\\\\n    onAnimationEnd?: () => void;\\\\n    animationBegin?: number;\\\\n    animationDuration?: AnimationDuration;\\\\n    isAnimationActive?: boolean;\\\\n    animationId?: number;\\\\n    animationEasing?: AnimationTiming;\\\\n    onMouseEnter?: (props: any, e: MouseEvent<SVGPolygonElement>) => void;\\\\n    onMouseLeave?: (props: any, e: MouseEvent<SVGPolygonElement>) => void;\\\\n}\\\\ntype RadiusAxis = PolarRadiusAxisProps & {\\\\n    scale: (value: any) => number;\\\\n};\\\\ntype AngleAxis = PolarAngleAxisProps & {\\\\n    scale: (value: any) => number;\\\\n};\\\\nexport type Props = Omit<SVGProps<SVGElement>, 'onMouseEnter' | 'onMouseLeave' | 'points'> & RadarProps;\\\\ninterface State {\\\\n    isAnimationFinished?: boolean;\\\\n    prevPoints?: RadarPoint[];\\\\n    curPoints?: RadarPoint[];\\\\n    prevAnimationId?: number;\\\\n}\\\\nexport declare class Radar extends PureComponent<Props, State> {\\\\n    static displayName: string;\\\\n    static defaultProps: {\\\\n        angleAxisId: number;\\\\n        radiusAxisId: number;\\\\n        hide: boolean;\\\\n        activeDot: boolean;\\\\n        dot: boolean;\\\\n        legendType: string;\\\\n        isAnimationActive: boolean;\\\\n        animationBegin: number;\\\\n        animationDuration: number;\\\\n        animationEasing: string;\\\\n    };\\\\n    static getComposedData: ({ radiusAxis, angleAxis, displayedData, dataKey, bandSize, }: {\\\\n        radiusAxis: RadiusAxis;\\\\n        angleAxis: AngleAxis;\\\\n        displayedData: any[];\\\\n        dataKey: RadarProps['dataKey'];\\\\n        bandSize: number;\\\\n    }) => {\\\\n        points: RadarPoint[];\\\\n        isRange: boolean;\\\\n        baseLinePoints: RadarPoint[];\\\\n    };\\\\n    state: State;\\\\n    static getDerivedStateFromProps(nextProps: Props, prevState: State): State;\\\\n    handleAnimationEnd: () => void;\\\\n    handleAnimationStart: () => void;\\\\n    handleMouseEnter: (e: MouseEvent<SVGPolygonElement>) => void;\\\\n    handleMouseLeave: (e: MouseEvent<SVGPolygonElement>) => void;\\\\n    static renderDotItem(option: RadarDot, props: any): React.JSX.Element;\\\\n    renderDots(points: RadarPoint[]): React.JSX.Element;\\\\n    renderPolygonStatically(points: RadarPoint[]): React.JSX.Element;\\\\n    renderPolygonWithAnimation(): React.JSX.Element;\\\\n    renderPolygon(): React.JSX.Element;\\\\n    render(): React.JSX.Element;\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/polar/RadialBar.d.ts snapshot 1`] = `"\\"import React, { PureComponent, ReactElement } from 'react';\\\\nimport { Props as SectorProps } from '../shape/Sector';\\\\nimport { ImplicitLabelListType } from '../component/LabelList';\\\\nimport { LegendType, TooltipType, AnimationTiming, TickItem, PresentationAttributesAdaptChildEvent, AnimationDuration, ActiveShape } from '../util/types';\\\\ntype RadialBarDataItem = SectorProps & {\\\\n    value?: any;\\\\n    payload?: any;\\\\n    background?: SectorProps;\\\\n};\\\\ntype RadialBarBackground = ActiveShape<SectorProps>;\\\\ninterface InternalRadialBarProps {\\\\n    animationId?: string | number;\\\\n    className?: string;\\\\n    angleAxisId?: string | number;\\\\n    radiusAxisId?: string | number;\\\\n    startAngle?: number;\\\\n    endAngle?: number;\\\\n    shape?: ActiveShape<SectorProps, SVGPathElement>;\\\\n    activeShape?: ActiveShape<SectorProps, SVGPathElement>;\\\\n    activeIndex?: number;\\\\n    dataKey: string | number | ((obj: any) => any);\\\\n    cornerRadius?: string | number;\\\\n    forceCornerRadius?: boolean;\\\\n    cornerIsExternal?: boolean;\\\\n    minPointSize?: number;\\\\n    maxBarSize?: number;\\\\n    data?: RadialBarDataItem[];\\\\n    legendType?: LegendType;\\\\n    tooltipType?: TooltipType;\\\\n    hide?: boolean;\\\\n    label?: ImplicitLabelListType<any>;\\\\n    stackId?: string | number;\\\\n    background?: RadialBarBackground;\\\\n    onAnimationStart?: () => void;\\\\n    onAnimationEnd?: () => void;\\\\n    isAnimationActive?: boolean;\\\\n    animationBegin?: number;\\\\n    animationDuration?: AnimationDuration;\\\\n    animationEasing?: AnimationTiming;\\\\n}\\\\nexport type RadialBarProps = PresentationAttributesAdaptChildEvent<any, SVGElement> & InternalRadialBarProps;\\\\ninterface State {\\\\n    readonly isAnimationFinished?: boolean;\\\\n    readonly prevData?: RadialBarDataItem[];\\\\n    readonly curData?: RadialBarDataItem[];\\\\n    readonly prevAnimationId?: string | number;\\\\n}\\\\nexport declare class RadialBar extends PureComponent<RadialBarProps, State> {\\\\n    static displayName: string;\\\\n    static defaultProps: {\\\\n        angleAxisId: number;\\\\n        radiusAxisId: number;\\\\n        minPointSize: number;\\\\n        hide: boolean;\\\\n        legendType: string;\\\\n        data: RadialBarDataItem[];\\\\n        isAnimationActive: boolean;\\\\n        animationBegin: number;\\\\n        animationDuration: number;\\\\n        animationEasing: string;\\\\n        forceCornerRadius: boolean;\\\\n        cornerIsExternal: boolean;\\\\n    };\\\\n    static getComposedData: ({ item, props, radiusAxis, radiusAxisTicks, angleAxis, angleAxisTicks, displayedData, dataKey, stackedData, barPosition, bandSize, dataStartIndex, }: {\\\\n        item: ReactElement;\\\\n        props: any;\\\\n        radiusAxis: any;\\\\n        radiusAxisTicks: Array<TickItem>;\\\\n        angleAxis: any;\\\\n        angleAxisTicks: Array<TickItem>;\\\\n        displayedData: any[];\\\\n        dataKey: RadialBarProps['dataKey'];\\\\n        stackedData?: any[];\\\\n        barPosition?: any[];\\\\n        bandSize?: number;\\\\n        dataStartIndex: number;\\\\n    }) => {\\\\n        data: any[];\\\\n        layout: any;\\\\n    };\\\\n    state: State;\\\\n    static getDerivedStateFromProps(nextProps: RadialBarProps, prevState: State): State;\\\\n    getDeltaAngle(): number;\\\\n    handleAnimationEnd: () => void;\\\\n    handleAnimationStart: () => void;\\\\n    renderSectorsStatically(sectors: SectorProps[]): React.JSX.Element[];\\\\n    renderSectorsWithAnimation(): React.JSX.Element;\\\\n    renderSectors(): React.JSX.Element | React.JSX.Element[];\\\\n    renderBackground(sectors?: RadialBarDataItem[]): React.JSX.Element[];\\\\n    render(): React.JSX.Element;\\\\n}\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/polar/types.d.ts snapshot 1`] = `"\\"import { Props as PolarAngleAxisProps } from './PolarAngleAxis';\\\\nimport { Props as PolarRadiusAxisProps } from './PolarRadiusAxis';\\\\nexport type AngleAxisProps = PolarAngleAxisProps & {\\\\n    scale: any;\\\\n};\\\\nexport type RadiusAxisProps = PolarRadiusAxisProps & {\\\\n    scale: any;\\\\n};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/shape/Cross.d.ts snapshot 1`] = `"\\"import React, { SVGProps } from 'react';\\\\ninterface CrossProps {\\\\n    x?: number;\\\\n    y?: number;\\\\n    width?: number;\\\\n    height?: number;\\\\n    top?: number;\\\\n    left?: number;\\\\n    className?: number;\\\\n}\\\\nexport type Props = SVGProps<SVGPathElement> & CrossProps;\\\\nexport declare const Cross: React.FC<Props>;\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/shape/Curve.d.ts snapshot 1`] = `"\\"import React from 'react';\\\\nimport { CurveFactory } from 'victory-vendor/d3-shape';\\\\nimport { LayoutType, PresentationAttributesWithProps } from '../util/types';\\\\nexport type CurveType = 'basis' | 'basisClosed' | 'basisOpen' | 'bumpX' | 'bumpY' | 'bump' | 'linear' | 'linearClosed' | 'natural' | 'monotoneX' | 'monotoneY' | 'monotone' | 'step' | 'stepBefore' | 'stepAfter' | CurveFactory;\\\\nexport interface Point {\\\\n    x: number;\\\\n    y: number;\\\\n}\\\\ninterface CurveProps {\\\\n    className?: string;\\\\n    type?: CurveType;\\\\n    layout?: LayoutType;\\\\n    baseLine?: number | Array<Point>;\\\\n    points?: Array<Point>;\\\\n    connectNulls?: boolean;\\\\n    path?: string;\\\\n    pathRef?: (ref: SVGPathElement) => void;\\\\n}\\\\nexport type Props = Omit<PresentationAttributesWithProps<CurveProps, SVGPathElement>, 'type' | 'points'> & CurveProps;\\\\ntype GetPathProps = Pick<Props, 'type' | 'points' | 'baseLine' | 'layout' | 'connectNulls'>;\\\\nexport declare const getPath: ({ type, points, baseLine, layout, connectNulls, }: GetPathProps) => string | null;\\\\nexport declare const Curve: React.FC<Props>;\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/shape/Dot.d.ts snapshot 1`] = `"\\"import React from 'react';\\\\nimport { PresentationAttributesWithProps } from '../util/types';\\\\ninterface DotProps {\\\\n    className?: string;\\\\n    cx?: number;\\\\n    cy?: number;\\\\n    r?: number;\\\\n    clipDot?: boolean;\\\\n}\\\\nexport type Props = PresentationAttributesWithProps<DotProps, SVGCircleElement> & DotProps;\\\\nexport declare const Dot: React.FC<Props>;\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/shape/Polygon.d.ts snapshot 1`] = `"\\"import React, { SVGProps } from 'react';\\\\nimport { Coordinate } from '../util/types';\\\\ninterface PolygonProps {\\\\n    className?: string;\\\\n    points?: Coordinate[];\\\\n    baseLinePoints?: Coordinate[];\\\\n    connectNulls?: boolean;\\\\n}\\\\nexport type Props = Omit<SVGProps<SVGPolygonElement>, 'points'> & PolygonProps;\\\\nexport declare const Polygon: React.FC<Props>;\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/shape/Rectangle.d.ts snapshot 1`] = `"\\"import React, { SVGProps } from 'react';\\\\nimport { AnimationDuration, AnimationTiming } from '../util/types';\\\\nexport type RectRadius = [number, number, number, number];\\\\ninterface RectangleProps {\\\\n    className?: string;\\\\n    x?: number;\\\\n    y?: number;\\\\n    width?: number;\\\\n    height?: number;\\\\n    radius?: number | RectRadius;\\\\n    isAnimationActive?: boolean;\\\\n    isUpdateAnimationActive?: boolean;\\\\n    animationBegin?: number;\\\\n    animationDuration?: AnimationDuration;\\\\n    animationEasing?: AnimationTiming;\\\\n}\\\\nexport declare const isInRectangle: (point: {\\\\n    x: number;\\\\n    y: number;\\\\n}, rect: {\\\\n    x: number;\\\\n    y: number;\\\\n    width: number;\\\\n    height: number;\\\\n}) => boolean;\\\\nexport type Props = Omit<SVGProps<SVGPathElement>, 'radius'> & RectangleProps;\\\\nexport declare const Rectangle: React.FC<Props>;\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/shape/Sector.d.ts snapshot 1`] = `"\\"import React, { SVGProps } from 'react';\\\\nimport { GeometrySector } from '../util/types';\\\\ninterface SectorProps extends GeometrySector {\\\\n    className?: string;\\\\n}\\\\nexport type Props = SVGProps<SVGPathElement> & SectorProps;\\\\nexport declare const Sector: React.FC<Props>;\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/shape/Symbols.d.ts snapshot 1`] = `"\\"import React, { SVGProps } from 'react';\\\\nimport { SymbolType as D3SymbolType } from 'victory-vendor/d3-shape';\\\\nimport { SymbolType } from '../util/types';\\\\ntype SizeType = 'area' | 'diameter';\\\\nexport interface InnerSymbolsProp {\\\\n    className?: string;\\\\n    type: SymbolType;\\\\n    cx?: number;\\\\n    cy?: number;\\\\n    size?: number;\\\\n    sizeType?: SizeType;\\\\n}\\\\nexport type SymbolsProps = SVGProps<SVGPathElement> & InnerSymbolsProp;\\\\nexport declare const Symbols: {\\\\n    ({ type, size, sizeType, ...rest }: SymbolsProps): React.JSX.Element;\\\\n    registerSymbol: (key: string, factory: D3SymbolType) => void;\\\\n};\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/shape/Trapezoid.d.ts snapshot 1`] = `"\\"import React, { SVGProps } from 'react';\\\\nimport { AnimationDuration, AnimationTiming } from '../util/types';\\\\ninterface TrapezoidProps {\\\\n    className?: string;\\\\n    x?: number;\\\\n    y?: number;\\\\n    upperWidth?: number;\\\\n    lowerWidth?: number;\\\\n    height?: number;\\\\n    isUpdateAnimationActive?: boolean;\\\\n    animationBegin?: number;\\\\n    animationDuration?: AnimationDuration;\\\\n    animationEasing?: AnimationTiming;\\\\n}\\\\nexport type Props = SVGProps<SVGPathElement> & TrapezoidProps;\\\\nexport declare const Trapezoid: React.FC<Props>;\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/ActiveShapeUtils.d.ts snapshot 1`] = `"\\"import React, { SVGProps } from 'react';\\\\nimport { GraphicalItem } from '../chart/generateCategoricalChart';\\\\ntype ShapeType = 'trapezoid' | 'rectangle' | 'sector' | 'symbols';\\\\nexport type ShapeProps<OptionType, ExtraProps, ShapePropsType> = {\\\\n    shapeType: ShapeType;\\\\n    option: OptionType;\\\\n    isActive: boolean;\\\\n    activeClassName?: string;\\\\n    propTransformer?: (option: OptionType, props: unknown) => ShapePropsType;\\\\n} & ExtraProps;\\\\nexport declare function getPropsFromShapeOption(option: unknown): SVGProps<SVGPathElement>;\\\\nexport declare function Shape<OptionType, ExtraProps, ShapePropsType>({ option, shapeType, propTransformer, activeClassName, isActive, ...props }: ShapeProps<OptionType, ExtraProps, ShapePropsType>): React.JSX.Element;\\\\ntype FunnelItem = {\\\\n    x: number;\\\\n    y: number;\\\\n    labelViewBox: {\\\\n        x: number;\\\\n        y: number;\\\\n    };\\\\n    tooltipPayload: Array<{\\\\n        payload: {\\\\n            payload: ShapeData;\\\\n        };\\\\n    }>;\\\\n};\\\\ntype PieItem = {\\\\n    startAngle: number;\\\\n    endAngle: number;\\\\n    tooltipPayload: Array<{\\\\n        payload: {\\\\n            payload: ShapeData;\\\\n        };\\\\n    }>;\\\\n};\\\\ntype ScatterItem = {\\\\n    x: number;\\\\n    y: number;\\\\n    z: number;\\\\n    payload?: ShapeData;\\\\n};\\\\ntype ShapeData = FunnelItem | PieItem | ScatterItem;\\\\ntype GetActiveShapeIndexForTooltip = {\\\\n    activeTooltipItem: ShapeData;\\\\n    graphicalItem: GraphicalItem;\\\\n    itemData: unknown[];\\\\n};\\\\nexport declare function isFunnel(graphicalItem: GraphicalItem, _item: unknown): _item is FunnelItem;\\\\nexport declare function isPie(graphicalItem: GraphicalItem, _item: unknown): _item is PieItem;\\\\nexport declare function isScatter(graphicalItem: GraphicalItem, _item: unknown): _item is ScatterItem;\\\\nexport declare function compareFunnel(shapeData: FunnelItem, activeTooltipItem: FunnelItem): boolean;\\\\nexport declare function comparePie(shapeData: PieItem, activeTooltipItem: PieItem): boolean;\\\\nexport declare function compareScatter(shapeData: ScatterItem, activeTooltipItem: ScatterItem): boolean;\\\\nexport declare function getActiveShapeIndexForTooltip({ activeTooltipItem, graphicalItem, itemData, }: GetActiveShapeIndexForTooltip): number;\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/BarUtils.d.ts snapshot 1`] = `"\\"import React from 'react';\\\\nimport { ActiveShape } from './types';\\\\nimport { BarProps } from '../cartesian/Bar';\\\\ntype BarRectangleProps = {\\\\n    option: ActiveShape<BarProps, SVGPathElement>;\\\\n    isActive: boolean;\\\\n} & BarProps;\\\\nexport declare function BarRectangle(props: BarRectangleProps): React.JSX.Element;\\\\nexport type MinPointSize = number | ((value: number, index: number) => number);\\\\nexport declare const minPointSizeCallback: (minPointSize: MinPointSize, defaultValue?: number) => (value: unknown, index: number) => number;\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/CartesianUtils.d.ts snapshot 1`] = `"\\"import { Coordinate, AxisType, Size } from './types';\\\\nexport declare const formatAxisMap: (props: any, axisMap: any, offset: any, axisType: AxisType, chartName: string) => {};\\\\nexport declare const rectWithPoints: ({ x: x1, y: y1 }: Coordinate, { x: x2, y: y2 }: Coordinate) => {\\\\n    x: number;\\\\n    y: number;\\\\n    width: number;\\\\n    height: number;\\\\n};\\\\nexport declare const rectWithCoords: ({ x1, y1, x2, y2 }: {\\\\n    x1: number;\\\\n    y1: number;\\\\n    x2: number;\\\\n    y2: number;\\\\n}) => {\\\\n    x: number;\\\\n    y: number;\\\\n    width: number;\\\\n    height: number;\\\\n};\\\\nexport declare class ScaleHelper {\\\\n    static EPS: number;\\\\n    private scale;\\\\n    static create(obj: any): ScaleHelper;\\\\n    constructor(scale: any);\\\\n    get domain(): any;\\\\n    get range(): any;\\\\n    get rangeMin(): any;\\\\n    get rangeMax(): any;\\\\n    get bandwidth(): any;\\\\n    apply(value: any, { bandAware, position }?: {\\\\n        bandAware?: boolean;\\\\n        position?: any;\\\\n    }): any;\\\\n    isInRange(value: number): boolean;\\\\n}\\\\ntype ScaleResult<T> = {\\\\n    [P in keyof T]: number;\\\\n};\\\\ntype Scales<T> = {\\\\n    [P in keyof T]: ScaleHelper;\\\\n};\\\\ntype ScalesApply<T> = (coord: {\\\\n    [P in keyof T]: any;\\\\n}, options: any) => ScaleResult<T>;\\\\ntype ScalesIsInRange<T> = (coord: {\\\\n    [P in keyof T]: any;\\\\n}) => boolean;\\\\ntype LabeledScales<T> = Scales<T> & {\\\\n    apply: ScalesApply<T>;\\\\n} & {\\\\n    isInRange: ScalesIsInRange<T>;\\\\n};\\\\nexport declare const createLabeledScales: (options: Record<string, any>) => LabeledScales<Record<string, any>>;\\\\nexport declare function normalizeAngle(angle: number): number;\\\\nexport declare const getAngledRectangleWidth: ({ width, height }: Size, angle?: number | undefined) => number;\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/ChartUtils.d.ts snapshot 1`] = `"\\"import { Series } from 'victory-vendor/d3-shape';\\\\nimport { ReactElement, ReactNode } from 'react';\\\\nimport { AxisType, BaseAxisProps, DataKey, LayoutType, LegendType, PolarLayoutType, NumberDomain, TickItem, CategoricalDomain, StackOffsetType, Margin, ChartOffset } from './types';\\\\nimport { getLegendProps } from './getLegendProps';\\\\nexport { getLegendProps };\\\\nexport declare function getValueByDataKey<T>(obj: T, dataKey: DataKey<T>, defaultValue?: any): any;\\\\nexport declare function getDomainOfDataByKey<T>(data: Array<T>, key: DataKey<T>, type: BaseAxisProps['type'], filterNil?: boolean): NumberDomain | CategoricalDomain;\\\\nexport declare const calculateActiveTickIndex: (coordinate: number, ticks?: Array<TickItem>, unsortedTicks?: Array<TickItem>, axis?: BaseAxisProps) => number;\\\\nexport declare const getMainColorOfGraphicItem: (item: ReactElement) => any;\\\\nexport interface FormattedGraphicalItem {\\\\n    props: {\\\\n        sectors?: ReadonlyArray<any>;\\\\n        data?: ReadonlyArray<any>;\\\\n    };\\\\n    childIndex: number;\\\\n    item: ReactElement<{\\\\n        legendType?: LegendType;\\\\n        hide: boolean;\\\\n        name?: string;\\\\n        dataKey: DataKey<any>;\\\\n    }>;\\\\n}\\\\nexport type BarSetup = {\\\\n    barSize: number | string;\\\\n    stackList: ReadonlyArray<ReactElement>;\\\\n    item: ReactElement;\\\\n};\\\\nexport declare const getBarSizeList: ({ barSize: globalSize, stackGroups, }: {\\\\n    barSize: number | string;\\\\n    stackGroups: AxisStackGroups;\\\\n}) => Record<string, ReadonlyArray<BarSetup>>;\\\\nexport type BarPosition = {\\\\n    item: ReactElement;\\\\n    position: {\\\\n        offset: number;\\\\n        size: number | undefined | typeof NaN;\\\\n    };\\\\n};\\\\nexport declare const getBarPosition: ({ barGap, barCategoryGap, bandSize, sizeList, maxBarSize, }: {\\\\n    barGap: string | number;\\\\n    barCategoryGap: string | number;\\\\n    bandSize: number;\\\\n    sizeList: ReadonlyArray<BarSetup>;\\\\n    maxBarSize: number;\\\\n}) => ReadonlyArray<BarPosition>;\\\\nexport declare const appendOffsetOfLegend: (offset: ChartOffset, _unused: unknown, props: {\\\\n    width?: number;\\\\n    margin: Margin;\\\\n    children?: ReactNode[];\\\\n}, legendBox: DOMRect | null) => ChartOffset;\\\\nexport declare const getDomainOfErrorBars: (data: Array<object>, item: ReactElement, dataKey: DataKey<any>, layout?: LayoutType, axisType?: AxisType) => NumberDomain | null;\\\\nexport declare const parseErrorBarsOfAxis: (data: any[], items: any[], dataKey: any, axisType: AxisType, layout?: LayoutType) => NumberDomain | null;\\\\nexport declare const getDomainOfItemsWithSameAxis: (data: any[], items: ReactElement[], type: BaseAxisProps['type'], layout?: LayoutType, filterNil?: boolean) => NumberDomain | CategoricalDomain;\\\\nexport declare const isCategoricalAxis: (layout: LayoutType | PolarLayoutType, axisType: AxisType) => boolean;\\\\nexport declare const getCoordinatesOfGrid: (ticks: Array<TickItem>, minValue: number, maxValue: number, syncWithTicks: Boolean) => number[];\\\\nexport declare const getTicksOfAxis: (axis: BaseAxisProps & {\\\\n    duplicateDomain?: any;\\\\n    realScaleType?: 'scaleBand' | 'band' | 'point' | 'linear';\\\\n    scale?: any;\\\\n    axisType?: AxisType;\\\\n    ticks?: any;\\\\n    niceTicks?: any;\\\\n    isCategorical?: boolean;\\\\n    categoricalDomain?: any;\\\\n}, isGrid?: boolean, isAll?: boolean) => TickItem[] | null;\\\\nexport declare const combineEventHandlers: (defaultHandler: Function, childHandler: Function | undefined) => Function;\\\\nexport declare const parseScale: (axis: {\\\\n    scale: 'auto' | string | Function;\\\\n    type?: BaseAxisProps['type'];\\\\n    layout?: 'radial' | unknown;\\\\n    axisType?: 'radiusAxis' | 'angleAxis' | unknown;\\\\n}, chartType?: string, hasBar?: boolean) => {\\\\n    scale: any;\\\\n    realScaleType?: string;\\\\n};\\\\nexport declare const checkDomainOfScale: (scale: any) => void;\\\\nexport declare const findPositionOfBar: (barPosition: any[], child: ReactNode) => any;\\\\nexport declare const truncateByDomain: (value: [number, number], domain: number[]) => number[];\\\\nexport declare const offsetSign: OffsetAccessor;\\\\nexport declare const offsetPositive: OffsetAccessor;\\\\ntype OffsetAccessor = (series: Array<Series<Record<string, unknown>, string>>, order: number[]) => void;\\\\nexport declare const getStackedData: (data: ReadonlyArray<Record<string, unknown>>, stackItems: ReadonlyArray<{\\\\n    props: {\\\\n        dataKey?: DataKey<any>;\\\\n    };\\\\n}>, offsetType: StackOffsetType) => ReadonlyArray<Series<Record<string, unknown>, string>>;\\\\ntype AxisId = string;\\\\nexport type StackId = string | number | symbol;\\\\nexport type ParentStackGroup = {\\\\n    hasStack: boolean;\\\\n    stackGroups: Record<StackId, ChildStackGroup>;\\\\n};\\\\nexport type GenericChildStackGroup<T> = {\\\\n    numericAxisId: string;\\\\n    cateAxisId: string;\\\\n    items: Array<ReactElement>;\\\\n    stackedData?: ReadonlyArray<T>;\\\\n};\\\\nexport type ChildStackGroup = GenericChildStackGroup<Series<Record<string, unknown>, string>>;\\\\nexport type AxisStackGroups = Record<AxisId, ParentStackGroup>;\\\\nexport declare const getStackGroupsByAxisId: (data: ReadonlyArray<Record<string, unknown>> | undefined, _items: Array<ReactElement>, numericAxisId: string, cateAxisId: string, offsetType: StackOffsetType, reverseStackOrder: boolean) => AxisStackGroups;\\\\nexport declare const getTicksOfScale: (scale: any, opts: any) => {\\\\n    niceTicks: any;\\\\n};\\\\nexport declare function getCateCoordinateOfLine<T extends Record<string, unknown>>({ axis, ticks, bandSize, entry, index, dataKey, }: {\\\\n    axis: {\\\\n        dataKey?: DataKey<T>;\\\\n        allowDuplicatedCategory?: boolean;\\\\n        type?: BaseAxisProps['type'];\\\\n        scale: (v: number) => number;\\\\n    };\\\\n    ticks: Array<TickItem>;\\\\n    bandSize: number;\\\\n    entry: T;\\\\n    index: number;\\\\n    dataKey?: DataKey<T>;\\\\n}): number | null;\\\\nexport declare const getCateCoordinateOfBar: ({ axis, ticks, offset, bandSize, entry, index, }: {\\\\n    axis: any;\\\\n    ticks: Array<TickItem>;\\\\n    offset: any;\\\\n    bandSize: number;\\\\n    entry: any;\\\\n    index: number;\\\\n}) => any;\\\\nexport declare const getBaseValueOfBar: ({ numericAxis, }: {\\\\n    numericAxis: any;\\\\n}) => any;\\\\nexport declare const getStackedDataOfItem: <StackedData>(item: ReactElement, stackGroups: Record<StackId, GenericChildStackGroup<StackedData>>) => StackedData;\\\\nexport declare const getDomainOfStackGroups: (stackGroups: Record<StackId, ChildStackGroup>, startIndex: number, endIndex: number) => number[];\\\\nexport declare const MIN_VALUE_REG: RegExp;\\\\nexport declare const MAX_VALUE_REG: RegExp;\\\\nexport declare const parseSpecifiedDomain: (specifiedDomain: any, dataDomain: any, allowDataOverflow?: boolean) => any;\\\\nexport declare const getBandSizeOfAxis: (axis?: BaseAxisProps, ticks?: Array<TickItem>, isBar?: boolean) => number | undefined;\\\\nexport declare const parseDomainOfCategoryAxis: <T>(specifiedDomain: readonly T[], calculatedDomain: readonly T[], axisChild: ReactElement) => readonly T[];\\\\nexport declare const getTooltipItem: (graphicalItem: ReactElement, payload: any) => {\\\\n    dataKey: any;\\\\n    unit: any;\\\\n    formatter: any;\\\\n    name: any;\\\\n    color: any;\\\\n    value: any;\\\\n    type: any;\\\\n    payload: any;\\\\n    chartType: any;\\\\n    hide: any;\\\\n};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/Constants.d.ts snapshot 1`] = `"\\"export declare const COLOR_PANEL: string[];\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/CssPrefixUtils.d.ts snapshot 1`] = `"\\"export declare const generatePrefixStyle: (name: string, value: string) => Record<string, string>;\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/DOMUtils.d.ts snapshot 1`] = `"\\"import { CSSProperties } from 'react';\\\\nimport { Size } from './types';\\\\nexport declare const getStyleString: (style: CSSProperties) => string;\\\\nexport declare const getStringSize: (text: string | number, style?: CSSProperties) => Size;\\\\ninterface ContainerOffset {\\\\n    top: number;\\\\n    left: number;\\\\n}\\\\nexport declare const getOffset: (rect: ContainerOffset) => ContainerOffset;\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/DataUtils.d.ts snapshot 1`] = `"\\"export declare const mathSign: (value: number) => 0 | 1 | -1;\\\\nexport declare const isPercent: (value: string | number) => value is \`\${number}%\`;\\\\nexport declare const isNumber: (value: unknown) => value is number;\\\\nexport declare const isNumOrStr: (value: unknown) => value is string | number;\\\\nexport declare const uniqueId: (prefix?: string) => string;\\\\nexport declare const getPercentValue: (percent: number | string, totalValue: number, defaultValue?: number, validate?: boolean) => number;\\\\nexport declare const getAnyElementOfObject: (obj: any) => any;\\\\nexport declare const hasDuplicate: (ary: Array<any>) => boolean;\\\\nexport declare const interpolateNumber: (numberA: number, numberB: number) => (t: number) => number;\\\\nexport declare function findEntryInArray<T>(ary: Array<T>, specifiedKey: number | string | ((entry: T) => unknown), specifiedValue: unknown): T;\\\\nexport declare const getLinearRegression: (data: Array<{\\\\n    cx?: number;\\\\n    cy?: number;\\\\n}>) => {\\\\n    xmin: number;\\\\n    xmax: number;\\\\n    a: number;\\\\n    b: number;\\\\n};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/DetectReferenceElementsDomain.d.ts snapshot 1`] = `"\\"import { ReactNode } from 'react';\\\\nexport declare const detectReferenceElementsDomain: (children: ReactNode[], domain: number[], axisId: string, axisType: string, specifiedTicks?: any[]) => number[];\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/Events.d.ts snapshot 1`] = `"\\"import EventEmitter from 'eventemitter3';\\\\nimport { CategoricalChartState } from '../chart/types';\\\\ndeclare const eventCenter: EventEmitter<EventTypes>;\\\\nexport { eventCenter };\\\\nexport declare const SYNC_EVENT = \\\\\\"recharts.syncMouseEvents\\\\\\";\\\\ninterface EventTypes {\\\\n    [SYNC_EVENT](syncId: number | string, data: CategoricalChartState, emitter: Symbol): void;\\\\n}\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/FunnelUtils.d.ts snapshot 1`] = `"\\"import React, { SVGProps } from 'react';\\\\nimport { FunnelProps, FunnelTrapezoidItem } from '../numberAxis/Funnel';\\\\nimport { Props as TrapezoidProps } from '../shape/Trapezoid';\\\\nexport declare function typeGuardTrapezoidProps(option: SVGProps<SVGPathElement>, props: FunnelTrapezoidItem): TrapezoidProps;\\\\ntype FunnelTrapezoidProps = {\\\\n    option: FunnelProps['activeShape'];\\\\n} & FunnelTrapezoidItem;\\\\nexport declare function FunnelTrapezoid(props: FunnelTrapezoidProps): React.JSX.Element;\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/Global.d.ts snapshot 1`] = `"\\"export interface GlobalConfig {\\\\n    isSsr?: boolean;\\\\n}\\\\nexport type GlobalConfigKeys = 'isSsr';\\\\nexport declare const Global: {\\\\n    isSsr: boolean;\\\\n    get: (key: 'isSsr') => boolean;\\\\n    set: (key: GlobalConfigKeys | GlobalConfig, value?: any) => void;\\\\n};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/IfOverflowMatches.d.ts snapshot 1`] = `"\\"export type IfOverflow = 'hidden' | 'visible' | 'discard' | 'extendDomain';\\\\nexport declare const ifOverflowMatches: (props: {\\\\n    alwaysShow?: boolean;\\\\n    ifOverflow?: IfOverflow;\\\\n}, value: IfOverflow) => boolean;\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/LogUtils.d.ts snapshot 1`] = `"\\"export declare const warn: (condition: boolean, format: string, ...args: any[]) => void;\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/PolarUtils.d.ts snapshot 1`] = `"\\"import { Coordinate, ChartOffset, GeometrySector } from './types';\\\\nexport declare const RADIAN: number;\\\\nexport declare const degreeToRadian: (angle: number) => number;\\\\nexport declare const radianToDegree: (angleInRadian: number) => number;\\\\nexport declare const polarToCartesian: (cx: number, cy: number, radius: number, angle: number) => Coordinate;\\\\nexport declare const getMaxRadius: (width: number, height: number, offset?: ChartOffset) => number;\\\\nexport declare const formatAxisMap: (props: any, axisMap: any, offset: ChartOffset, axisType: 'angleAxis' | 'radiusAxis', chartName: string) => {};\\\\nexport declare const distanceBetweenPoints: (point: Coordinate, anotherPoint: Coordinate) => number;\\\\nexport declare const getAngleOfPoint: ({ x, y }: Coordinate, { cx, cy }: GeometrySector) => {\\\\n    radius: number;\\\\n    angle?: undefined;\\\\n    angleInRadian?: undefined;\\\\n} | {\\\\n    radius: number;\\\\n    angle: number;\\\\n    angleInRadian: number;\\\\n};\\\\nexport declare const formatAngleOfSector: ({ startAngle, endAngle }: GeometrySector) => {\\\\n    startAngle: number;\\\\n    endAngle: number;\\\\n};\\\\nexport declare const inRangeOfSector: ({ x, y }: Coordinate, sector: GeometrySector) => boolean | {\\\\n    radius: number;\\\\n    angle: number;\\\\n    cx?: number;\\\\n    cy?: number;\\\\n    innerRadius?: number;\\\\n    outerRadius?: number;\\\\n    startAngle?: number;\\\\n    endAngle?: number;\\\\n    cornerRadius?: number;\\\\n    forceCornerRadius?: boolean;\\\\n    cornerIsExternal?: boolean;\\\\n};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/RadialBarUtils.d.ts snapshot 1`] = `"\\"import React, { SVGProps } from 'react';\\\\nimport { RadialBarProps } from '../polar/RadialBar';\\\\nimport { Props as SectorProps } from '../shape/Sector';\\\\nexport declare function parseCornerRadius(cornerRadius: string | number): number;\\\\nexport declare function typeGuardSectorProps(option: SVGProps<SVGPathElement>, props: SectorProps): SectorProps;\\\\nexport interface RadialBarSectorProps extends SectorProps {\\\\n    index?: number;\\\\n    option: RadialBarProps['activeShape'];\\\\n    isActive: boolean;\\\\n}\\\\nexport declare function RadialBarSector(props: RadialBarSectorProps): React.JSX.Element;\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/ReactUtils.d.ts snapshot 1`] = `"\\"import React, { Component, FunctionComponent, ReactNode } from 'react';\\\\nimport { DotProps } from '..';\\\\nimport { FilteredSvgElementType } from './types';\\\\nimport { AreaDot } from '../cartesian/Area';\\\\nimport { LineDot } from '../cartesian/Line';\\\\nexport declare const SCALE_TYPES: string[];\\\\nexport declare const LEGEND_TYPES: string[];\\\\nexport declare const TOOLTIP_TYPES: string[];\\\\nexport declare const getDisplayName: (Comp: React.ComponentType | string) => string;\\\\nexport declare const toArray: <T extends React.ReactNode>(children: T | T[]) => T[];\\\\nexport declare function findAllByType<ComponentType extends React.ComponentType, DetailedElement = React.DetailedReactHTMLElement<React.ComponentProps<ComponentType>, HTMLElement>>(children: ReactNode, type: ComponentType | ComponentType[]): DetailedElement[];\\\\nexport declare function findChildByType<ComponentType extends React.ComponentType>(children: ReactNode[], type: ComponentType | ComponentType[]): React.DetailedReactHTMLElement<React.ComponentProps<ComponentType>, HTMLElement>;\\\\nexport declare const withoutType: (children: ReactNode, type: string | string[]) => React.ReactNode[];\\\\nexport declare const validateWidthHeight: (el: any) => boolean;\\\\nexport declare const isDotProps: (dot: LineDot | AreaDot) => dot is DotProps;\\\\nexport declare const isValidSpreadableProp: (property: unknown, key: string, includeEvents?: boolean, svgElementType?: FilteredSvgElementType) => boolean;\\\\nexport declare const filterSvgElements: (children: React.ReactElement[]) => React.ReactElement[];\\\\nexport declare const filterProps: (props: Record<string, any> | Component | FunctionComponent | boolean | unknown, includeEvents: boolean, svgElementType?: FilteredSvgElementType) => Record<string, any>;\\\\nexport declare const isChildrenEqual: (nextChildren: React.ReactElement[], prevChildren: React.ReactElement[]) => boolean;\\\\nexport declare const isSingleChildEqual: (nextChild: React.ReactElement, prevChild: React.ReactElement) => boolean;\\\\nexport declare const renderByOrder: (children: React.ReactElement[], renderMap: any) => React.ReactElement<any, string | React.JSXElementConstructor<any>>[];\\\\nexport declare const getReactEventByType: (e: {\\\\n    type?: string;\\\\n}) => string;\\\\nexport declare const parseChildIndex: (child: any, children: any[]) => number;\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/ReduceCSSCalc.d.ts snapshot 1`] = `"\\"export declare function safeEvaluateExpression(expression: string): string;\\\\nexport declare function reduceCSSCalc(expression: string): string;\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/ScatterUtils.d.ts snapshot 1`] = `"\\"import React from 'react';\\\\nimport { ActiveShape, SymbolType } from './types';\\\\nimport { ScatterPointItem } from '../cartesian/Scatter';\\\\nexport declare function ScatterSymbol({ option, isActive, ...props }: {\\\\n    option: ActiveShape<ScatterPointItem> | SymbolType;\\\\n    isActive: boolean;\\\\n} & ScatterPointItem): React.JSX.Element;\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/ShallowEqual.d.ts snapshot 1`] = `"\\"export declare function shallowEqual(a: any, b: any): boolean;\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/TickUtils.d.ts snapshot 1`] = `"\\"import { Size, CartesianViewBox, CartesianTickItem } from './types';\\\\nexport declare function getAngledTickWidth(contentSize: Size, unitSize: Size, angle: number): number;\\\\nexport declare function getTickBoundaries(viewBox: CartesianViewBox, sign: number, sizeKey: string): {\\\\n    start: number;\\\\n    end: number;\\\\n};\\\\nexport declare function isVisible(sign: number, tickPosition: number, getSize: () => number, start: number, end: number): boolean;\\\\nexport declare function getNumberIntervalTicks(ticks: CartesianTickItem[], interval: number): CartesianTickItem[];\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/calculateViewBox.d.ts snapshot 1`] = `"\\"import { CartesianViewBox, ChartOffset } from './types';\\\\nexport declare const calculateViewBox: (offset: ChartOffset) => CartesianViewBox;\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/cursor/getCursorPoints.d.ts snapshot 1`] = `"\\"import { ChartCoordinate, Coordinate, ChartOffset, LayoutType } from '../types';\\\\nimport { RadialCursorPoints } from './getRadialCursorPoints';\\\\nexport declare function getCursorPoints(layout: LayoutType, activeCoordinate: ChartCoordinate, offset: ChartOffset): [Coordinate, Coordinate] | RadialCursorPoints;\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/cursor/getCursorRectangle.d.ts snapshot 1`] = `"\\"import { ChartCoordinate, ChartOffset, LayoutType } from '../types';\\\\nexport type CursorRectangle = {\\\\n    stroke: string;\\\\n    fill: string;\\\\n    x: number;\\\\n    y: number;\\\\n    width: number;\\\\n    height: number;\\\\n};\\\\nexport declare function getCursorRectangle(layout: LayoutType, activeCoordinate: ChartCoordinate, offset: ChartOffset, tooltipAxisBandSize: number): CursorRectangle;\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/cursor/getRadialCursorPoints.d.ts snapshot 1`] = `"\\"import { ChartCoordinate, Coordinate } from '../types';\\\\nexport type RadialCursorPoints = {\\\\n    points: [startPoint: Coordinate, endPoint: Coordinate];\\\\n    cx?: number;\\\\n    cy?: number;\\\\n    radius?: number;\\\\n    startAngle?: number;\\\\n    endAngle?: number;\\\\n};\\\\nexport declare function getRadialCursorPoints(activeCoordinate: ChartCoordinate): RadialCursorPoints;\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/getEveryNthWithCondition.d.ts snapshot 1`] = `"\\"export declare function getEveryNthWithCondition<Type>(array: Type[], n: number, isValid?: (candidate: Type) => boolean): Type[] | undefined;\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/getLegendProps.d.ts snapshot 1`] = `"\\"import { ReactNode, ReactElement } from 'react';\\\\nimport { Props as LegendProps } from '../component/Legend';\\\\nimport { FormattedGraphicalItem } from './ChartUtils';\\\\nexport declare const getLegendProps: ({ children, formattedGraphicalItems, legendWidth, legendContent, }: {\\\\n    children: ReactNode[];\\\\n    formattedGraphicalItems?: Array<FormattedGraphicalItem>;\\\\n    legendWidth: number;\\\\n    legendContent?: 'children';\\\\n}) => null | (LegendProps & {\\\\n    item: ReactElement;\\\\n});\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/isDomainSpecifiedByUser.d.ts snapshot 1`] = `"\\"import { AxisDomain, BaseAxisProps } from './types';\\\\nexport declare function isDomainSpecifiedByUser(domain: AxisDomain, allowDataOverflow: boolean, axisType: BaseAxisProps['type']): boolean;\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/payload/getUniqPayload.d.ts snapshot 1`] = `"\\"type UniqueFunc<T> = (entry: T) => unknown;\\\\nexport type UniqueOption<T> = boolean | UniqueFunc<T>;\\\\nexport declare function getUniqPayload<T>(payload: Array<T>, option: UniqueOption<T>, defaultUniqBy: UniqueFunc<T>): Array<T>;\\\\nexport {};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/tooltip/translate.d.ts snapshot 1`] = `"\\"import { CSSProperties } from 'react';\\\\nimport { Coordinate, CartesianViewBox, AllowInDimension } from '../types';\\\\nexport type Dimension2D = 'x' | 'y';\\\\nexport declare function getTooltipCSSClassName({ coordinate, translateX, translateY, }: {\\\\n    translateX: number | undefined;\\\\n    translateY: number | undefined;\\\\n    coordinate: Partial<Coordinate> | undefined;\\\\n}): string;\\\\nexport declare function getTooltipTranslateXY({ allowEscapeViewBox, coordinate, key, offsetTopLeft, position, reverseDirection, tooltipDimension, viewBox, viewBoxDimension, }: {\\\\n    allowEscapeViewBox: AllowInDimension;\\\\n    coordinate: Partial<Coordinate>;\\\\n    key: Dimension2D;\\\\n    offsetTopLeft: number;\\\\n    position: Partial<Coordinate>;\\\\n    reverseDirection: AllowInDimension;\\\\n    tooltipDimension: number;\\\\n    viewBox: CartesianViewBox;\\\\n    viewBoxDimension: number;\\\\n}): number;\\\\nexport declare function getTransformStyle({ translateX, translateY, useTranslate3d, }: {\\\\n    useTranslate3d: boolean;\\\\n    translateX: number;\\\\n    translateY: number;\\\\n}): CSSProperties;\\\\nexport declare function getTooltipTranslate({ allowEscapeViewBox, coordinate, offsetTopLeft, position, reverseDirection, tooltipBox, useTranslate3d, viewBox, }: {\\\\n    allowEscapeViewBox: AllowInDimension;\\\\n    coordinate: Partial<Coordinate> | undefined;\\\\n    offsetTopLeft: number;\\\\n    position: Partial<Coordinate>;\\\\n    reverseDirection: AllowInDimension;\\\\n    tooltipBox: {\\\\n        width: number;\\\\n        height: number;\\\\n    };\\\\n    useTranslate3d: boolean;\\\\n    viewBox: CartesianViewBox;\\\\n}): {\\\\n    cssProperties: CSSProperties;\\\\n    cssClasses: string;\\\\n};\\\\n\\""`;

exports[`should match /workplace/ckifer/recharts/types/util/types.d.ts snapshot 1`] = `"\\"import { AnimationEvent, AriaAttributes, ClipboardEvent, Component, CompositionEvent, DragEvent, FocusEvent, FormEvent, FunctionComponent, KeyboardEvent, MouseEvent, PointerEvent, ReactElement, ReactNode, SVGProps, SyntheticEvent, TouchEvent, TransitionEvent, UIEvent, WheelEvent, JSX } from 'react';\\\\nimport { ScaleContinuousNumeric as D3ScaleContinuousNumeric } from 'victory-vendor/d3-scale';\\\\nimport type { Props as XAxisProps } from '../cartesian/XAxis';\\\\nimport type { Props as YAxisProps } from '../cartesian/YAxis';\\\\nexport type StackOffsetType = 'sign' | 'expand' | 'none' | 'wiggle' | 'silhouette' | 'positive';\\\\nexport type LayoutType = 'horizontal' | 'vertical' | 'centric' | 'radial';\\\\nexport type PolarLayoutType = 'radial' | 'centric';\\\\nexport type AxisType = 'xAxis' | 'yAxis' | 'zAxis' | 'angleAxis' | 'radiusAxis';\\\\nexport type DataKey<T> = string | number | ((obj: T) => any);\\\\nexport type PresentationAttributesWithProps<P, T> = AriaAttributes & DOMAttributesWithProps<P, T> & Omit<SVGProps<T>, keyof DOMAttributesWithProps<P, T>>;\\\\nexport type PresentationAttributesAdaptChildEvent<P, T> = AriaAttributes & DOMAttributesAdaptChildEvent<P, T> & Omit<SVGProps<T>, keyof DOMAttributesAdaptChildEvent<P, T>>;\\\\nexport type SymbolType = 'circle' | 'cross' | 'diamond' | 'square' | 'star' | 'triangle' | 'wye';\\\\nexport type LegendType = 'plainline' | 'line' | 'square' | 'rect' | 'circle' | 'cross' | 'diamond' | 'star' | 'triangle' | 'wye' | 'none';\\\\nexport type TooltipType = 'none';\\\\nexport type AllowInDimension = {\\\\n    x?: boolean;\\\\n    y?: boolean;\\\\n};\\\\nexport interface Coordinate {\\\\n    x: number;\\\\n    y: number;\\\\n}\\\\nexport interface ChartCoordinate extends Coordinate {\\\\n    xAxis?: any;\\\\n    yAxis?: any;\\\\n    width?: any;\\\\n    height?: any;\\\\n    offset?: ChartOffset;\\\\n    angle?: number;\\\\n    radius?: number;\\\\n    cx?: number;\\\\n    cy?: number;\\\\n    startAngle?: number;\\\\n    endAngle?: number;\\\\n    innerRadius?: number;\\\\n    outerRadius?: number;\\\\n}\\\\nexport type ScaleType = 'auto' | 'linear' | 'pow' | 'sqrt' | 'log' | 'identity' | 'time' | 'band' | 'point' | 'ordinal' | 'quantile' | 'quantize' | 'utc' | 'sequential' | 'threshold';\\\\ntype EventHandler<P, E extends SyntheticEvent<any>> = {\\\\n    bivarianceHack(props: P, event: E): void;\\\\n}['bivarianceHack'];\\\\ntype ReactEventHandler<P, T = Element> = EventHandler<P, SyntheticEvent<T>>;\\\\ntype ClipboardEventHandler<P, T = Element> = EventHandler<P, ClipboardEvent<T>>;\\\\ntype CompositionEventHandler<P, T = Element> = EventHandler<P, CompositionEvent<T>>;\\\\ntype DragEventHandler<P, T = Element> = EventHandler<P, DragEvent<T>>;\\\\ntype FocusEventHandler<P, T = Element> = EventHandler<P, FocusEvent<T>>;\\\\ntype FormEventHandler<P, T = Element> = EventHandler<P, FormEvent<T>>;\\\\ntype KeyboardEventHandler<P, T = Element> = EventHandler<P, KeyboardEvent<T>>;\\\\ntype MouseEventHandler<P, T = Element> = EventHandler<P, MouseEvent<T>>;\\\\ntype TouchEventHandler<P, T = Element> = EventHandler<P, TouchEvent<T>>;\\\\ntype PointerEventHandler<P, T = Element> = EventHandler<P, PointerEvent<T>>;\\\\ntype UIEventHandler<P, T = Element> = EventHandler<P, UIEvent<T>>;\\\\ntype WheelEventHandler<P, T = Element> = EventHandler<P, WheelEvent<T>>;\\\\ntype AnimationEventHandler<P, T = Element> = EventHandler<P, AnimationEvent<T>>;\\\\ntype TransitionEventHandler<P, T = Element> = EventHandler<P, TransitionEvent<T>>;\\\\nexport interface DOMAttributesWithProps<P, T> {\\\\n    children?: ReactNode;\\\\n    dangerouslySetInnerHTML?: {\\\\n        __html: string;\\\\n    };\\\\n    onCopy?: ClipboardEventHandler<P, T>;\\\\n    onCopyCapture?: ClipboardEventHandler<P, T>;\\\\n    onCut?: ClipboardEventHandler<P, T>;\\\\n    onCutCapture?: ClipboardEventHandler<P, T>;\\\\n    onPaste?: ClipboardEventHandler<P, T>;\\\\n    onPasteCapture?: ClipboardEventHandler<P, T>;\\\\n    onCompositionEnd?: CompositionEventHandler<P, T>;\\\\n    onCompositionEndCapture?: CompositionEventHandler<P, T>;\\\\n    onCompositionStart?: CompositionEventHandler<P, T>;\\\\n    onCompositionStartCapture?: CompositionEventHandler<P, T>;\\\\n    onCompositionUpdate?: CompositionEventHandler<P, T>;\\\\n    onCompositionUpdateCapture?: CompositionEventHandler<P, T>;\\\\n    onFocus?: FocusEventHandler<P, T>;\\\\n    onFocusCapture?: FocusEventHandler<P, T>;\\\\n    onBlur?: FocusEventHandler<P, T>;\\\\n    onBlurCapture?: FocusEventHandler<P, T>;\\\\n    onChange?: FormEventHandler<P, T>;\\\\n    onChangeCapture?: FormEventHandler<P, T>;\\\\n    onBeforeInput?: FormEventHandler<P, T>;\\\\n    onBeforeInputCapture?: FormEventHandler<P, T>;\\\\n    onInput?: FormEventHandler<P, T>;\\\\n    onInputCapture?: FormEventHandler<P, T>;\\\\n    onReset?: FormEventHandler<P, T>;\\\\n    onResetCapture?: FormEventHandler<P, T>;\\\\n    onSubmit?: FormEventHandler<P, T>;\\\\n    onSubmitCapture?: FormEventHandler<P, T>;\\\\n    onInvalid?: FormEventHandler<P, T>;\\\\n    onInvalidCapture?: FormEventHandler<P, T>;\\\\n    onLoad?: ReactEventHandler<P, T>;\\\\n    onLoadCapture?: ReactEventHandler<P, T>;\\\\n    onError?: ReactEventHandler<P, T>;\\\\n    onErrorCapture?: ReactEventHandler<P, T>;\\\\n    onKeyDown?: KeyboardEventHandler<P, T>;\\\\n    onKeyDownCapture?: KeyboardEventHandler<P, T>;\\\\n    onKeyPress?: KeyboardEventHandler<P, T>;\\\\n    onKeyPressCapture?: KeyboardEventHandler<P, T>;\\\\n    onKeyUp?: KeyboardEventHandler<P, T>;\\\\n    onKeyUpCapture?: KeyboardEventHandler<P, T>;\\\\n    onAbort?: ReactEventHandler<P, T>;\\\\n    onAbortCapture?: ReactEventHandler<P, T>;\\\\n    onCanPlay?: ReactEventHandler<P, T>;\\\\n    onCanPlayCapture?: ReactEventHandler<P, T>;\\\\n    onCanPlayThrough?: ReactEventHandler<P, T>;\\\\n    onCanPlayThroughCapture?: ReactEventHandler<P, T>;\\\\n    onDurationChange?: ReactEventHandler<P, T>;\\\\n    onDurationChangeCapture?: ReactEventHandler<P, T>;\\\\n    onEmptied?: ReactEventHandler<P, T>;\\\\n    onEmptiedCapture?: ReactEventHandler<P, T>;\\\\n    onEncrypted?: ReactEventHandler<P, T>;\\\\n    onEncryptedCapture?: ReactEventHandler<P, T>;\\\\n    onEnded?: ReactEventHandler<P, T>;\\\\n    onEndedCapture?: ReactEventHandler<P, T>;\\\\n    onLoadedData?: ReactEventHandler<P, T>;\\\\n    onLoadedDataCapture?: ReactEventHandler<P, T>;\\\\n    onLoadedMetadata?: ReactEventHandler<P, T>;\\\\n    onLoadedMetadataCapture?: ReactEventHandler<P, T>;\\\\n    onLoadStart?: ReactEventHandler<P, T>;\\\\n    onLoadStartCapture?: ReactEventHandler<P, T>;\\\\n    onPause?: ReactEventHandler<P, T>;\\\\n    onPauseCapture?: ReactEventHandler<P, T>;\\\\n    onPlay?: ReactEventHandler<P, T>;\\\\n    onPlayCapture?: ReactEventHandler<P, T>;\\\\n    onPlaying?: ReactEventHandler<P, T>;\\\\n    onPlayingCapture?: ReactEventHandler<P, T>;\\\\n    onProgress?: ReactEventHandler<P, T>;\\\\n    onProgressCapture?: ReactEventHandler<P, T>;\\\\n    onRateChange?: ReactEventHandler<P, T>;\\\\n    onRateChangeCapture?: ReactEventHandler<P, T>;\\\\n    onSeeked?: ReactEventHandler<P, T>;\\\\n    onSeekedCapture?: ReactEventHandler<P, T>;\\\\n    onSeeking?: ReactEventHandler<P, T>;\\\\n    onSeekingCapture?: ReactEventHandler<P, T>;\\\\n    onStalled?: ReactEventHandler<P, T>;\\\\n    onStalledCapture?: ReactEventHandler<P, T>;\\\\n    onSuspend?: ReactEventHandler<P, T>;\\\\n    onSuspendCapture?: ReactEventHandler<P, T>;\\\\n    onTimeUpdate?: ReactEventHandler<P, T>;\\\\n    onTimeUpdateCapture?: ReactEventHandler<P, T>;\\\\n    onVolumeChange?: ReactEventHandler<P, T>;\\\\n    onVolumeChangeCapture?: ReactEventHandler<P, T>;\\\\n    onWaiting?: ReactEventHandler<P, T>;\\\\n    onWaitingCapture?: ReactEventHandler<P, T>;\\\\n    onAuxClick?: MouseEventHandler<P, T>;\\\\n    onAuxClickCapture?: MouseEventHandler<P, T>;\\\\n    onClick?: MouseEventHandler<P, T>;\\\\n    onClickCapture?: MouseEventHandler<P, T>;\\\\n    onContextMenu?: MouseEventHandler<P, T>;\\\\n    onContextMenuCapture?: MouseEventHandler<P, T>;\\\\n    onDoubleClick?: MouseEventHandler<P, T>;\\\\n    onDoubleClickCapture?: MouseEventHandler<P, T>;\\\\n    onDrag?: DragEventHandler<P, T>;\\\\n    onDragCapture?: DragEventHandler<P, T>;\\\\n    onDragEnd?: DragEventHandler<P, T>;\\\\n    onDragEndCapture?: DragEventHandler<P, T>;\\\\n    onDragEnter?: DragEventHandler<P, T>;\\\\n    onDragEnterCapture?: DragEventHandler<P, T>;\\\\n    onDragExit?: DragEventHandler<P, T>;\\\\n    onDragExitCapture?: DragEventHandler<P, T>;\\\\n    onDragLeave?: DragEventHandler<P, T>;\\\\n    onDragLeaveCapture?: DragEventHandler<P, T>;\\\\n    onDragOver?: DragEventHandler<P, T>;\\\\n    onDragOverCapture?: DragEventHandler<P, T>;\\\\n    onDragStart?: DragEventHandler<P, T>;\\\\n    onDragStartCapture?: DragEventHandler<P, T>;\\\\n    onDrop?: DragEventHandler<P, T>;\\\\n    onDropCapture?: DragEventHandler<P, T>;\\\\n    onMouseDown?: MouseEventHandler<P, T>;\\\\n    onMouseDownCapture?: MouseEventHandler<P, T>;\\\\n    onMouseEnter?: MouseEventHandler<P, T>;\\\\n    onMouseLeave?: MouseEventHandler<P, T>;\\\\n    onMouseMove?: MouseEventHandler<P, T>;\\\\n    onMouseMoveCapture?: MouseEventHandler<P, T>;\\\\n    onMouseOut?: MouseEventHandler<P, T>;\\\\n    onMouseOutCapture?: MouseEventHandler<P, T>;\\\\n    onMouseOver?: MouseEventHandler<P, T>;\\\\n    onMouseOverCapture?: MouseEventHandler<P, T>;\\\\n    onMouseUp?: MouseEventHandler<P, T>;\\\\n    onMouseUpCapture?: MouseEventHandler<P, T>;\\\\n    onSelect?: ReactEventHandler<P, T>;\\\\n    onSelectCapture?: ReactEventHandler<P, T>;\\\\n    onTouchCancel?: TouchEventHandler<P, T>;\\\\n    onTouchCancelCapture?: TouchEventHandler<P, T>;\\\\n    onTouchEnd?: TouchEventHandler<P, T>;\\\\n    onTouchEndCapture?: TouchEventHandler<P, T>;\\\\n    onTouchMove?: TouchEventHandler<P, T>;\\\\n    onTouchMoveCapture?: TouchEventHandler<P, T>;\\\\n    onTouchStart?: TouchEventHandler<P, T>;\\\\n    onTouchStartCapture?: TouchEventHandler<P, T>;\\\\n    onPointerDown?: PointerEventHandler<P, T>;\\\\n    onPointerDownCapture?: PointerEventHandler<P, T>;\\\\n    onPointerMove?: PointerEventHandler<P, T>;\\\\n    onPointerMoveCapture?: PointerEventHandler<P, T>;\\\\n    onPointerUp?: PointerEventHandler<P, T>;\\\\n    onPointerUpCapture?: PointerEventHandler<P, T>;\\\\n    onPointerCancel?: PointerEventHandler<P, T>;\\\\n    onPointerCancelCapture?: PointerEventHandler<P, T>;\\\\n    onPointerEnter?: PointerEventHandler<P, T>;\\\\n    onPointerEnterCapture?: PointerEventHandler<P, T>;\\\\n    onPointerLeave?: PointerEventHandler<P, T>;\\\\n    onPointerLeaveCapture?: PointerEventHandler<P, T>;\\\\n    onPointerOver?: PointerEventHandler<P, T>;\\\\n    onPointerOverCapture?: PointerEventHandler<P, T>;\\\\n    onPointerOut?: PointerEventHandler<P, T>;\\\\n    onPointerOutCapture?: PointerEventHandler<P, T>;\\\\n    onGotPointerCapture?: PointerEventHandler<P, T>;\\\\n    onGotPointerCaptureCapture?: PointerEventHandler<P, T>;\\\\n    onLostPointerCapture?: PointerEventHandler<P, T>;\\\\n    onLostPointerCaptureCapture?: PointerEventHandler<P, T>;\\\\n    onScroll?: UIEventHandler<P, T>;\\\\n    onScrollCapture?: UIEventHandler<P, T>;\\\\n    onWheel?: WheelEventHandler<P, T>;\\\\n    onWheelCapture?: WheelEventHandler<P, T>;\\\\n    onAnimationStart?: AnimationEventHandler<P, T>;\\\\n    onAnimationStartCapture?: AnimationEventHandler<P, T>;\\\\n    onAnimationEnd?: AnimationEventHandler<P, T>;\\\\n    onAnimationEndCapture?: AnimationEventHandler<P, T>;\\\\n    onAnimationIteration?: AnimationEventHandler<P, T>;\\\\n    onAnimationIterationCapture?: AnimationEventHandler<P, T>;\\\\n    onTransitionEnd?: TransitionEventHandler<P, T>;\\\\n    onTransitionEndCapture?: TransitionEventHandler<P, T>;\\\\n}\\\\ntype AdaptChildEventHandler<P, E extends SyntheticEvent<any>> = {\\\\n    bivarianceHack(data: P, index: number, event: E): void;\\\\n}['bivarianceHack'];\\\\ntype AdaptChildReactEventHandler<P, T = Element> = AdaptChildEventHandler<P, SyntheticEvent<T>>;\\\\ntype AdaptChildClipboardEventHandler<P, T = Element> = AdaptChildEventHandler<P, ClipboardEvent<T>>;\\\\ntype AdaptChildCompositionEventHandler<P, T = Element> = AdaptChildEventHandler<P, CompositionEvent<T>>;\\\\ntype AdaptChildDragEventHandler<P, T = Element> = AdaptChildEventHandler<P, DragEvent<T>>;\\\\ntype AdaptChildFocusEventHandler<P, T = Element> = AdaptChildEventHandler<P, FocusEvent<T>>;\\\\ntype AdaptChildFormEventHandler<P, T = Element> = AdaptChildEventHandler<P, FormEvent<T>>;\\\\ntype AdaptChildKeyboardEventHandler<P, T = Element> = AdaptChildEventHandler<P, KeyboardEvent<T>>;\\\\ntype AdaptChildMouseEventHandler<P, T = Element> = AdaptChildEventHandler<P, MouseEvent<T>>;\\\\ntype AdaptChildTouchEventHandler<P, T = Element> = AdaptChildEventHandler<P, TouchEvent<T>>;\\\\ntype AdaptChildPointerEventHandler<P, T = Element> = AdaptChildEventHandler<P, PointerEvent<T>>;\\\\ntype AdaptChildUIEventHandler<P, T = Element> = AdaptChildEventHandler<P, UIEvent<T>>;\\\\ntype AdaptChildWheelEventHandler<P, T = Element> = AdaptChildEventHandler<P, WheelEvent<T>>;\\\\ntype AdaptChildAnimationEventHandler<P, T = Element> = AdaptChildEventHandler<P, AnimationEvent<T>>;\\\\ntype AdaptChildTransitionEventHandler<P, T = Element> = AdaptChildEventHandler<P, TransitionEvent<T>>;\\\\nexport type DOMAttributesAdaptChildEvent<P, T> = {\\\\n    children?: ReactNode;\\\\n    dangerouslySetInnerHTML?: {\\\\n        __html: string;\\\\n    };\\\\n    onCopy?: AdaptChildClipboardEventHandler<P, T>;\\\\n    onCopyCapture?: AdaptChildClipboardEventHandler<P, T>;\\\\n    onCut?: AdaptChildClipboardEventHandler<P, T>;\\\\n    onCutCapture?: AdaptChildClipboardEventHandler<P, T>;\\\\n    onPaste?: AdaptChildClipboardEventHandler<P, T>;\\\\n    onPasteCapture?: AdaptChildClipboardEventHandler<P, T>;\\\\n    onCompositionEnd?: AdaptChildCompositionEventHandler<P, T>;\\\\n    onCompositionEndCapture?: AdaptChildCompositionEventHandler<P, T>;\\\\n    onCompositionStart?: AdaptChildCompositionEventHandler<P, T>;\\\\n    onCompositionStartCapture?: AdaptChildCompositionEventHandler<P, T>;\\\\n    onCompositionUpdate?: AdaptChildCompositionEventHandler<P, T>;\\\\n    onCompositionUpdateCapture?: AdaptChildCompositionEventHandler<P, T>;\\\\n    onFocus?: AdaptChildFocusEventHandler<P, T>;\\\\n    onFocusCapture?: AdaptChildFocusEventHandler<P, T>;\\\\n    onBlur?: AdaptChildFocusEventHandler<P, T>;\\\\n    onBlurCapture?: AdaptChildFocusEventHandler<P, T>;\\\\n    onChange?: AdaptChildFormEventHandler<P, T>;\\\\n    onChangeCapture?: AdaptChildFormEventHandler<P, T>;\\\\n    onBeforeInput?: AdaptChildFormEventHandler<P, T>;\\\\n    onBeforeInputCapture?: AdaptChildFormEventHandler<P, T>;\\\\n    onInput?: AdaptChildFormEventHandler<P, T>;\\\\n    onInputCapture?: AdaptChildFormEventHandler<P, T>;\\\\n    onReset?: AdaptChildFormEventHandler<P, T>;\\\\n    onResetCapture?: AdaptChildFormEventHandler<P, T>;\\\\n    onSubmit?: AdaptChildFormEventHandler<P, T>;\\\\n    onSubmitCapture?: AdaptChildFormEventHandler<P, T>;\\\\n    onInvalid?: AdaptChildFormEventHandler<P, T>;\\\\n    onInvalidCapture?: AdaptChildFormEventHandler<P, T>;\\\\n    onLoad?: AdaptChildReactEventHandler<P, T>;\\\\n    onLoadCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onError?: AdaptChildReactEventHandler<P, T>;\\\\n    onErrorCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onKeyDown?: AdaptChildKeyboardEventHandler<P, T>;\\\\n    onKeyDownCapture?: AdaptChildKeyboardEventHandler<P, T>;\\\\n    onKeyPress?: AdaptChildKeyboardEventHandler<P, T>;\\\\n    onKeyPressCapture?: AdaptChildKeyboardEventHandler<P, T>;\\\\n    onKeyUp?: AdaptChildKeyboardEventHandler<P, T>;\\\\n    onKeyUpCapture?: AdaptChildKeyboardEventHandler<P, T>;\\\\n    onAbort?: AdaptChildReactEventHandler<P, T>;\\\\n    onAbortCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onCanPlay?: AdaptChildReactEventHandler<P, T>;\\\\n    onCanPlayCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onCanPlayThrough?: AdaptChildReactEventHandler<P, T>;\\\\n    onCanPlayThroughCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onDurationChange?: AdaptChildReactEventHandler<P, T>;\\\\n    onDurationChangeCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onEmptied?: AdaptChildReactEventHandler<P, T>;\\\\n    onEmptiedCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onEncrypted?: AdaptChildReactEventHandler<P, T>;\\\\n    onEncryptedCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onEnded?: AdaptChildReactEventHandler<P, T>;\\\\n    onEndedCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onLoadedData?: AdaptChildReactEventHandler<P, T>;\\\\n    onLoadedDataCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onLoadedMetadata?: AdaptChildReactEventHandler<P, T>;\\\\n    onLoadedMetadataCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onLoadStart?: AdaptChildReactEventHandler<P, T>;\\\\n    onLoadStartCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onPause?: AdaptChildReactEventHandler<P, T>;\\\\n    onPauseCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onPlay?: AdaptChildReactEventHandler<P, T>;\\\\n    onPlayCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onPlaying?: AdaptChildReactEventHandler<P, T>;\\\\n    onPlayingCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onProgress?: AdaptChildReactEventHandler<P, T>;\\\\n    onProgressCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onRateChange?: AdaptChildReactEventHandler<P, T>;\\\\n    onRateChangeCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onSeeked?: AdaptChildReactEventHandler<P, T>;\\\\n    onSeekedCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onSeeking?: AdaptChildReactEventHandler<P, T>;\\\\n    onSeekingCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onStalled?: AdaptChildReactEventHandler<P, T>;\\\\n    onStalledCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onSuspend?: AdaptChildReactEventHandler<P, T>;\\\\n    onSuspendCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onTimeUpdate?: AdaptChildReactEventHandler<P, T>;\\\\n    onTimeUpdateCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onVolumeChange?: AdaptChildReactEventHandler<P, T>;\\\\n    onVolumeChangeCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onWaiting?: AdaptChildReactEventHandler<P, T>;\\\\n    onWaitingCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onAuxClick?: AdaptChildMouseEventHandler<P, T>;\\\\n    onAuxClickCapture?: AdaptChildMouseEventHandler<P, T>;\\\\n    onClick?: AdaptChildMouseEventHandler<P, T>;\\\\n    onClickCapture?: AdaptChildMouseEventHandler<P, T>;\\\\n    onContextMenu?: AdaptChildMouseEventHandler<P, T>;\\\\n    onContextMenuCapture?: AdaptChildMouseEventHandler<P, T>;\\\\n    onDoubleClick?: AdaptChildMouseEventHandler<P, T>;\\\\n    onDoubleClickCapture?: AdaptChildMouseEventHandler<P, T>;\\\\n    onDrag?: AdaptChildDragEventHandler<P, T>;\\\\n    onDragCapture?: AdaptChildDragEventHandler<P, T>;\\\\n    onDragEnd?: AdaptChildDragEventHandler<P, T>;\\\\n    onDragEndCapture?: AdaptChildDragEventHandler<P, T>;\\\\n    onDragEnter?: AdaptChildDragEventHandler<P, T>;\\\\n    onDragEnterCapture?: AdaptChildDragEventHandler<P, T>;\\\\n    onDragExit?: AdaptChildDragEventHandler<P, T>;\\\\n    onDragExitCapture?: AdaptChildDragEventHandler<P, T>;\\\\n    onDragLeave?: AdaptChildDragEventHandler<P, T>;\\\\n    onDragLeaveCapture?: AdaptChildDragEventHandler<P, T>;\\\\n    onDragOver?: AdaptChildDragEventHandler<P, T>;\\\\n    onDragOverCapture?: AdaptChildDragEventHandler<P, T>;\\\\n    onDragStart?: AdaptChildDragEventHandler<P, T>;\\\\n    onDragStartCapture?: AdaptChildDragEventHandler<P, T>;\\\\n    onDrop?: AdaptChildDragEventHandler<P, T>;\\\\n    onDropCapture?: AdaptChildDragEventHandler<P, T>;\\\\n    onMouseDown?: AdaptChildMouseEventHandler<P, T>;\\\\n    onMouseDownCapture?: AdaptChildMouseEventHandler<P, T>;\\\\n    onMouseEnter?: AdaptChildMouseEventHandler<P, T>;\\\\n    onMouseLeave?: AdaptChildMouseEventHandler<P, T>;\\\\n    onMouseMove?: AdaptChildMouseEventHandler<P, T>;\\\\n    onMouseMoveCapture?: AdaptChildMouseEventHandler<P, T>;\\\\n    onMouseOut?: AdaptChildMouseEventHandler<P, T>;\\\\n    onMouseOutCapture?: AdaptChildMouseEventHandler<P, T>;\\\\n    onMouseOver?: AdaptChildMouseEventHandler<P, T>;\\\\n    onMouseOverCapture?: AdaptChildMouseEventHandler<P, T>;\\\\n    onMouseUp?: AdaptChildMouseEventHandler<P, T>;\\\\n    onMouseUpCapture?: AdaptChildMouseEventHandler<P, T>;\\\\n    onSelect?: AdaptChildReactEventHandler<P, T>;\\\\n    onSelectCapture?: AdaptChildReactEventHandler<P, T>;\\\\n    onTouchCancel?: AdaptChildTouchEventHandler<P, T>;\\\\n    onTouchCancelCapture?: AdaptChildTouchEventHandler<P, T>;\\\\n    onTouchEnd?: AdaptChildTouchEventHandler<P, T>;\\\\n    onTouchEndCapture?: AdaptChildTouchEventHandler<P, T>;\\\\n    onTouchMove?: AdaptChildTouchEventHandler<P, T>;\\\\n    onTouchMoveCapture?: AdaptChildTouchEventHandler<P, T>;\\\\n    onTouchStart?: AdaptChildTouchEventHandler<P, T>;\\\\n    onTouchStartCapture?: AdaptChildTouchEventHandler<P, T>;\\\\n    onPointerDown?: AdaptChildPointerEventHandler<P, T>;\\\\n    onPointerDownCapture?: AdaptChildPointerEventHandler<P, T>;\\\\n    onPointerMove?: AdaptChildPointerEventHandler<P, T>;\\\\n    onPointerMoveCapture?: AdaptChildPointerEventHandler<P, T>;\\\\n    onPointerUp?: AdaptChildPointerEventHandler<P, T>;\\\\n    onPointerUpCapture?: AdaptChildPointerEventHandler<P, T>;\\\\n    onPointerCancel?: AdaptChildPointerEventHandler<P, T>;\\\\n    onPointerCancelCapture?: AdaptChildPointerEventHandler<P, T>;\\\\n    onPointerEnter?: AdaptChildPointerEventHandler<P, T>;\\\\n    onPointerEnterCapture?: AdaptChildPointerEventHandler<P, T>;\\\\n    onPointerLeave?: AdaptChildPointerEventHandler<P, T>;\\\\n    onPointerLeaveCapture?: AdaptChildPointerEventHandler<P, T>;\\\\n    onPointerOver?: AdaptChildPointerEventHandler<P, T>;\\\\n    onPointerOverCapture?: AdaptChildPointerEventHandler<P, T>;\\\\n    onPointerOut?: AdaptChildPointerEventHandler<P, T>;\\\\n    onPointerOutCapture?: AdaptChildPointerEventHandler<P, T>;\\\\n    onGotPointerCapture?: AdaptChildPointerEventHandler<P, T>;\\\\n    onGotPointerCaptureCapture?: AdaptChildPointerEventHandler<P, T>;\\\\n    onLostPointerCapture?: AdaptChildPointerEventHandler<P, T>;\\\\n    onLostPointerCaptureCapture?: AdaptChildPointerEventHandler<P, T>;\\\\n    onScroll?: AdaptChildUIEventHandler<P, T>;\\\\n    onScrollCapture?: AdaptChildUIEventHandler<P, T>;\\\\n    onWheel?: AdaptChildWheelEventHandler<P, T>;\\\\n    onWheelCapture?: AdaptChildWheelEventHandler<P, T>;\\\\n    onAnimationStart?: AdaptChildAnimationEventHandler<P, T>;\\\\n    onAnimationStartCapture?: AdaptChildAnimationEventHandler<P, T>;\\\\n    onAnimationEnd?: AdaptChildAnimationEventHandler<P, T>;\\\\n    onAnimationEndCapture?: AdaptChildAnimationEventHandler<P, T>;\\\\n    onAnimationIteration?: AdaptChildAnimationEventHandler<P, T>;\\\\n    onAnimationIterationCapture?: AdaptChildAnimationEventHandler<P, T>;\\\\n    onTransitionEnd?: AdaptChildTransitionEventHandler<P, T>;\\\\n    onTransitionEndCapture?: AdaptChildTransitionEventHandler<P, T>;\\\\n};\\\\nexport declare const SVGElementPropKeys: string[];\\\\nexport type FilteredSvgElementType = 'svg' | 'polyline' | 'polygon';\\\\nexport declare const FilteredElementKeyMap: Record<FilteredSvgElementType, string[]>;\\\\nexport declare const EventKeys: string[];\\\\nexport type AnimationTiming = 'ease' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'linear';\\\\nexport type AnimationDuration = number;\\\\nexport interface ChartOffset {\\\\n    top?: number;\\\\n    bottom?: number;\\\\n    left?: number;\\\\n    right?: number;\\\\n    width?: number;\\\\n    height?: number;\\\\n    brushBottom?: number;\\\\n}\\\\nexport interface Padding {\\\\n    top?: number;\\\\n    bottom?: number;\\\\n    left?: number;\\\\n    right?: number;\\\\n}\\\\nexport interface GeometrySector {\\\\n    cx?: number;\\\\n    cy?: number;\\\\n    innerRadius?: number;\\\\n    outerRadius?: number;\\\\n    startAngle?: number;\\\\n    endAngle?: number;\\\\n    cornerRadius?: number;\\\\n    forceCornerRadius?: boolean;\\\\n    cornerIsExternal?: boolean;\\\\n}\\\\nexport type D3Scale<T> = D3ScaleContinuousNumeric<T, number>;\\\\nexport type AxisDomainItem = string | number | Function | 'auto' | 'dataMin' | 'dataMax';\\\\nexport type AxisDomain = string[] | number[] | [AxisDomainItem, AxisDomainItem] | (([dataMin, dataMax]: [number, number], allowDataOverflow: boolean) => [number, number]);\\\\nexport type NumberDomain = [min: number, max: number];\\\\nexport type CategoricalDomain = (number | string | Date)[];\\\\nexport interface BaseAxisProps {\\\\n    type?: 'number' | 'category';\\\\n    dataKey?: DataKey<any>;\\\\n    hide?: boolean;\\\\n    scale?: ScaleType | Function;\\\\n    tick?: SVGProps<SVGTextElement> | ReactElement<SVGElement> | ((props: any) => ReactElement<SVGElement>) | boolean;\\\\n    tickCount?: number;\\\\n    axisLine?: boolean | SVGProps<SVGLineElement>;\\\\n    tickLine?: boolean | SVGProps<SVGTextElement>;\\\\n    tickSize?: number;\\\\n    tickFormatter?: (value: any, index: number) => string;\\\\n    allowDataOverflow?: boolean;\\\\n    allowDuplicatedCategory?: boolean;\\\\n    allowDecimals?: boolean;\\\\n    domain?: AxisDomain;\\\\n    includeHidden?: boolean;\\\\n    name?: string;\\\\n    unit?: string | number;\\\\n    axisType?: AxisType;\\\\n    range?: Array<number>;\\\\n    AxisComp?: any;\\\\n    label?: string | number | ReactElement | object;\\\\n    className?: string;\\\\n}\\\\nexport type AxisInterval = number | 'preserveStart' | 'preserveEnd' | 'preserveStartEnd' | 'equidistantPreserveStart';\\\\nexport interface TickItem {\\\\n    value?: any;\\\\n    coordinate: number;\\\\n    index?: number;\\\\n}\\\\nexport interface CartesianTickItem extends TickItem {\\\\n    tickCoord?: number;\\\\n    tickSize?: number;\\\\n    isShow?: boolean;\\\\n}\\\\nexport interface Margin {\\\\n    top?: number;\\\\n    right?: number;\\\\n    bottom?: number;\\\\n    left?: number;\\\\n}\\\\nexport interface CartesianViewBox {\\\\n    x?: number;\\\\n    y?: number;\\\\n    width?: number;\\\\n    height?: number;\\\\n}\\\\nexport interface PolarViewBox {\\\\n    cx?: number;\\\\n    cy?: number;\\\\n    innerRadius?: number;\\\\n    outerRadius?: number;\\\\n    startAngle?: number;\\\\n    endAngle?: number;\\\\n    clockWise?: boolean;\\\\n}\\\\nexport type ViewBox = CartesianViewBox | PolarViewBox;\\\\ntype RecordString<T> = Record<string, T>;\\\\ntype AdaptEventHandlersReturn = RecordString<(e?: Event) => any> | RecordString<(e: Event) => void> | null;\\\\nexport declare const adaptEventHandlers: (props: RecordString<any> | Component | FunctionComponent | boolean, newHandler?: (e?: Event) => any) => AdaptEventHandlersReturn;\\\\nexport declare const adaptEventsOfChild: (props: RecordString<any>, data: any, index: number) => RecordString<(e?: Event) => any>;\\\\nexport type TooltipEventType = 'axis' | 'item';\\\\nexport interface CategoricalChartOptions {\\\\n    chartName?: string;\\\\n    GraphicalChild?: any;\\\\n    defaultTooltipEventType?: TooltipEventType;\\\\n    validateTooltipEventTypes?: ReadonlyArray<TooltipEventType>;\\\\n    axisComponents?: BaseAxisProps[];\\\\n    legendContent?: 'children';\\\\n    formatAxisMap?: any;\\\\n    defaultProps?: any;\\\\n}\\\\nexport interface TreemapNode {\\\\n    x: number;\\\\n    y: number;\\\\n    width: number;\\\\n    height: number;\\\\n    depth: number;\\\\n    index: number;\\\\n    children?: any;\\\\n    name: string;\\\\n    value: number;\\\\n    [k: string]: any;\\\\n}\\\\nexport interface SankeyNode {\\\\n    x: number;\\\\n    y: number;\\\\n    dx: number;\\\\n    dy: number;\\\\n    depth: number;\\\\n    value: number;\\\\n}\\\\nexport interface SankeyLink {\\\\n    target: number;\\\\n    source: number;\\\\n    value: number;\\\\n    sy: number;\\\\n    dy: number;\\\\n    ty: number;\\\\n}\\\\nexport type Size = {\\\\n    width: number;\\\\n    height: number;\\\\n};\\\\nexport type ActiveShape<PropsType = Record<string, any>, ElementType = SVGElement> = ReactElement<SVGProps<ElementType>> | ((props: PropsType) => ReactElement<SVGProps<ElementType>>) | ((props: unknown) => JSX.Element) | SVGProps<ElementType> | boolean;\\\\nexport type XAxisMap = {\\\\n    [axisId: string]: XAxisProps;\\\\n};\\\\nexport type YAxisMap = {\\\\n    [axisId: string]: YAxisProps;\\\\n};\\\\nexport {};\\\\n\\""`;
